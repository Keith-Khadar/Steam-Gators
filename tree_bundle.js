(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.tree = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":16}],3:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":11,"./encoders":14,"inherits":133}],4:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":7,"inherits":133,"safer-buffer":163}],5:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":4,"../base/reporter":7,"minimalistic-assert":137}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":133}],8:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],9:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":4,"../base/node":6,"../constants/der":8,"bn.js":16,"inherits":133}],11:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"inherits":133,"safer-buffer":163}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":6,"../constants/der":8,"inherits":133,"safer-buffer":163}],14:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":133}],16:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],19:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":20}],20:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],21:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":162}],22:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":21,"./ghash":26,"./incr32":27,"buffer-xor":63,"cipher-base":65,"inherits":133,"safe-buffer":162}],23:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":24,"./encrypter":25,"./modes/list.json":35}],24:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":65,"evp_bytestokey":102,"inherits":133,"safe-buffer":162}],25:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":65,"evp_bytestokey":102,"inherits":133,"safe-buffer":162}],26:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":162}],27:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],28:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":63}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":63,"safe-buffer":162}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":162}],31:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":162}],32:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":27,"buffer-xor":63,"safe-buffer":162}],33:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],34:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":28,"./cfb":29,"./cfb1":30,"./cfb8":31,"./ctr":32,"./ecb":33,"./list.json":35,"./ofb":36}],35:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],36:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":64,"buffer-xor":63}],37:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":21,"cipher-base":65,"inherits":133,"safe-buffer":162}],38:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":23,"browserify-aes/modes":34,"browserify-des":39,"browserify-des/modes":40,"evp_bytestokey":102}],39:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":65,"des.js":73,"inherits":133,"safe-buffer":162}],40:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],41:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js')
var randomBytes = require('randombytes')

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":18,"buffer":64,"randombytes":159}],42:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":43}],43:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],44:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],45:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":43,"./sign":46,"./verify":47,"create-hash":68,"inherits":133,"readable-stream":62,"safe-buffer":162}],46:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":44,"bn.js":18,"browserify-rsa":41,"create-hmac":70,"elliptic":84,"parse-asn1":143,"safe-buffer":162}],47:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":44,"bn.js":18,"elliptic":84,"parse-asn1":143,"safe-buffer":162}],48:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],49:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":51,"./_stream_writable":53,"_process":151,"inherits":133}],50:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":52,"inherits":133}],51:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":48,"./_stream_duplex":49,"./internal/streams/async_iterator":54,"./internal/streams/buffer_list":55,"./internal/streams/destroy":56,"./internal/streams/from":58,"./internal/streams/state":60,"./internal/streams/stream":61,"_process":151,"buffer":64,"events":101,"inherits":133,"string_decoder/":187,"util":20}],52:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":48,"./_stream_duplex":49,"inherits":133}],53:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":48,"./_stream_duplex":49,"./internal/streams/destroy":56,"./internal/streams/state":60,"./internal/streams/stream":61,"_process":151,"buffer":64,"inherits":133,"util-deprecate":188}],54:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":57,"_process":151}],55:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":64,"util":20}],56:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":151}],57:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":48}],58:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],59:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":48,"./end-of-stream":57}],60:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":48}],61:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":101}],62:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":49,"./lib/_stream_passthrough.js":50,"./lib/_stream_readable.js":51,"./lib/_stream_transform.js":52,"./lib/_stream_writable.js":53,"./lib/internal/streams/end-of-stream.js":57,"./lib/internal/streams/pipeline.js":59}],63:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":64}],64:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":64,"ieee754":132}],65:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":133,"safe-buffer":162,"stream":172,"string_decoder":187}],66:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":67,"buffer":64,"elliptic":84}],67:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],68:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":65,"inherits":133,"md5.js":134,"ripemd160":161,"sha.js":165}],69:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":134}],70:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":71,"cipher-base":65,"create-hash/md5":69,"inherits":133,"ripemd160":161,"safe-buffer":162,"sha.js":165}],71:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":65,"inherits":133,"safe-buffer":162}],72:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":38,"browserify-sign":45,"browserify-sign/algos":42,"create-ecdh":66,"create-hash":68,"create-hmac":70,"diffie-hellman":79,"pbkdf2":145,"public-encrypt":152,"randombytes":159,"randomfill":160}],73:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":74,"./des/cipher":75,"./des/des":76,"./des/ede":77,"./des/utils":78}],74:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":133,"minimalistic-assert":137}],75:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":137}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":75,"./utils":78,"inherits":133,"minimalistic-assert":137}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":75,"./des":76,"inherits":133,"minimalistic-assert":137}],78:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],79:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":80,"./lib/generatePrime":81,"./lib/primes.json":82,"buffer":64}],80:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":81,"bn.js":83,"buffer":64,"miller-rabin":135,"randombytes":159}],81:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":83,"miller-rabin":135,"randombytes":159}],82:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],83:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],84:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":100,"./elliptic/curve":87,"./elliptic/curves":90,"./elliptic/ec":91,"./elliptic/eddsa":94,"./elliptic/utils":98,"brorand":19}],85:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":98,"bn.js":99}],86:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":98,"./base":85,"bn.js":99,"inherits":133}],87:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":85,"./edwards":86,"./mont":88,"./short":89}],88:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":98,"./base":85,"bn.js":99,"inherits":133}],89:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":98,"./base":85,"bn.js":99,"inherits":133}],90:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":87,"./precomputed/secp256k1":97,"./utils":98,"hash.js":119}],91:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":90,"../utils":98,"./key":92,"./signature":93,"bn.js":99,"brorand":19,"hmac-drbg":131}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":98,"bn.js":99}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":98,"bn.js":99}],94:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":90,"../utils":98,"./key":95,"./signature":96,"hash.js":119}],95:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":98}],96:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":98,"bn.js":99}],97:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],98:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":99,"minimalistic-assert":137,"minimalistic-crypto-utils":138}],99:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],100:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.5.4",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}

},{}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],102:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":134,"safe-buffer":162}],103:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":133,"readable-stream":118,"safe-buffer":162}],104:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],105:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_readable":107,"./_stream_writable":109,"_process":151,"dup":49,"inherits":133}],106:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_transform":108,"dup":50,"inherits":133}],107:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":104,"./_stream_duplex":105,"./internal/streams/async_iterator":110,"./internal/streams/buffer_list":111,"./internal/streams/destroy":112,"./internal/streams/from":114,"./internal/streams/state":116,"./internal/streams/stream":117,"_process":151,"buffer":64,"dup":51,"events":101,"inherits":133,"string_decoder/":187,"util":20}],108:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":104,"./_stream_duplex":105,"dup":52,"inherits":133}],109:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":104,"./_stream_duplex":105,"./internal/streams/destroy":112,"./internal/streams/state":116,"./internal/streams/stream":117,"_process":151,"buffer":64,"dup":53,"inherits":133,"util-deprecate":188}],110:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./end-of-stream":113,"_process":151,"dup":54}],111:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"buffer":64,"dup":55,"util":20}],112:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"_process":151,"dup":56}],113:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"../../../errors":104,"dup":57}],114:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],115:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":104,"./end-of-stream":113,"dup":59}],116:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":104,"dup":60}],117:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61,"events":101}],118:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":105,"./lib/_stream_passthrough.js":106,"./lib/_stream_readable.js":107,"./lib/_stream_transform.js":108,"./lib/_stream_writable.js":109,"./lib/internal/streams/end-of-stream.js":113,"./lib/internal/streams/pipeline.js":115,"dup":62}],119:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":120,"./hash/hmac":121,"./hash/ripemd":122,"./hash/sha":123,"./hash/utils":130}],120:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":130,"minimalistic-assert":137}],121:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":130,"minimalistic-assert":137}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":120,"./utils":130}],123:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":124,"./sha/224":125,"./sha/256":126,"./sha/384":127,"./sha/512":128}],124:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":120,"../utils":130,"./common":129}],125:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":130,"./256":126}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":120,"../utils":130,"./common":129,"minimalistic-assert":137}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":130,"./512":128}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":120,"../utils":130,"minimalistic-assert":137}],129:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":130}],130:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":133,"minimalistic-assert":137}],131:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":119,"minimalistic-assert":137,"minimalistic-crypto-utils":138}],132:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],133:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],134:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":103,"inherits":133,"safe-buffer":162}],135:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":136,"brorand":19}],136:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],137:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],138:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],139:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],140:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":141,"asn1.js":2}],141:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],142:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":23,"evp_bytestokey":102,"safe-buffer":162}],143:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":139,"./asn1":140,"./fixProc":142,"browserify-aes":23,"pbkdf2":145,"safe-buffer":162}],144:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":151}],145:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":146,"./lib/sync":149}],146:[function(require,module,exports){
(function (global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":147,"./precondition":148,"./sync":149,"./to-buffer":150,"safe-buffer":162}],147:[function(require,module,exports){
(function (process,global){(function (){
var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":151}],148:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],149:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":147,"./precondition":148,"./to-buffer":150,"create-hash/md5":69,"ripemd160":161,"safe-buffer":162,"sha.js":165}],150:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":162}],151:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],152:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":155,"./publicEncrypt":156}],153:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":68,"safe-buffer":162}],154:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],155:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":153,"./withPublic":157,"./xor":158,"bn.js":154,"browserify-rsa":41,"create-hash":68,"parse-asn1":143,"safe-buffer":162}],156:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":153,"./withPublic":157,"./xor":158,"bn.js":154,"browserify-rsa":41,"create-hash":68,"parse-asn1":143,"randombytes":159,"safe-buffer":162}],157:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":154,"safe-buffer":162}],158:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],159:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":151,"safe-buffer":162}],160:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":151,"randombytes":159,"safe-buffer":162}],161:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":64,"hash-base":103,"inherits":133}],162:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":64}],163:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":151,"buffer":64}],164:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":162}],165:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":166,"./sha1":167,"./sha224":168,"./sha256":169,"./sha384":170,"./sha512":171}],166:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":164,"inherits":133,"safe-buffer":162}],167:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":164,"inherits":133,"safe-buffer":162}],168:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":164,"./sha256":169,"inherits":133,"safe-buffer":162}],169:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":164,"inherits":133,"safe-buffer":162}],170:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":164,"./sha512":171,"inherits":133,"safe-buffer":162}],171:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":164,"inherits":133,"safe-buffer":162}],172:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":101,"inherits":133,"readable-stream/lib/_stream_duplex.js":174,"readable-stream/lib/_stream_passthrough.js":175,"readable-stream/lib/_stream_readable.js":176,"readable-stream/lib/_stream_transform.js":177,"readable-stream/lib/_stream_writable.js":178,"readable-stream/lib/internal/streams/end-of-stream.js":182,"readable-stream/lib/internal/streams/pipeline.js":184}],173:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],174:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_readable":176,"./_stream_writable":178,"_process":151,"dup":49,"inherits":133}],175:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_transform":177,"dup":50,"inherits":133}],176:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":173,"./_stream_duplex":174,"./internal/streams/async_iterator":179,"./internal/streams/buffer_list":180,"./internal/streams/destroy":181,"./internal/streams/from":183,"./internal/streams/state":185,"./internal/streams/stream":186,"_process":151,"buffer":64,"dup":51,"events":101,"inherits":133,"string_decoder/":187,"util":20}],177:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":173,"./_stream_duplex":174,"dup":52,"inherits":133}],178:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":173,"./_stream_duplex":174,"./internal/streams/destroy":181,"./internal/streams/state":185,"./internal/streams/stream":186,"_process":151,"buffer":64,"dup":53,"inherits":133,"util-deprecate":188}],179:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./end-of-stream":182,"_process":151,"dup":54}],180:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"buffer":64,"dup":55,"util":20}],181:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"_process":151,"dup":56}],182:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"../../../errors":173,"dup":57}],183:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],184:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":173,"./end-of-stream":182,"dup":59}],185:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":173,"dup":60}],186:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61,"events":101}],187:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":162}],188:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],189:[function(require,module,exports){
(function (process,Buffer,__filename,__argument0,__argument1,__argument2,__argument3,__dirname){(function (){

var Module = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});if(!Module.expectedDataFileDownloads){Module.expectedDataFileDownloads=0}Module.expectedDataFileDownloads++;(function(){if(Module["ENVIRONMENT_IS_PTHREAD"])return;var loadPackage=function(metadata){var PACKAGE_PATH="";if(typeof window==="object"){PACKAGE_PATH=window["encodeURIComponent"](window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/")}else if(typeof process==="undefined"&&typeof location!=="undefined"){PACKAGE_PATH=encodeURIComponent(location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/")}var PACKAGE_NAME="./build/cplusplus_data.data";var REMOTE_PACKAGE_BASE="cplusplus_data.data";if(typeof Module["locateFilePackage"]==="function"&&!Module["locateFile"]){Module["locateFile"]=Module["locateFilePackage"];err("warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)")}var REMOTE_PACKAGE_NAME=Module["locateFile"]?Module["locateFile"](REMOTE_PACKAGE_BASE,""):REMOTE_PACKAGE_BASE;var REMOTE_PACKAGE_SIZE=metadata["remote_package_size"];function fetchRemotePackage(packageName,packageSize,callback,errback){if(typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string"){require("fs").readFile(packageName,function(err,contents){if(err){errback(err)}else{callback(contents.buffer)}});return}var xhr=new XMLHttpRequest;xhr.open("GET",packageName,true);xhr.responseType="arraybuffer";xhr.onprogress=function(event){var url=packageName;var size=packageSize;if(event.total)size=event.total;if(event.loaded){if(!xhr.addedTotal){xhr.addedTotal=true;if(!Module.dataFileDownloads)Module.dataFileDownloads={};Module.dataFileDownloads[url]={loaded:event.loaded,total:size}}else{Module.dataFileDownloads[url].loaded=event.loaded}var total=0;var loaded=0;var num=0;for(var download in Module.dataFileDownloads){var data=Module.dataFileDownloads[download];total+=data.total;loaded+=data.loaded;num++}total=Math.ceil(total*Module.expectedDataFileDownloads/num);if(Module["setStatus"])Module["setStatus"]("Downloading data... ("+loaded+"/"+total+")")}else if(!Module.dataFileDownloads){if(Module["setStatus"])Module["setStatus"]("Downloading data...")}};xhr.onerror=function(event){throw new Error("NetworkError for: "+packageName)};xhr.onload=function(event){if(xhr.status==200||xhr.status==304||xhr.status==206||xhr.status==0&&xhr.response){var packageData=xhr.response;callback(packageData)}else{throw new Error(xhr.statusText+" : "+xhr.responseURL)}};xhr.send(null)}function handleError(error){console.error("package error:",error)}var fetchedCallback=null;var fetched=Module["getPreloadedPackage"]?Module["getPreloadedPackage"](REMOTE_PACKAGE_NAME,REMOTE_PACKAGE_SIZE):null;if(!fetched)fetchRemotePackage(REMOTE_PACKAGE_NAME,REMOTE_PACKAGE_SIZE,function(data){if(fetchedCallback){fetchedCallback(data);fetchedCallback=null}else{fetched=data}},handleError);function runWithFS(){function assert(check,msg){if(!check)throw msg+(new Error).stack}Module["FS_createPath"]("/","app",true,true);function DataRequest(start,end,audio){this.start=start;this.end=end;this.audio=audio}DataRequest.prototype={requests:{},open:function(mode,name){this.name=name;this.requests[name]=this;Module["addRunDependency"]("fp "+this.name)},send:function(){},onload:function(){var byteArray=this.byteArray.subarray(this.start,this.end);this.finish(byteArray)},finish:function(byteArray){var that=this;Module["FS_createDataFile"](this.name,null,byteArray,true,true,true);Module["removeRunDependency"]("fp "+that.name);this.requests[this.name]=null}};var files=metadata["files"];for(var i=0;i<files.length;++i){new DataRequest(files[i]["start"],files[i]["end"],files[i]["audio"]||0).open("GET",files[i]["filename"])}function processPackageData(arrayBuffer){assert(arrayBuffer,"Loading data file failed.");assert(arrayBuffer.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var byteArray=new Uint8Array(arrayBuffer);DataRequest.prototype.byteArray=byteArray;var files=metadata["files"];for(var i=0;i<files.length;++i){DataRequest.prototype.requests[files[i].filename].onload()}Module["removeRunDependency"]("datafile_./build/cplusplus_data.data")}Module["addRunDependency"]("datafile_./build/cplusplus_data.data");if(!Module.preloadResults)Module.preloadResults={};Module.preloadResults[PACKAGE_NAME]={fromCache:false};if(fetched){processPackageData(fetched);fetched=null}else{fetchedCallback=processPackageData}}if(Module["calledRun"]){runWithFS()}else{if(!Module["preRun"])Module["preRun"]=[];Module["preRun"].push(runWithFS)}};loadPackage({"files":[{"filename":"/app/cplusplus_data.data","start":0,"end":22287797}],"remote_package_size":22287797})})();var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;let toLog=e;err("exiting due to exception: "+toLog)}if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require("path").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}var fs,nodePath;if(typeof require==="function"){fs=require("fs");nodePath=require("path")}read_=(filename,binary)=>{filename=nodePath["normalize"](filename);return fs.readFileSync(filename,binary?undefined:"utf8")};readBinary=filename=>{var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}return ret};readAsync=(filename,onload,onerror)=>{filename=nodePath["normalize"](filename);fs.readFile(filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",function(reason){throw reason});quit_=(status,toThrow)=>{if(keepRuntimeAlive()){process["exitCode"]=status;throw toThrow}logExceptionOnExit(toThrow);process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=title=>document.title=title}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;var WebAssembly={Memory:function(opts){this.buffer=new ArrayBuffer(opts["initial"]*65536)},Module:function(binary){},Instance:function(module,info){this.exports=(
// EMSCRIPTEN_START_ASM
function instantiate(bb){function c(d){d.set=function(a,b){this[a]=b};d.get=function(a){return this[a]};return d}var e;var f=new ArrayBuffer(16);var g=new Int32Array(f);var h=new Float32Array(f);var i=new Float64Array(f);function j(k){return g[k]}function l(k,m){g[k]=m}function n(){return i[0]}function o(m){i[0]=m}function p(){throw new Error("abort")}function q(){return h[2]}function r(m){h[2]=m}function $a(ab){var s=ab.a;var t=s.a;var u=t.buffer;var v=new Int8Array(u);var w=new Int16Array(u);var x=new Int32Array(u);var y=new Uint8Array(u);var z=new Uint16Array(u);var A=new Uint32Array(u);var B=new Float32Array(u);var C=new Float64Array(u);var D=Math.imul;var E=Math.fround;var F=Math.abs;var G=Math.clz32;var H=Math.min;var I=Math.max;var J=Math.floor;var K=Math.ceil;var L=Math.trunc;var M=Math.sqrt;var N=NaN;var O=Infinity;var P=s.b;var Q=s.c;var R=s.d;var S=s.e;var T=s.f;var U=s.g;var V=s.h;var W=s.i;var X=s.j;var Y=s.k;var Z=s.l;var _=s.m;var $=s.n;var aa=s.o;var ba=s.p;var ca=s.q;var da=s.r;var ea=s.s;var fa=s.t;var ga=s.u;var ha=s.v;var ia=s.w;var ja=s.x;var ka=s.y;var la=s.z;var ma=s.A;var na=s.B;var oa=s.C;var pa=s.D;var qa=s.E;var ra=s.F;var sa=s.G;var ta=s.H;var ua=s.I;var va=s.J;var wa=s.K;var xa=s.L;var ya=s.M;var za=s.N;var Aa=s.O;var Ba=s.P;var Ca=s.Q;var Da=s.R;var Ea=s.S;var Fa=s.T;var Ga=s.U;var Ha=s.V;var Ia=s.W;var Ja=s.X;var Ka=s.Y;var La=s.Z;var Ma=s._;var Na=s.$;var Oa=s.aa;var Pa=s.ba;var Qa=s.ca;var Ra=s.da;var Sa=s.ea;var Ta=s.fa;var Ua=s.ga;var Va=s.ha;var Wa=5265696;var Xa=0;var Ya=0;
// EMSCRIPTEN_START_FUNCS
function vg(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,w=0,z=0,B=0,C=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0;q=Wa-48|0;Wa=q;a:{if(c>>>0<=2){c=c<<2;I=x[c+4876>>2];J=x[c+4864>>2];while(1){c=x[b+4>>2];b:{if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break b}c=hb(b)}if((c|0)==32|c-9>>>0<5){continue}break}o=1;c:{d:{switch(c-43|0){case 0:case 2:break d;default:break c}}o=(c|0)==45?-1:1;c=x[b+4>>2];if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break c}c=hb(b)}e:{f:{while(1){if(v[g+1024|0]==(c|32)){g:{if(g>>>0>6){break g}c=x[b+4>>2];if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break g}c=hb(b)}g=g+1|0;if((g|0)!=8){continue}break f}break}if((g|0)!=3){if((g|0)==8){break f}if(!d|g>>>0<4){break e}if((g|0)==8){break f}}c=x[b+116>>2];if((c|0)>0|(c|0)>=0){x[b+4>>2]=x[b+4>>2]-1}if(!d|g>>>0<4){break f}c=(c|0)<0;while(1){if(!c){x[b+4>>2]=x[b+4>>2]-1}g=g-1|0;if(g>>>0>3){continue}break}}l=Wa-16|0;Wa=l;i=(r(E(E(o|0)*E(O))),j(2));b=i&2147483647;h:{if(b-8388608>>>0<=2130706431){c=b;b=b>>>7|0;c=c<<25;d=b+1065353216|0;break h}c=i<<25;d=i>>>7|2147418112;if(b>>>0>=2139095040){break h}c=0;d=0;if(!b){break h}c=b;b=G(b);Eb(l,c,0,0,0,b+81|0);k=x[l>>2];h=x[l+4>>2];c=x[l+8>>2];d=x[l+12>>2]^65536|16265-b<<16}x[q>>2]=k;x[q+4>>2]=h;x[q+8>>2]=c;x[q+12>>2]=i&-2147483648|d;Wa=l+16|0;k=x[q+8>>2];h=x[q+12>>2];i=x[q>>2];m=x[q+4>>2];break a}i:{j:{k:{if(g){break k}g=0;while(1){if(v[g+1533|0]!=(c|32)){break k}l:{if(g>>>0>1){break l}c=x[b+4>>2];if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break l}c=hb(b)}g=g+1|0;if((g|0)!=3){continue}break}break j}m:{switch(g|0){case 0:n:{if((c|0)!=48){break n}g=x[b+4>>2];o:{if((g|0)!=x[b+104>>2]){x[b+4>>2]=g+1;g=y[g|0];break o}g=hb(b)}if((g&-33)==88){f=Wa-432|0;Wa=f;c=x[b+4>>2];p:{if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;g=y[c|0];break p}g=hb(b)}q:{r:{while(1){if((g|0)!=48){s:{if((g|0)!=46){break q}c=x[b+4>>2];if((c|0)==x[b+104>>2]){break s}x[b+4>>2]=c+1;g=y[c|0];break r}}else{c=x[b+4>>2];if((c|0)!=x[b+104>>2]){H=1;x[b+4>>2]=c+1;g=y[c|0]}else{H=1;g=hb(b)}continue}break}g=hb(b)}s=1;if((g|0)!=48){break q}while(1){c=t;t=c-1|0;u=u-!c|0;c=x[b+4>>2];t:{if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;g=y[c|0];break t}g=hb(b)}if((g|0)==48){continue}break}H=1}m=1073676288;while(1){u:{c=g|32;v:{w:{K=g-48|0;if(K>>>0<10){break w}if((g|0)!=46&c-97>>>0>=6){break u}if((g|0)!=46){break w}if(s){break u}s=1;t=k;u=h;break v}c=(g|0)>57?c-87|0:K;x:{if((h|0)<=0&k>>>0<=7|(h|0)<0){e=c+(e<<4)|0;break x}if(!h&k>>>0<=28){Kb(f+48|0,c);mb(f+32|0,C,F,i,m,0,0,0,1073414144);C=x[f+32>>2];F=x[f+36>>2];i=x[f+40>>2];m=x[f+44>>2];mb(f+16|0,x[f+48>>2],x[f+52>>2],x[f+56>>2],x[f+60>>2],C,F,i,m);Gb(f,x[f+16>>2],x[f+20>>2],x[f+24>>2],x[f+28>>2],l,p,z,B);z=x[f+8>>2];B=x[f+12>>2];l=x[f>>2];p=x[f+4>>2];break x}if(n|!c){break x}mb(f+80|0,C,F,i,m,0,0,0,1073610752);Gb(f- -64|0,x[f+80>>2],x[f+84>>2],x[f+88>>2],x[f+92>>2],l,p,z,B);z=x[f+72>>2];B=x[f+76>>2];n=1;l=x[f+64>>2];p=x[f+68>>2]}k=k+1|0;h=k?h:h+1|0;H=1}c=x[b+4>>2];if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;g=y[c|0]}else{g=hb(b)}continue}break}y:{if(!H){c=x[b+116>>2];z:{A:{if((c|0)>0|(c|0)>=0){c=x[b+4>>2];x[b+4>>2]=c-1;if(!d){break A}x[b+4>>2]=c-2;if(!s){break z}x[b+4>>2]=c-3;break z}if(d){break z}}Sb(b,0,0)}Zb(f+96|0,+(o|0)*0);l=x[f+96>>2];p=x[f+100>>2];c=x[f+108>>2];b=x[f+104>>2];break y}if((h|0)<=0&k>>>0<=7|(h|0)<0){i=k;m=h;while(1){e=e<<4;i=i+1|0;m=i?m:m+1|0;if((i|0)!=8|m){continue}break}}B:{C:{D:{if((g&-33)==80){i=ug(b,d);c=Ya;m=c;if(i|(c|0)!=-2147483648){break B}if(d){c=x[b+116>>2];if((c|0)>0|(c|0)>=0){break D}break C}l=0;p=0;Sb(b,0,0);c=0;b=0;break y}i=0;m=0;if(x[b+116>>2]<0){break B}}x[b+4>>2]=x[b+4>>2]-1}i=0;m=0}if(!e){Zb(f+112|0,+(o|0)*0);l=x[f+112>>2];p=x[f+116>>2];c=x[f+124>>2];b=x[f+120>>2];break y}b=s?t:k;h=(s?u:h)<<2|b>>>30;c=i+(b<<2)|0;b=h+m|0;k=c-32|0;h=(c>>>0<i>>>0?b+1|0:b)-(c>>>0<32)|0;b=h;if(k>>>0>0-I>>>0&(b|0)>=0|(b|0)>0){x[4995]=68;Kb(f+160|0,o);mb(f+144|0,x[f+160>>2],x[f+164>>2],x[f+168>>2],x[f+172>>2],-1,-1,-1,2147418111);mb(f+128|0,x[f+144>>2],x[f+148>>2],x[f+152>>2],x[f+156>>2],-1,-1,-1,2147418111);l=x[f+128>>2];p=x[f+132>>2];c=x[f+140>>2];b=x[f+136>>2];break y}b=I-226|0;c=b>>31;if((h|0)>=(c|0)&b>>>0<=k>>>0|(c|0)<(h|0)){if((e|0)>=0){while(1){Gb(f+416|0,l,p,z,B,0,0,0,-1073807360);c=Ag(l,p,z,B,1073610752);b=(c|0)<0;Gb(f+400|0,l,p,z,B,b?l:x[f+416>>2],b?p:x[f+420>>2],b?z:x[f+424>>2],b?B:x[f+428>>2]);b=k;k=b-1|0;h=h-!b|0;z=x[f+408>>2];B=x[f+412>>2];l=x[f+400>>2];p=x[f+404>>2];e=e<<1|(c|0)>=0;if((e|0)>=0){continue}break}}h=h-((I>>31)+(k>>>0<I>>>0)|0)|0;b=(k-I|0)+32|0;h=b>>>0<32?h+1|0:h;c=b>>>0<J>>>0&(h|0)<=0|(h|0)<0?(b|0)>0?b:0:J;E:{if((c|0)>=113){Kb(f+384|0,o);t=x[f+392>>2];u=x[f+396>>2];C=x[f+384>>2];F=x[f+388>>2];i=0;b=0;break E}Zb(f+352|0,ge(144-c|0));Kb(f+336|0,o);C=x[f+336>>2];F=x[f+340>>2];t=x[f+344>>2];u=x[f+348>>2];zg(f+368|0,x[f+352>>2],x[f+356>>2],x[f+360>>2],x[f+364>>2],C,F,t,u);w=x[f+376>>2];L=x[f+380>>2];i=x[f+372>>2];b=x[f+368>>2]}d=!(e&1)&((qc(l,p,z,B,0,0,0,0)|0)!=0&(c|0)<32);Dc(f+320|0,d+e|0);mb(f+304|0,C,F,t,u,x[f+320>>2],x[f+324>>2],x[f+328>>2],x[f+332>>2]);c=b;Gb(f+272|0,x[f+304>>2],x[f+308>>2],x[f+312>>2],x[f+316>>2],b,i,w,L);b=d;mb(f+288|0,C,F,t,u,b?0:l,b?0:p,b?0:z,b?0:B);Gb(f+256|0,x[f+288>>2],x[f+292>>2],x[f+296>>2],x[f+300>>2],x[f+272>>2],x[f+276>>2],x[f+280>>2],x[f+284>>2]);fe(f+240|0,x[f+256>>2],x[f+260>>2],x[f+264>>2],x[f+268>>2],c,i,w,L);b=x[f+240>>2];d=x[f+244>>2];c=x[f+248>>2];i=x[f+252>>2];if(!qc(b,d,c,i,0,0,0,0)){x[4995]=68}yg(f+224|0,b,d,c,i,k);l=x[f+224>>2];p=x[f+228>>2];c=x[f+236>>2];b=x[f+232>>2];break y}x[4995]=68;Kb(f+208|0,o);mb(f+192|0,x[f+208>>2],x[f+212>>2],x[f+216>>2],x[f+220>>2],0,0,0,65536);mb(f+176|0,x[f+192>>2],x[f+196>>2],x[f+200>>2],x[f+204>>2],0,0,0,65536);l=x[f+176>>2];p=x[f+180>>2];c=x[f+188>>2];b=x[f+184>>2]}x[q+16>>2]=l;x[q+20>>2]=p;x[q+24>>2]=b;x[q+28>>2]=c;Wa=f+432|0;k=x[q+24>>2];h=x[q+28>>2];i=x[q+16>>2];m=x[q+20>>2];break a}if(x[b+116>>2]<0){break n}x[b+4>>2]=x[b+4>>2]-1}g=b;w=o;f=d;d=0;o=0;e=Wa-8976|0;Wa=e;K=0-I|0;L=K-J|0;F:{G:{while(1){if((c|0)!=48){H:{if((c|0)!=46){break F}b=x[g+4>>2];if((b|0)==x[g+104>>2]){break H}x[g+4>>2]=b+1;c=y[b|0];break G}}else{b=x[g+4>>2];if((b|0)!=x[g+104>>2]){d=1;x[g+4>>2]=b+1;c=y[b|0]}else{d=1;c=hb(g)}continue}break}c=hb(g)}n=1;if((c|0)!=48){break F}while(1){b=k;k=b-1|0;h=h-!b|0;b=x[g+4>>2];I:{if((b|0)!=x[g+104>>2]){x[g+4>>2]=b+1;c=y[b|0];break I}c=hb(g)}if((c|0)==48){continue}break}d=1}x[e+784>>2]=0;J:{K:{b=(c|0)==46;l=c-48|0;L:{M:{N:{O:{if(b|l>>>0<=9){while(1){P:{if(b&1){if(!n){k=i;h=m;n=1;break P}b=!d;break O}i=i+1|0;m=i?m:m+1|0;if((o|0)<=2044){H=(c|0)==48?H:i;b=(e+784|0)+(o<<2)|0;if(s){l=(D(x[b>>2],10)+c|0)-48|0}x[b>>2]=l;d=1;c=s+1|0;b=(c|0)==9;s=b?0:c;o=b+o|0;break P}if((c|0)==48){break P}x[e+8960>>2]=x[e+8960>>2]|1;H=18396}b=x[g+4>>2];Q:{if((b|0)!=x[g+104>>2]){x[g+4>>2]=b+1;c=y[b|0];break Q}c=hb(g)}b=(c|0)==46;l=c-48|0;if(b|l>>>0<10){continue}break}}k=n?k:i;h=n?h:m;if(!(!d|(c&-33)!=69)){l=ug(g,f);b=Ya;p=b;R:{if(l|(b|0)!=-2147483648){break R}if(!f){break L}l=0;p=0;if(x[g+116>>2]<0){break R}x[g+4>>2]=x[g+4>>2]-1}if(!d){break M}h=h+p|0;k=k+l|0;h=k>>>0<l>>>0?h+1|0:h;break K}b=!d;if((c|0)<0){break N}}if(x[g+116>>2]<0){break N}x[g+4>>2]=x[g+4>>2]-1}if(!b){break K}}x[4995]=28}i=0;m=0;Sb(g,0,0);c=0;b=0;break J}b=x[e+784>>2];if(!b){Zb(e,+(w|0)*0);i=x[e>>2];m=x[e+4>>2];c=x[e+12>>2];b=x[e+8>>2];break J}if(!(i>>>0>9&(m|0)>=0|(m|0)>0|((i|0)!=(k|0)|(h|0)!=(m|0))|(b>>>J|0?(J|0)<=30:0))){Kb(e+48|0,w);Dc(e+32|0,b);mb(e+16|0,x[e+48>>2],x[e+52>>2],x[e+56>>2],x[e+60>>2],x[e+32>>2],x[e+36>>2],x[e+40>>2],x[e+44>>2]);i=x[e+16>>2];m=x[e+20>>2];c=x[e+28>>2];b=x[e+24>>2];break J}if(k>>>0>K>>>1>>>0&(h|0)>=0|(h|0)>0){x[4995]=68;Kb(e+96|0,w);mb(e+80|0,x[e+96>>2],x[e+100>>2],x[e+104>>2],x[e+108>>2],-1,-1,-1,2147418111);mb(e- -64|0,x[e+80>>2],x[e+84>>2],x[e+88>>2],x[e+92>>2],-1,-1,-1,2147418111);i=x[e+64>>2];m=x[e+68>>2];c=x[e+76>>2];b=x[e+72>>2];break J}b=I-226|0;c=k>>>0<b>>>0;b=b>>31;if(c&(h|0)<=(b|0)|(b|0)>(h|0)){x[4995]=68;Kb(e+144|0,w);mb(e+128|0,x[e+144>>2],x[e+148>>2],x[e+152>>2],x[e+156>>2],0,0,0,65536);mb(e+112|0,x[e+128>>2],x[e+132>>2],x[e+136>>2],x[e+140>>2],0,0,0,65536);i=x[e+112>>2];m=x[e+116>>2];c=x[e+124>>2];b=x[e+120>>2];break J}if(s){if((s|0)<=8){b=(e+784|0)+(o<<2)|0;g=x[b>>2];while(1){g=D(g,10);s=s+1|0;if((s|0)!=9){continue}break}x[b>>2]=g}o=o+1|0}S:{n=k;if((H|0)>(k|0)|(H|0)>=9|(k|0)>17){break S}if((n|0)==9){Kb(e+192|0,w);Dc(e+176|0,x[e+784>>2]);mb(e+160|0,x[e+192>>2],x[e+196>>2],x[e+200>>2],x[e+204>>2],x[e+176>>2],x[e+180>>2],x[e+184>>2],x[e+188>>2]);i=x[e+160>>2];m=x[e+164>>2];c=x[e+172>>2];b=x[e+168>>2];break J}if((n|0)<=8){Kb(e+272|0,w);Dc(e+256|0,x[e+784>>2]);mb(e+240|0,x[e+272>>2],x[e+276>>2],x[e+280>>2],x[e+284>>2],x[e+256>>2],x[e+260>>2],x[e+264>>2],x[e+268>>2]);Kb(e+224|0,x[(0-n<<2)+4864>>2]);xg(e+208|0,x[e+240>>2],x[e+244>>2],x[e+248>>2],x[e+252>>2],x[e+224>>2],x[e+228>>2],x[e+232>>2],x[e+236>>2]);i=x[e+208>>2];m=x[e+212>>2];c=x[e+220>>2];b=x[e+216>>2];break J}b=(D(n,-3)+J|0)+27|0;c=x[e+784>>2];if(c>>>b|0?(b|0)<=30:0){break S}Kb(e+352|0,w);Dc(e+336|0,c);mb(e+320|0,x[e+352>>2],x[e+356>>2],x[e+360>>2],x[e+364>>2],x[e+336>>2],x[e+340>>2],x[e+344>>2],x[e+348>>2]);Kb(e+304|0,x[(n<<2)+4792>>2]);mb(e+288|0,x[e+320>>2],x[e+324>>2],x[e+328>>2],x[e+332>>2],x[e+304>>2],x[e+308>>2],x[e+312>>2],x[e+316>>2]);i=x[e+288>>2];m=x[e+292>>2];c=x[e+300>>2];b=x[e+296>>2];break J}while(1){c=o;o=c-1|0;if(!x[(e+784|0)+(o<<2)>>2]){continue}break}s=0;d=(n|0)%9|0;T:{if(!d){b=0;break T}b=0;d=(n|0)<0?d+9|0:d;U:{if(!c){c=0;break U}k=x[(0-d<<2)+4864>>2];h=1e9/(k|0)|0;l=0;g=0;while(1){i=l;l=(e+784|0)+(g<<2)|0;m=x[l>>2];o=(m>>>0)/(k>>>0)|0;i=i+o|0;x[l>>2]=i;i=!i&(b|0)==(g|0);b=i?b+1&2047:b;n=i?n-9|0:n;l=D(h,m-D(k,o)|0);g=g+1|0;if((g|0)!=(c|0)){continue}break}if(!l){break U}x[(e+784|0)+(c<<2)>>2]=l;c=c+1|0}n=(n-d|0)+9|0}while(1){g=(e+784|0)+(b<<2)|0;V:{while(1){if(((n|0)!=36|A[g>>2]>=10384593)&(n|0)>=36){break V}d=c+2047|0;l=0;while(1){i=d&2047;o=(e+784|0)+(i<<2)|0;d=x[o>>2];m=d>>>3|0;d=d<<29;k=d+l|0;h=d>>>0>k>>>0?m+1|0:m;if(!h&k>>>0<1000000001){l=0}else{l=Hn(k,h,1e9);k=k-Gn(l,Ya,1e9,0)|0}x[o>>2]=k;c=(i|0)!=(c-1&2047)?c:(b|0)==(i|0)?c:k?c:i;d=i-1|0;if((b|0)!=(i|0)){continue}break}s=s-29|0;if(!l){continue}break}b=b-1&2047;if((c|0)==(b|0)){d=e+784|0;k=d+((c+2046&2047)<<2)|0;c=c-1&2047;x[k>>2]=x[k>>2]|x[d+(c<<2)>>2]}n=n+9|0;x[(e+784|0)+(b<<2)>>2]=l;continue}break}W:{X:while(1){k=c+1&2047;l=(e+784|0)+((c-1&2047)<<2)|0;while(1){i=(n|0)>45?9:1;Y:{while(1){d=b;g=0;Z:{while(1){_:{b=d+g&2047;if((b|0)==(c|0)){break _}b=x[(e+784|0)+(b<<2)>>2];h=x[(g<<2)+4816>>2];if(b>>>0<h>>>0){break _}if(b>>>0>h>>>0){break Z}g=g+1|0;if((g|0)!=4){continue}}break}if((n|0)!=36){break Z}k=0;h=0;g=0;i=0;m=0;while(1){b=d+g&2047;if((b|0)==(c|0)){c=c+1&2047;x[(e+(c<<2)|0)+780>>2]=0}Dc(e+768|0,x[(e+784|0)+(b<<2)>>2]);mb(e+752|0,k,h,i,m,0,0,1342177280,1075633366);Gb(e+736|0,x[e+752>>2],x[e+756>>2],x[e+760>>2],x[e+764>>2],x[e+768>>2],x[e+772>>2],x[e+776>>2],x[e+780>>2]);i=x[e+744>>2];m=x[e+748>>2];k=x[e+736>>2];h=x[e+740>>2];g=g+1|0;if((g|0)!=4){continue}break}Kb(e+720|0,w);mb(e+704|0,k,h,i,m,x[e+720>>2],x[e+724>>2],x[e+728>>2],x[e+732>>2]);i=x[e+712>>2];m=x[e+716>>2];k=0;h=0;l=x[e+704>>2];p=x[e+708>>2];f=s+113|0;g=f-I|0;o=(g|0)<(J|0);b=o?(g|0)>0?g:0:J;if((b|0)<=112){break Y}break W}s=i+s|0;b=c;if((d|0)==(b|0)){continue}break}m=1e9>>>i|0;o=-1<<i^-1;g=0;b=d;while(1){h=g;g=(e+784|0)+(d<<2)|0;f=x[g>>2];h=h+(f>>>i|0)|0;x[g>>2]=h;h=!h&(b|0)==(d|0);b=h?b+1&2047:b;n=h?n-9|0:n;g=D(m,f&o);d=d+1&2047;if((d|0)!=(c|0)){continue}break}if(!g){continue}if((b|0)!=(k|0)){x[(e+784|0)+(c<<2)>>2]=g;c=k;continue X}x[l>>2]=x[l>>2]|1;continue}break}break}Zb(e+656|0,ge(225-b|0));zg(e+688|0,x[e+656>>2],x[e+660>>2],x[e+664>>2],x[e+668>>2],l,p,i,m);C=x[e+696>>2];F=x[e+700>>2];z=x[e+688>>2];B=x[e+692>>2];Zb(e+640|0,ge(113-b|0));wg(e+672|0,l,p,i,m,x[e+640>>2],x[e+644>>2],x[e+648>>2],x[e+652>>2]);k=x[e+672>>2];h=x[e+676>>2];t=x[e+680>>2];u=x[e+684>>2];fe(e+624|0,l,p,i,m,k,h,t,u);Gb(e+608|0,z,B,C,F,x[e+624>>2],x[e+628>>2],x[e+632>>2],x[e+636>>2]);i=x[e+616>>2];m=x[e+620>>2];l=x[e+608>>2];p=x[e+612>>2]}n=d+4&2047;$:{if((n|0)==(c|0)){break $}n=x[(e+784|0)+(n<<2)>>2];aa:{if(n>>>0<=499999999){if(!n&(d+5&2047)==(c|0)){break aa}Zb(e+496|0,+(w|0)*.25);Gb(e+480|0,k,h,t,u,x[e+496>>2],x[e+500>>2],x[e+504>>2],x[e+508>>2]);t=x[e+488>>2];u=x[e+492>>2];k=x[e+480>>2];h=x[e+484>>2];break aa}if((n|0)!=5e8){Zb(e+592|0,+(w|0)*.75);Gb(e+576|0,k,h,t,u,x[e+592>>2],x[e+596>>2],x[e+600>>2],x[e+604>>2]);t=x[e+584>>2];u=x[e+588>>2];k=x[e+576>>2];h=x[e+580>>2];break aa}M=+(w|0);if((d+5&2047)==(c|0)){Zb(e+528|0,M*.5);Gb(e+512|0,k,h,t,u,x[e+528>>2],x[e+532>>2],x[e+536>>2],x[e+540>>2]);t=x[e+520>>2];u=x[e+524>>2];k=x[e+512>>2];h=x[e+516>>2];break aa}Zb(e+560|0,M*.75);Gb(e+544|0,k,h,t,u,x[e+560>>2],x[e+564>>2],x[e+568>>2],x[e+572>>2]);t=x[e+552>>2];u=x[e+556>>2];k=x[e+544>>2];h=x[e+548>>2]}if((b|0)>111){break $}wg(e+464|0,k,h,t,u,0,0,0,1073676288);if(qc(x[e+464>>2],x[e+468>>2],x[e+472>>2],x[e+476>>2],0,0,0,0)){break $}Gb(e+448|0,k,h,t,u,0,0,0,1073676288);t=x[e+456>>2];u=x[e+460>>2];k=x[e+448>>2];h=x[e+452>>2]}Gb(e+432|0,l,p,i,m,k,h,t,u);fe(e+416|0,x[e+432>>2],x[e+436>>2],x[e+440>>2],x[e+444>>2],z,B,C,F);i=x[e+424>>2];m=x[e+428>>2];l=x[e+416>>2];p=x[e+420>>2];ba:{if((L-2|0)>=(f&2147483647)){break ba}x[e+408>>2]=i;x[e+412>>2]=m&2147483647;x[e+400>>2]=l;x[e+404>>2]=p;mb(e+384|0,l,p,i,m,0,0,0,1073610752);d=Ag(x[e+400>>2],x[e+404>>2],x[e+408>>2],x[e+412>>2],1081081856);c=(d|0)<0;i=c?i:x[e+392>>2];m=c?m:x[e+396>>2];l=c?l:x[e+384>>2];p=c?p:x[e+388>>2];s=((d|0)>=0)+s|0;if(!((qc(k,h,t,u,0,0,0,0)|0)!=0&(c?o:o&(b|0)!=(g|0)))&(s+110|0)<=(L|0)){break ba}x[4995]=68}yg(e+368|0,l,p,i,m,s);i=x[e+368>>2];m=x[e+372>>2];c=x[e+380>>2];b=x[e+376>>2]}x[q+40>>2]=b;x[q+44>>2]=c;x[q+32>>2]=i;x[q+36>>2]=m;Wa=e+8976|0;k=x[q+40>>2];h=x[q+44>>2];i=x[q+32>>2];m=x[q+36>>2];break a;case 3:break j;default:break m}}c=x[b+116>>2];if((c|0)>0|(c|0)>=0){x[b+4>>2]=x[b+4>>2]-1}break i}ca:{c=x[b+4>>2];da:{if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break da}c=hb(b)}if((c|0)==40){g=1;break ca}h=2147450880;if(x[b+116>>2]<0){break a}x[b+4>>2]=x[b+4>>2]-1;break a}while(1){ea:{c=x[b+4>>2];fa:{if((c|0)!=x[b+104>>2]){x[b+4>>2]=c+1;c=y[c|0];break fa}c=hb(b)}if(!(c-48>>>0<10|c-65>>>0<26|(c|0)==95)){if(c-97>>>0>=26){break ea}}g=g+1|0;continue}break}h=2147450880;if((c|0)==41){break a}c=x[b+116>>2];if((c|0)>0|(c|0)>=0){x[b+4>>2]=x[b+4>>2]-1}ga:{if(d){if(g){break ga}break a}break i}while(1){g=g-1|0;if((c|0)>0|(c|0)>=0){x[b+4>>2]=x[b+4>>2]-1}if(g){continue}break}break a}x[4995]=28;Sb(b,0,0)}h=0}x[a>>2]=i;x[a+4>>2]=m;x[a+8>>2]=k;x[a+12>>2]=h;Wa=q+48|0}function ob(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;l=Wa-16|0;Wa=l;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{if(a>>>0<=244){g=x[4996];h=a>>>0<11?16:a+11&-8;b=h>>>3|0;c=g>>>b|0;if(c&3){b=b+((c^-1)&1)|0;a=b<<3;c=a+20024|0;d=x[a+20032>>2];a=x[d+8>>2];o:{if((c|0)==(a|0)){x[4996]=In(b)&g;break o}x[a+12>>2]=c;x[c+8>>2]=a}a=d+8|0;c=b<<3;x[d+4>>2]=c|3;c=c+d|0;x[c+4>>2]=x[c+4>>2]|1;break a}k=x[4998];if(k>>>0>=h>>>0){break n}if(c){a=2<<b;a=(0-a|a)&c<<b;d=Fn(0-a&a);a=d<<3;c=a+20024|0;e=x[a+20032>>2];a=x[e+8>>2];p:{if((c|0)==(a|0)){g=In(d)&g;x[4996]=g;break p}x[a+12>>2]=c;x[c+8>>2]=a}x[e+4>>2]=h|3;b=e+h|0;a=d<<3;d=a-h|0;x[b+4>>2]=d|1;x[a+e>>2]=d;if(k){c=(k&-8)+20024|0;f=x[5001];a=1<<(k>>>3);q:{if(!(a&g)){x[4996]=a|g;a=c;break q}a=x[c+8>>2]}x[c+8>>2]=f;x[a+12>>2]=f;x[f+12>>2]=c;x[f+8>>2]=a}a=e+8|0;x[5001]=b;x[4998]=d;break a}j=x[4997];if(!j){break n}b=x[(Fn(0-j&j)<<2)+20288>>2];f=(x[b+4>>2]&-8)-h|0;c=b;while(1){r:{a=x[c+16>>2];if(!a){a=x[c+20>>2];if(!a){break r}}c=(x[a+4>>2]&-8)-h|0;d=c>>>0<f>>>0;f=d?c:f;b=d?a:b;c=a;continue}break}i=x[b+24>>2];d=x[b+12>>2];if((d|0)!=(b|0)){a=x[b+8>>2];x[a+12>>2]=d;x[d+8>>2]=a;break b}c=b+20|0;a=x[c>>2];if(!a){a=x[b+16>>2];if(!a){break m}c=b+16|0}while(1){e=c;d=a;c=a+20|0;a=x[c>>2];if(a){continue}c=d+16|0;a=x[d+16>>2];if(a){continue}break}x[e>>2]=0;break b}h=-1;if(a>>>0>4294967231){break n}a=a+11|0;h=a&-8;j=x[4997];if(!j){break n}f=0-h|0;g=0;s:{if(h>>>0<256){break s}g=31;if(h>>>0>16777215){break s}a=G(a>>>8|0);g=((h>>>38-a&1)-(a<<1)|0)+62|0}c=x[(g<<2)+20288>>2];t:{u:{v:{if(!c){a=0;break v}a=0;b=h<<((g|0)!=31?25-(g>>>1|0)|0:0);while(1){w:{e=(x[c+4>>2]&-8)-h|0;if(e>>>0>=f>>>0){break w}d=c;f=e;if(e){break w}f=0;a=c;break u}e=x[c+20>>2];c=x[((b>>>29&4)+c|0)+16>>2];a=e?(e|0)==(c|0)?a:e:a;b=b<<1;if(c){continue}break}}if(!(a|d)){d=0;a=2<<g;a=(0-a|a)&j;if(!a){break n}a=x[(Fn(a&0-a)<<2)+20288>>2]}if(!a){break t}}while(1){c=(x[a+4>>2]&-8)-h|0;b=c>>>0<f>>>0;f=b?c:f;d=b?a:d;c=x[a+16>>2];if(c){a=c}else{a=x[a+20>>2]}if(a){continue}break}}if(!d|x[4998]-h>>>0<=f>>>0){break n}g=x[d+24>>2];b=x[d+12>>2];if((d|0)!=(b|0)){a=x[d+8>>2];x[a+12>>2]=b;x[b+8>>2]=a;break c}c=d+20|0;a=x[c>>2];if(!a){a=x[d+16>>2];if(!a){break l}c=d+16|0}while(1){e=c;b=a;c=a+20|0;a=x[c>>2];if(a){continue}c=b+16|0;a=x[b+16>>2];if(a){continue}break}x[e>>2]=0;break c}b=x[4998];if(b>>>0>=h>>>0){d=x[5001];c=b-h|0;x:{if(c>>>0>=16){x[4998]=c;a=d+h|0;x[5001]=a;x[a+4>>2]=c|1;x[b+d>>2]=c;x[d+4>>2]=h|3;break x}x[5001]=0;x[4998]=0;x[d+4>>2]=b|3;a=b+d|0;x[a+4>>2]=x[a+4>>2]|1}a=d+8|0;break a}i=x[4999];if(i>>>0>h>>>0){c=i-h|0;x[4999]=c;b=x[5002];a=b+h|0;x[5002]=a;x[a+4>>2]=c|1;x[b+4>>2]=h|3;a=b+8|0;break a}a=0;j=h+47|0;if(x[5114]){b=x[5116]}else{x[5117]=-1;x[5118]=-1;x[5115]=4096;x[5116]=4096;x[5114]=l+12&-16^1431655768;x[5119]=0;x[5107]=0;b=4096}e=j+b|0;f=0-b|0;c=e&f;if(c>>>0<=h>>>0){break a}d=x[5106];if(d){b=x[5104];g=b+c|0;if(d>>>0<g>>>0|b>>>0>=g>>>0){break a}}y:{if(!(y[20428]&4)){z:{A:{B:{C:{d=x[5002];if(d){a=20432;while(1){b=x[a>>2];if(b>>>0<=d>>>0&d>>>0<b+x[a+4>>2]>>>0){break C}a=x[a+8>>2];if(a){continue}break}}b=uc(0);if((b|0)==-1){break z}g=c;d=x[5115];a=d-1|0;if(a&b){g=(c-b|0)+(a+b&0-d)|0}if(g>>>0<=h>>>0){break z}d=x[5106];if(d){a=x[5104];f=a+g|0;if(d>>>0<f>>>0|a>>>0>=f>>>0){break z}}a=uc(g);if((b|0)!=(a|0)){break B}break y}g=f&e-i;b=uc(g);if((b|0)==(x[a>>2]+x[a+4>>2]|0)){break A}a=b}if((a|0)==-1){break z}if(h+48>>>0<=g>>>0){b=a;break y}b=x[5116];b=b+(j-g|0)&0-b;if((uc(b)|0)==-1){break z}g=b+g|0;b=a;break y}if((b|0)!=-1){break y}}x[5107]=x[5107]|4}b=uc(c);a=uc(0);if((b|0)==-1|(a|0)==-1|a>>>0<=b>>>0){break i}g=a-b|0;if(g>>>0<=h+40>>>0){break i}}a=x[5104]+g|0;x[5104]=a;if(a>>>0>A[5105]){x[5105]=a}D:{e=x[5002];if(e){a=20432;while(1){d=x[a>>2];c=x[a+4>>2];if((d+c|0)==(b|0)){break D}a=x[a+8>>2];if(a){continue}break}break k}a=x[5e3];if(!(a>>>0<=b>>>0?a:0)){x[5e3]=b}a=0;x[5109]=g;x[5108]=b;x[5004]=-1;x[5005]=x[5114];x[5111]=0;while(1){d=a<<3;c=d+20024|0;x[d+20032>>2]=c;x[d+20036>>2]=c;a=a+1|0;if((a|0)!=32){continue}break}d=g-40|0;a=b+8&7?-8-b&7:0;c=d-a|0;x[4999]=c;a=a+b|0;x[5002]=a;x[a+4>>2]=c|1;x[(b+d|0)+4>>2]=40;x[5003]=x[5118];break j}if(y[a+12|0]&8|d>>>0>e>>>0|b>>>0<=e>>>0){break k}x[a+4>>2]=c+g;a=e+8&7?-8-e&7:0;b=a+e|0;x[5002]=b;c=x[4999]+g|0;a=c-a|0;x[4999]=a;x[b+4>>2]=a|1;x[(c+e|0)+4>>2]=40;x[5003]=x[5118];break j}d=0;break b}b=0;break c}if(A[5e3]>b>>>0){x[5e3]=b}c=b+g|0;a=20432;E:{F:{G:{while(1){if((c|0)!=x[a>>2]){a=x[a+8>>2];if(a){continue}break G}break}if(!(y[a+12|0]&8)){break F}}a=20432;while(1){c=x[a>>2];if(c>>>0<=e>>>0){f=c+x[a+4>>2]|0;if(f>>>0>e>>>0){break E}}a=x[a+8>>2];continue}}x[a>>2]=b;x[a+4>>2]=x[a+4>>2]+g;j=(b+8&7?-8-b&7:0)+b|0;x[j+4>>2]=h|3;g=c+(c+8&7?-8-c&7:0)|0;i=h+j|0;a=g-i|0;if((e|0)==(g|0)){x[5002]=i;a=x[4999]+a|0;x[4999]=a;x[i+4>>2]=a|1;break d}if(x[5001]==(g|0)){x[5001]=i;a=x[4998]+a|0;x[4998]=a;x[i+4>>2]=a|1;x[a+i>>2]=a;break d}f=x[g+4>>2];if((f&3)!=1){break e}e=f&-8;if(f>>>0<=255){d=x[g+8>>2];c=f>>>3|0;b=x[g+12>>2];if((b|0)==(d|0)){x[4996]=x[4996]&In(c);break f}x[d+12>>2]=b;x[b+8>>2]=d;break f}h=x[g+24>>2];b=x[g+12>>2];if((g|0)!=(b|0)){c=x[g+8>>2];x[c+12>>2]=b;x[b+8>>2]=c;break g}c=g+20|0;f=x[c>>2];if(!f){f=x[g+16>>2];if(!f){break h}c=g+16|0}while(1){d=c;b=f;c=b+20|0;f=x[c>>2];if(f){continue}c=b+16|0;f=x[b+16>>2];if(f){continue}break}x[d>>2]=0;break g}d=g-40|0;a=b+8&7?-8-b&7:0;c=d-a|0;x[4999]=c;a=a+b|0;x[5002]=a;x[a+4>>2]=c|1;x[(b+d|0)+4>>2]=40;x[5003]=x[5118];a=(f+(f-39&7?39-f&7:0)|0)-47|0;d=a>>>0<e+16>>>0?e:a;x[d+4>>2]=27;a=x[5111];x[d+16>>2]=x[5110];x[d+20>>2]=a;a=x[5109];x[d+8>>2]=x[5108];x[d+12>>2]=a;x[5110]=d+8;x[5109]=g;x[5108]=b;x[5111]=0;a=d+24|0;while(1){x[a+4>>2]=7;c=a+8|0;a=a+4|0;if(c>>>0<f>>>0){continue}break}if((d|0)==(e|0)){break j}x[d+4>>2]=x[d+4>>2]&-2;f=d-e|0;x[e+4>>2]=f|1;x[d>>2]=f;if(f>>>0<=255){c=(f&-8)+20024|0;b=x[4996];a=1<<(f>>>3);H:{if(!(b&a)){x[4996]=a|b;a=c;break H}a=x[c+8>>2]}x[c+8>>2]=e;x[a+12>>2]=e;x[e+12>>2]=c;x[e+8>>2]=a;break j}a=31;if(f>>>0<=16777215){a=G(f>>>8|0);a=((f>>>38-a&1)-(a<<1)|0)+62|0}x[e+28>>2]=a;x[e+16>>2]=0;x[e+20>>2]=0;c=(a<<2)+20288|0;I:{d=x[4997];b=1<<a;J:{if(!(d&b)){x[4997]=b|d;x[c>>2]=e;break J}a=f<<((a|0)!=31?25-(a>>>1|0)|0:0);d=x[c>>2];while(1){c=d;if((f|0)==(x[c+4>>2]&-8)){break I}b=a>>>29|0;a=a<<1;b=(b&4)+c|0;d=x[b+16>>2];if(d){continue}break}x[b+16>>2]=e}x[e+24>>2]=c;x[e+12>>2]=e;x[e+8>>2]=e;break j}a=x[c+8>>2];x[a+12>>2]=e;x[c+8>>2]=e;x[e+24>>2]=0;x[e+12>>2]=c;x[e+8>>2]=a}a=x[4999];if(a>>>0<=h>>>0){break i}c=a-h|0;x[4999]=c;b=x[5002];a=b+h|0;x[5002]=a;x[a+4>>2]=c|1;x[b+4>>2]=h|3;a=b+8|0;break a}x[4995]=48;a=0;break a}b=0}if(!h){break f}d=x[g+28>>2];c=(d<<2)+20288|0;K:{if(x[c>>2]==(g|0)){x[c>>2]=b;if(b){break K}x[4997]=x[4997]&In(d);break f}x[h+(x[h+16>>2]==(g|0)?16:20)>>2]=b;if(!b){break f}}x[b+24>>2]=h;c=x[g+16>>2];if(c){x[b+16>>2]=c;x[c+24>>2]=b}c=x[g+20>>2];if(!c){break f}x[b+20>>2]=c;x[c+24>>2]=b}a=a+e|0;g=e+g|0;f=x[g+4>>2]}x[g+4>>2]=f&-2;x[i+4>>2]=a|1;x[a+i>>2]=a;if(a>>>0<=255){c=(a&-8)+20024|0;b=x[4996];a=1<<(a>>>3);L:{if(!(b&a)){x[4996]=a|b;a=c;break L}a=x[c+8>>2]}x[c+8>>2]=i;x[a+12>>2]=i;x[i+12>>2]=c;x[i+8>>2]=a;break d}f=31;if(a>>>0<=16777215){c=G(a>>>8|0);f=((a>>>38-c&1)-(c<<1)|0)+62|0}x[i+28>>2]=f;x[i+16>>2]=0;x[i+20>>2]=0;c=(f<<2)+20288|0;M:{d=x[4997];b=1<<f;N:{if(!(d&b)){x[4997]=b|d;x[c>>2]=i;break N}f=a<<((f|0)!=31?25-(f>>>1|0)|0:0);b=x[c>>2];while(1){c=b;if((x[b+4>>2]&-8)==(a|0)){break M}b=f>>>29|0;f=f<<1;d=(b&4)+c|0;b=x[d+16>>2];if(b){continue}break}x[d+16>>2]=i}x[i+24>>2]=c;x[i+12>>2]=i;x[i+8>>2]=i;break d}a=x[c+8>>2];x[a+12>>2]=i;x[c+8>>2]=i;x[i+24>>2]=0;x[i+12>>2]=c;x[i+8>>2]=a}a=j+8|0;break a}O:{if(!g){break O}c=x[d+28>>2];a=(c<<2)+20288|0;P:{if(x[a>>2]==(d|0)){x[a>>2]=b;if(b){break P}j=In(c)&j;x[4997]=j;break O}x[g+(x[g+16>>2]==(d|0)?16:20)>>2]=b;if(!b){break O}}x[b+24>>2]=g;a=x[d+16>>2];if(a){x[b+16>>2]=a;x[a+24>>2]=b}a=x[d+20>>2];if(!a){break O}x[b+20>>2]=a;x[a+24>>2]=b}Q:{if(f>>>0<=15){a=f+h|0;x[d+4>>2]=a|3;a=a+d|0;x[a+4>>2]=x[a+4>>2]|1;break Q}x[d+4>>2]=h|3;e=d+h|0;x[e+4>>2]=f|1;x[e+f>>2]=f;if(f>>>0<=255){c=(f&-8)+20024|0;b=x[4996];a=1<<(f>>>3);R:{if(!(b&a)){x[4996]=a|b;a=c;break R}a=x[c+8>>2]}x[c+8>>2]=e;x[a+12>>2]=e;x[e+12>>2]=c;x[e+8>>2]=a;break Q}a=31;if(f>>>0<=16777215){a=G(f>>>8|0);a=((f>>>38-a&1)-(a<<1)|0)+62|0}x[e+28>>2]=a;x[e+16>>2]=0;x[e+20>>2]=0;c=(a<<2)+20288|0;S:{b=1<<a;T:{if(!(b&j)){x[4997]=b|j;x[c>>2]=e;break T}a=f<<((a|0)!=31?25-(a>>>1|0)|0:0);h=x[c>>2];while(1){c=h;if((x[c+4>>2]&-8)==(f|0)){break S}b=a>>>29|0;a=a<<1;b=(b&4)+c|0;h=x[b+16>>2];if(h){continue}break}x[b+16>>2]=e}x[e+24>>2]=c;x[e+12>>2]=e;x[e+8>>2]=e;break Q}a=x[c+8>>2];x[a+12>>2]=e;x[c+8>>2]=e;x[e+24>>2]=0;x[e+12>>2]=c;x[e+8>>2]=a}a=d+8|0;break a}U:{if(!i){break U}c=x[b+28>>2];a=(c<<2)+20288|0;V:{if(x[a>>2]==(b|0)){x[a>>2]=d;if(d){break V}x[4997]=In(c)&j;break U}x[i+(x[i+16>>2]==(b|0)?16:20)>>2]=d;if(!d){break U}}x[d+24>>2]=i;a=x[b+16>>2];if(a){x[d+16>>2]=a;x[a+24>>2]=d}a=x[b+20>>2];if(!a){break U}x[d+20>>2]=a;x[a+24>>2]=d}W:{if(f>>>0<=15){a=f+h|0;x[b+4>>2]=a|3;a=a+b|0;x[a+4>>2]=x[a+4>>2]|1;break W}x[b+4>>2]=h|3;d=b+h|0;x[d+4>>2]=f|1;x[d+f>>2]=f;if(k){c=(k&-8)+20024|0;e=x[5001];a=1<<(k>>>3);X:{if(!(a&g)){x[4996]=a|g;a=c;break X}a=x[c+8>>2]}x[c+8>>2]=e;x[a+12>>2]=e;x[e+12>>2]=c;x[e+8>>2]=a}x[5001]=d;x[4998]=f}a=b+8|0}Wa=l+16|0;return a|0}function rg(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,z=0,A=0,E=0;d=Wa-144|0;Wa=d;e=Mb(d,0,144);x[e+76>>2]=-1;x[e+44>>2]=a;x[e+32>>2]=124;x[e+84>>2]=a;d=b;t=c;a=0;j=Wa-304|0;Wa=j;a:{b:{c:{d:{if(x[e+4>>2]){break d}xd(e);if(x[e+4>>2]){break d}break c}b=y[d|0];if(!b){break a}e:{f:{g:{h:{while(1){i:{b=b&255;j:{if((b|0)==32|b-9>>>0<5){while(1){b=d;d=d+1|0;c=y[b+1|0];if((c|0)==32|c-9>>>0<5){continue}break}Sb(e,0,0);while(1){c=x[e+4>>2];k:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;c=y[c|0];break k}c=hb(e)}if((c|0)==32|c-9>>>0<5){continue}break}d=x[e+4>>2];c=x[e+116>>2];if((c|0)>0|(c|0)>=0){d=d-1|0;x[e+4>>2]=d}c=d-x[e+44>>2]|0;d=c;g=n+x[e+124>>2]|0;f=c>>31;c=l+x[e+120>>2]|0;g=f+(c>>>0<l>>>0?g+1|0:g)|0;l=c+d|0;n=l>>>0<c>>>0?g+1|0:g;break j}l:{m:{n:{if(y[d|0]==37){b=y[d+1|0];if((b|0)==42){break n}if((b|0)!=37){break m}}Sb(e,0,0);o:{if(y[d|0]==37){while(1){b=x[e+4>>2];p:{if((b|0)!=x[e+104>>2]){x[e+4>>2]=b+1;b=y[b|0];break p}b=hb(e)}if((b|0)==32|b-9>>>0<5){continue}break}d=d+1|0;break o}b=x[e+4>>2];if((b|0)!=x[e+104>>2]){x[e+4>>2]=b+1;b=y[b|0];break o}b=hb(e)}if(y[d|0]!=(b|0)){c=x[e+116>>2];if((c|0)>0|(c|0)>=0){x[e+4>>2]=x[e+4>>2]-1}if((b|0)>=0){break a}h=0;if(u){break a}break c}b=x[e+4>>2]-x[e+44>>2]|0;f=b;c=n+x[e+124>>2]|0;h=b>>31;b=l+x[e+120>>2]|0;h=h+(b>>>0<l>>>0?c+1|0:c)|0;l=b+f|0;n=l>>>0<b>>>0?h+1|0:h;b=d;break j}k=0;b=d+2|0;break l}if(!(y[d+2|0]!=36|b-48>>>0>=10)){b=y[d+1|0]-48|0;c=Wa-16|0;x[c+12>>2]=t;b=(b>>>0>1?(b<<2)-4|0:0)+t|0;x[c+8>>2]=b+4;k=x[b>>2];b=d+3|0;break l}k=x[t>>2];t=t+4|0;b=d+1|0}r=0;d=0;if(y[b|0]-48>>>0<10){while(1){d=(y[b|0]+D(d,10)|0)-48|0;c=y[b+1|0];b=b+1|0;if(c-48>>>0<10){continue}break}}m=y[b|0];if((m|0)==109){o=0;r=(k|0)!=0;m=y[b+1|0];a=0;b=b+1|0}c=b;b=c+1|0;f=3;h=r;q:{r:{switch(m-65|0){case 39:f=c+2|0;c=y[c+1|0]==104;b=c?f:b;f=c?-2:-1;break q;case 43:f=c+2|0;c=y[c+1|0]==108;b=c?f:b;f=c?3:1;break q;case 51:case 57:f=1;break q;case 11:f=2;break q;case 41:break q;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break r;default:break e}}f=0;b=c}h=f;c=y[b|0];f=(c&47)==3;z=f?1:h;p=f?c|32:c;s:{if((p|0)==91){break s}t:{if((p|0)!=110){if((p|0)!=99){break t}d=(d|0)<=1?1:d;break s}sg(k,z,l,n);break j}Sb(e,0,0);while(1){c=x[e+4>>2];u:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;c=y[c|0];break u}c=hb(e)}if((c|0)==32|c-9>>>0<5){continue}break}c=x[e+4>>2];f=x[e+116>>2];if((f|0)>0|(f|0)>=0){c=c-1|0;x[e+4>>2]=c}c=c-x[e+44>>2]|0;f=c;g=n+x[e+124>>2]|0;h=c>>31;c=l+x[e+120>>2]|0;n=h+(c>>>0<l>>>0?g+1|0:g)|0;l=c+f|0;n=l>>>0<c>>>0?n+1|0:n}q=d;m=d>>31;Sb(e,d,m);c=x[e+4>>2];v:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;break v}if((hb(e)|0)<0){break f}}c=x[e+116>>2];if((c|0)>0|(c|0)>=0){x[e+4>>2]=x[e+4>>2]-1}c=16;w:{x:{y:{z:{A:{switch(p-88|0){default:c=p-65|0;if(c>>>0>6|!(1<<c&113)){break w}case 9:case 13:case 14:case 15:vg(j+8|0,e,z,0);c=x[e+4>>2]-x[e+44>>2]|0;if(x[e+120>>2]!=(0-c|0)|x[e+124>>2]!=(0-((c>>31)+((c|0)!=0)|0)|0)){break y}break g;case 3:case 11:case 27:if((p|16)==115){Mb(j+32|0,-1,257);v[j+32|0]=0;if((p|0)!=115){break x}v[j+65|0]=0;v[j+46|0]=0;w[j+42>>1]=0;w[j+44>>1]=0;break x}f=y[b+1|0];i=(f|0)==94;Mb(j+32|0,i,257);v[j+32|0]=0;c=i?b+2|0:b+1|0;B:{C:{D:{b=y[(i?2:1)+b|0];if((b|0)!=45){if((b|0)==93){break D}f=(f|0)!=94;b=c;break B}f=(f|0)!=94;v[j+78|0]=f;break C}f=(f|0)!=94;v[j+126|0]=f}b=c+1|0}while(1){c=y[b|0];E:{if((c|0)!=45){if(!c){break f}if((c|0)==93){break x}break E}c=45;i=y[b+1|0];if(!i|(i|0)==93){break E}g=b+1|0;b=y[b-1|0];F:{if(i>>>0<=b>>>0){c=i;break F}while(1){b=b+1|0;v[b+(j+32|0)|0]=f;c=y[g|0];if(c>>>0>b>>>0){continue}break}}b=g}v[(c+j|0)+33|0]=f;b=b+1|0;continue};case 23:c=8;break z;case 12:case 29:c=10;break z;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break w;case 0:case 24:case 32:break z;case 17:break A}}c=0}i=0;g=0;f=0;h=0;m=0;A=Wa-16|0;Wa=A;G:{if(!((c|0)!=1&c>>>0<=36)){x[4995]=28;break G}while(1){d=x[e+4>>2];H:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break H}d=hb(e)}if((d|0)==32|d-9>>>0<5){continue}break}I:{J:{switch(d-43|0){case 0:case 2:break J;default:break I}}m=(d|0)==45?-1:0;d=x[e+4>>2];if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break I}d=hb(e)}K:{L:{M:{N:{if(!((c|0)!=0&(c|0)!=16|(d|0)!=48)){d=x[e+4>>2];O:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break O}d=hb(e)}if((d&-33)==88){c=16;d=x[e+4>>2];P:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break P}d=hb(e)}if(y[d+4897|0]<16){break M}c=x[e+116>>2];if((c|0)>0|(c|0)>=0){x[e+4>>2]=x[e+4>>2]-1}Sb(e,0,0);break G}if(c){break N}c=8;break M}c=c?c:10;if(c>>>0>y[d+4897|0]){break N}c=x[e+116>>2];if((c|0)>0|(c|0)>=0){x[e+4>>2]=x[e+4>>2]-1}Sb(e,0,0);x[4995]=28;break G}if((c|0)!=10){break M}f=d-48|0;if(f>>>0<=9){c=0;while(1){c=D(c,10)+f|0;h=c>>>0<429496729;d=x[e+4>>2];Q:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break Q}d=hb(e)}f=d-48|0;if(h&f>>>0<=9){continue}break}i=c}R:{if(f>>>0>9){break R}c=Gn(i,0,10,0);h=Ya;while(1){g=h;i=c+f|0;g=i>>>0<c>>>0?g+1|0:g;h=(g|0)==429496729&i>>>0>=2576980378|g>>>0>429496729;c=x[e+4>>2];S:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;d=y[c|0];break S}d=hb(e)}f=d-48|0;if(h|f>>>0>9){break R}c=Gn(i,g,10,0);h=Ya;if((h|0)==-1&(f^-1)>>>0>=c>>>0|(h|0)!=-1){continue}break}c=10;break L}c=10;if(f>>>0<=9){break L}break K}if(c-1&c){h=y[d+4897|0];if(h>>>0<c>>>0){while(1){f=D(c,f)+h|0;i=f>>>0<119304647;d=x[e+4>>2];T:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break T}d=hb(e)}h=y[d+4897|0];if(i&h>>>0<c>>>0){continue}break}i=f}if(c>>>0<=h>>>0){break L}while(1){f=Gn(i,g,c,0);q=Ya;h=h&255;if((q|0)==-1&(h^-1)>>>0<f>>>0){break L}g=q;i=f+h|0;g=i>>>0<f>>>0?g+1|0:g;d=x[e+4>>2];U:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break U}d=hb(e)}h=y[d+4897|0];if(c>>>0<=h>>>0){break L}Ab(A,c,0,0,0,i,g,0,0);if(!(x[A+8>>2]|x[A+12>>2])){continue}break}break L}q=v[(D(c,23)>>>5&7)+5153|0];f=y[d+4897|0];if(f>>>0<c>>>0){while(1){h=h<<q|f;i=h>>>0<134217728;d=x[e+4>>2];V:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break V}d=hb(e)}f=y[d+4897|0];if(i&f>>>0<c>>>0){continue}break}i=h}if(c>>>0<=f>>>0){break L}s=q&31;if((q&63)>>>0>=32){h=0;s=-1>>>s|0}else{h=-1>>>s|0;s=h|(1<<s)-1<<32-s}if(!h&i>>>0>s>>>0){break L}while(1){E=f&255;f=i;d=q&31;if((q&63)>>>0>=32){g=f<<d;d=0}else{g=(1<<d)-1&f>>>32-d|g<<d;d=f<<d}i=E|d;d=x[e+4>>2];W:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break W}d=hb(e)}f=y[d+4897|0];if(c>>>0<=f>>>0){break L}if((g|0)==(h|0)&i>>>0<=s>>>0|g>>>0<h>>>0){continue}break}}if(y[d+4897|0]>=c>>>0){break K}while(1){d=x[e+4>>2];X:{if((d|0)!=x[e+104>>2]){x[e+4>>2]=d+1;d=y[d|0];break X}d=hb(e)}if(y[d+4897|0]<c>>>0){continue}break}x[4995]=68;m=0;i=-1;g=-1}c=x[e+116>>2];if((c|0)>0|(c|0)>=0){x[e+4>>2]=x[e+4>>2]-1}Y:{if((g&i)!=-1){break Y}}c=i^m;i=c-m|0;d=m>>31;g=(d^g)-((c>>>0<m>>>0)+d|0)|0}Wa=A+16|0;c=x[e+4>>2]-x[e+44>>2]|0;if(x[e+120>>2]==(0-c|0)&x[e+124>>2]==(0-((c>>31)+((c|0)!=0)|0)|0)){break g}if(!(!k|(p|0)!=112)){x[k>>2]=i;break w}sg(k,z,i,g);break w}if(!k){break w}c=x[j+16>>2];f=x[j+20>>2];d=x[j+8>>2];i=x[j+12>>2];Z:{switch(z|0){case 0:B[k>>2]=tg(d,i,c,f);break w;case 1:C[k>>3]=ee(d,i,c,f);break w;case 2:break Z;default:break w}}x[k>>2]=d;x[k+4>>2]=i;x[k+8>>2]=c;x[k+12>>2]=f;break w}i=(p|0)==99;f=i?d+1|0:31;_:{if((z|0)==1){c=k;if(r){c=ob(f<<2);if(!c){break h}}x[j+296>>2]=0;x[j+300>>2]=0;d=0;while(1){a=c;$:{while(1){c=x[e+4>>2];aa:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;c=y[c|0];break aa}c=hb(e)}if(!y[(c+j|0)+33|0]){break $}v[j+27|0]=c;c=Oc(j+28|0,j+27|0,1,j+296|0);if((c|0)==-2){continue}o=0;if((c|0)==-1){break f}if(a){x[(d<<2)+a>>2]=x[j+28>>2];d=d+1|0}if(!((d|0)==(f|0)&r)){continue}break}h=1;f=f<<1|1;c=dd(a,f<<2);if(c){continue}break e}break}o=0;f=a;if(j+296|0?x[j+296>>2]:0){break f}break _}if(r){d=0;c=ob(f);if(!c){break h}while(1){a=c;while(1){c=x[e+4>>2];ba:{if((c|0)!=x[e+104>>2]){x[e+4>>2]=c+1;c=y[c|0];break ba}c=hb(e)}if(!y[(c+j|0)+33|0]){f=0;o=a;break _}v[a+d|0]=c;d=d+1|0;if((f|0)!=(d|0)){continue}break}h=1;f=f<<1|1;c=dd(a,f);if(c){continue}break}o=a;a=0;break e}d=0;if(k){while(1){a=x[e+4>>2];ca:{if((a|0)!=x[e+104>>2]){x[e+4>>2]=a+1;a=y[a|0];break ca}a=hb(e)}if(y[(a+j|0)+33|0]){v[d+k|0]=a;d=d+1|0;continue}else{f=0;a=k;o=a;break _}}}while(1){a=x[e+4>>2];da:{if((a|0)!=x[e+104>>2]){x[e+4>>2]=a+1;a=y[a|0];break da}a=hb(e)}if(y[(a+j|0)+33|0]){continue}break}a=0;o=0;f=0}c=x[e+4>>2];g=x[e+116>>2];if((g|0)>0|(g|0)>=0){c=c-1|0;x[e+4>>2]=c}g=c-x[e+44>>2]|0;h=g;c=g+x[e+120>>2]|0;g=x[e+124>>2]+(g>>31)|0;g=c>>>0<h>>>0?g+1|0:g;if(!(g|c)|((c|0)!=(q|0)|(g|0)!=(m|0))&(p|0)==99){break i}if(r){x[k>>2]=a}ea:{if(i){break ea}if(f){x[(d<<2)+f>>2]=0}if(!o){o=0;break ea}v[d+o|0]=0}a=f}c=x[e+4>>2]-x[e+44>>2]|0;f=c;i=c>>31;c=n+x[e+124>>2]|0;d=l+x[e+120>>2]|0;g=(d>>>0<l>>>0?c+1|0:c)+i|0;l=d+f|0;n=l>>>0<d>>>0?g+1|0:g;u=((k|0)!=0)+u|0}d=b+1|0;b=y[b+1|0];if(b){continue}break a}break}a=f;break g}h=1;o=0;a=0;break e}h=r;break b}h=r}if(u){break b}}u=-1}if(!h){break a}db(o);db(a)}Wa=j+304|0;Wa=e+144|0;return u}function xg(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,B=0,C=0,D=0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;k=Wa-336|0;Wa=k;n=h;p=i&65535;o=d;m=e&65535;u=(e^i)&-2147483648;s=i>>>16&32767;q=e>>>16&32767;a:{b:{if(s-32767>>>0>4294934529&q-32767>>>0>=4294934530){break b}j=e&2147483647;if(!(!d&(j|0)==2147418112?!(b|c):j>>>0<2147418112)){r=d;u=e|32768;break a}e=i&2147483647;if(!(!h&(e|0)==2147418112?!(f|g):e>>>0<2147418112)){r=h;u=i|32768;b=f;c=g;break a}if(!(b|d|(j^2147418112|c))){if(!(f|h|(e^2147418112|g))){b=0;c=0;u=2147450880;break a}u=u|2147418112;b=0;c=0;break a}if(!(f|h|(e^2147418112|g))){b=0;c=0;break a}if(!(b|d|(c|j))){b=!(f|h|(e|g));r=b?0:r;u=b?2147450880:u;b=0;c=0;break a}if(!(f|h|(e|g))){u=u|2147418112;b=0;c=0;break a}if((j|0)==65535|j>>>0<65535){d=!(m|o);i=d;j=d?b:o;d=d<<6;h=d;i=G(i?c:m);d=d+((i|0)==32?G(j)+32|0:i)|0;Eb(k+320|0,b,c,o,m,d-15|0);v=16-d|0;o=x[k+328>>2];m=x[k+332>>2];c=x[k+324>>2];b=x[k+320>>2]}if(e>>>0>65535){break b}d=!(n|p);h=d;i=d?f:n;d=d<<6;e=d;h=G(h?g:p);d=d+((h|0)==32?G(i)+32|0:h)|0;Eb(k+304|0,f,g,n,p,d-15|0);v=(d+v|0)-16|0;n=x[k+312>>2];p=x[k+316>>2];f=x[k+304>>2];g=x[k+308>>2]}e=p|65536;C=e;D=n;d=n;j=e<<15|d>>>17;e=d<<15|g>>>17;d=e;i=0-d|0;h=j;j=1963258675-(j+((d|0)!=0)|0)|0;Ab(k+288|0,d,h,0,0,i,j,0,0);d=x[k+296>>2];Ab(k+272|0,0-d|0,0-(x[k+300>>2]+((d|0)!=0)|0)|0,0,0,i,j,0,0);d=x[k+280>>2];i=d<<1|x[k+276>>2]>>>31;d=x[k+284>>2]<<1|d>>>31;Ab(k+256|0,i,d,0,0,e,h,0,0);j=x[k+264>>2];Ab(k+240|0,i,d,0,0,0-j|0,0-(x[k+268>>2]+((j|0)!=0)|0)|0,0,0);i=x[k+248>>2];j=i<<1|x[k+244>>2]>>>31;d=x[k+252>>2]<<1|i>>>31;Ab(k+224|0,j,d,0,0,e,h,0,0);i=x[k+232>>2];Ab(k+208|0,j,d,0,0,0-i|0,0-(x[k+236>>2]+((i|0)!=0)|0)|0,0,0);d=x[k+216>>2];i=d<<1|x[k+212>>2]>>>31;d=x[k+220>>2]<<1|d>>>31;Ab(k+192|0,i,d,0,0,e,h,0,0);j=x[k+200>>2];Ab(k+176|0,i,d,0,0,0-j|0,0-(x[k+204>>2]+((j|0)!=0)|0)|0,0,0);i=e;e=x[k+184>>2];d=h;n=e<<1|x[k+180>>2]>>>31;h=n-1|0;e=(x[k+188>>2]<<1|e>>>31)-!n|0;Ab(k+160|0,i,d,0,0,h,e,0,0);d=h;Ab(k+144|0,f<<15,g<<15|f>>>17,0,0,d,e,0,0);t=k+112|0;z=x[k+168>>2];h=x[k+172>>2];n=x[k+160>>2];i=x[k+152>>2];l=n+i|0;p=x[k+164>>2];j=p+x[k+156>>2]|0;j=i>>>0>l>>>0?j+1|0:j;i=j;j=(p|0)==(j|0)&l>>>0<n>>>0|j>>>0<p>>>0;p=j+z|0;j=j>>>0>p>>>0?h+1|0:h;n=!i&l>>>0>1|(i|0)!=0;h=n+p|0;j=n>>>0>h>>>0?j+1|0:j;Ab(t,d,e,0,0,0-h|0,0-(((h|0)!=0)+j|0)|0,0,0);Ab(k+128|0,1-l|0,0-((l>>>0>1)+i|0)|0,0,0,d,e,0,0);K=(q-s|0)+v|0;e=x[k+116>>2];t=e;d=x[k+112>>2];j=e<<1|d>>>31;n=d<<1;q=j;d=j;h=x[k+140>>2];B=h;e=x[k+136>>2];j=h<<1|e>>>31;i=e<<1|x[k+132>>2]>>>31;h=i+n|0;d=d+j|0;d=h>>>0<i>>>0?d+1|0:d;e=d;d=d-(h>>>0<13927)|0;y=d;z=d;l=0;j=m|65536;L=j;M=o;d=o;j=j<<1|d>>>31;O=d<<1;P=j;F=j;d=Gn(y,l,j,0);j=Ya;H=d;w=j;v=b<<1;d=c<<1|b>>>31;s=d;j=0;p=j;i=h-13927|0;y=(e|0)==(y|0)&i>>>0<h>>>0|e>>>0>y>>>0;e=(e|0)==(q|0)&h>>>0<n>>>0|e>>>0<q>>>0;d=x[k+120>>2];h=x[k+124>>2]<<1|d>>>31;d=d<<1|t>>>31;j=h;l=B>>>31|0;d=l+d|0;j=d>>>0<l>>>0?j+1|0:j;h=d;d=d+e|0;l=h>>>0>d>>>0?j+1|0:j;e=d;d=d+y|0;l=e>>>0>d>>>0?l+1|0:l;e=d-1|0;y=l-!d|0;q=0;j=Gn(s,p,y,q);d=j+H|0;h=Ya+w|0;h=d>>>0<j>>>0?h+1|0:h;t=(w|0)==(h|0)&d>>>0<H>>>0|h>>>0<w>>>0;j=0;B=e;N=c>>>31|0;E=N|o<<1;w=0;e=Gn(e,j,E,w);o=e+d|0;j=Ya+h|0;l=0;j=e>>>0>o>>>0?j+1|0:j;n=j;d=(j|0)==(h|0)&d>>>0>o>>>0|h>>>0>j>>>0;e=d;d=d+t|0;l=e>>>0>d>>>0?1:l;e=Gn(F,p,y,q);d=e+d|0;j=Ya+l|0;t=d;d=d>>>0<e>>>0?j+1|0:j;e=Gn(F,p,B,w);m=Ya;h=e;e=Gn(E,w,y,q);l=h+e|0;j=Ya+m|0;j=e>>>0>l>>>0?j+1|0:j;e=j;j=(m|0)==(j|0)&h>>>0>l>>>0|j>>>0<m>>>0;m=t+e|0;d=d+j|0;d=m>>>0<e>>>0?d+1|0:d;t=m;m=d;e=0;d=e+o|0;j=l+n|0;j=d>>>0<e>>>0?j+1|0:j;e=j;h=(j|0)==(n|0)&d>>>0<o>>>0|j>>>0<n>>>0;j=m;l=h;h=h+t|0;j=l>>>0>h>>>0?j+1|0:j;I=h;l=j;t=d;m=d;o=e;H=i;d=Gn(i,0,E,w);h=Ya;e=d;i=Gn(z,r,s,r);d=d+i|0;j=Ya+h|0;j=d>>>0<i>>>0?j+1|0:j;i=(h|0)==(j|0)&d>>>0<e>>>0|h>>>0>j>>>0;h=j;J=v&-2;e=Gn(B,w,J,0);n=e+d|0;j=Ya+j|0;j=e>>>0>n>>>0?j+1|0:j;e=j;d=(j|0)==(h|0)&d>>>0>n>>>0|h>>>0>j>>>0;h=0;i=d+i|0;d=(i>>>0<d>>>0?1:h)+o|0;j=l;m=i+m|0;d=m>>>0<i>>>0?d+1|0:d;i=d;d=(d|0)==(o|0)&m>>>0<t>>>0|d>>>0<o>>>0;h=d;d=d+I|0;j=h>>>0>d>>>0?j+1|0:j;Q=d;t=j;d=Gn(F,p,H,r);I=Ya;F=d;h=Gn(y,q,J,r);d=d+h|0;j=Ya+I|0;o=d;p=Gn(z,r,E,w);l=d+p|0;h=d>>>0<h>>>0?j+1|0:j;d=h+Ya|0;d=l>>>0<p>>>0?d+1|0:d;q=l;j=Gn(s,r,B,w);p=l+j|0;l=Ya+d|0;l=j>>>0>p>>>0?l+1|0:l;B=0;E=(d|0)==(l|0)&p>>>0<q>>>0|d>>>0>l>>>0;j=(h|0)==(I|0)&o>>>0<F>>>0|h>>>0<I>>>0;d=(d|0)==(h|0)&o>>>0>q>>>0|d>>>0<h>>>0;d=d+j|0;d=d+E|0;h=l;q=h+m|0;j=(d|B)+i|0;j=h>>>0>q>>>0?j+1|0:j;o=j;d=(i|0)==(j|0)&m>>>0>q>>>0|i>>>0>j>>>0;j=t;h=d;d=d+Q|0;j=h>>>0>d>>>0?j+1|0:j;B=d;i=j;d=Gn(z,r,J,r);z=Ya;m=d;h=Gn(s,r,H,r);d=d+h|0;j=Ya+z|0;j=d>>>0<h>>>0?j+1|0:j;t=0;h=(j|0)==(z|0)&d>>>0<m>>>0|j>>>0<z>>>0;m=j;d=j+n|0;j=(h|t)+e|0;j=d>>>0<m>>>0?j+1|0:j;h=j;m=(e|0)==(j|0)&d>>>0<n>>>0|e>>>0>j>>>0;j=p;p=0;n=p+d|0;l=h+j|0;j=0;l=n>>>0<p>>>0?l+1|0:l;d=(h|0)==(l|0)&d>>>0>n>>>0|h>>>0>l>>>0;e=d;d=d+m|0;j=(e>>>0>d>>>0?1:j)+o|0;l=i;e=d;d=d+q|0;j=e>>>0>d>>>0?j+1|0:j;e=j;h=(o|0)==(j|0)&d>>>0<q>>>0|j>>>0<o>>>0;i=h;h=h+B|0;l=i>>>0>h>>>0?l+1|0:l;i=l;c:{if((l|0)==131071|l>>>0<131071){M=O|N;L=w|P;Ab(k+80|0,d,e,h,i,f,g,D,C);l=x[k+84>>2];p=l;j=b<<17;n=0;m=x[k+88>>2];c=n-m|0;b=x[k+80>>2];l=(l|b)!=0;o=c-l|0;m=(j-(x[k+92>>2]+(m>>>0>n>>>0)|0)|0)-(c>>>0<l>>>0)|0;n=0-b|0;p=0-(((b|0)!=0)+p|0)|0;b=K+16382|0;break c}d=(e&1)<<31|d>>>1;e=h<<31|e>>>1;h=(i&1)<<31|h>>>1;i=i>>>1|0;Ab(k+96|0,d,e,h,i,f,g,D,C);o=x[k+100>>2];s=o;v=x[k+104>>2];n=0-v|0;l=x[k+96>>2];m=(o|l)!=0;o=n-m|0;m=((b<<16)-(x[k+108>>2]+(p>>>0<v>>>0)|0)|0)-(m>>>0>n>>>0)|0;n=0-l|0;p=0-(((l|0)!=0)+s|0)|0;v=b;s=c;b=K+16383|0}if((b|0)>=32767){u=u|2147418112;b=0;c=0;break a}d:{if((b|0)>0){l=m<<1|o>>>31;o=o<<1|p>>>31;m=l;v=h;s=i&65535|b<<16;l=p<<1|n>>>31;i=n<<1;break d}if((b|0)<=-113){b=0;c=0;break a}rc(k- -64|0,d,e,h,i,1-b|0);Eb(k+48|0,v,s,M,L,b+112|0);d=x[k+64>>2];e=x[k+68>>2];v=x[k+72>>2];s=x[k+76>>2];Ab(k+32|0,f,g,D,C,d,e,v,s);b=x[k+40>>2];c=x[k+56>>2];l=x[k+36>>2];o=b<<1|l>>>31;n=c-o|0;m=x[k+60>>2]-((x[k+44>>2]<<1|b>>>31)+(c>>>0<o>>>0)|0)|0;b=x[k+32>>2];h=l<<1|b>>>31;j=b<<1;i=x[k+52>>2];c=x[k+48>>2];b=(h|0)==(i|0)&j>>>0>c>>>0|h>>>0>i>>>0;o=n-b|0;m=m-(b>>>0>n>>>0)|0;l=i-((c>>>0<j>>>0)+h|0)|0;i=c-j|0}b=i;Ab(k+16|0,f,g,D,C,3,0,0,0);Ab(k,f,g,D,C,5,0,0,0);c=0;h=l+c|0;j=d&1;b=b+j|0;h=i>>>0>b>>>0?h+1|0:h;i=b;g=(g|0)==(h|0)&b>>>0>f>>>0|g>>>0<h>>>0;l=m;b=(c|0)==(h|0)&b>>>0<j>>>0|c>>>0>h>>>0;f=b+o|0;l=b>>>0>f>>>0?l+1|0:l;j=e;b=(l|0)==(C|0);b=b&(f|0)==(D|0)?g:b&f>>>0>D>>>0|l>>>0>C>>>0;c=b;b=b+d|0;j=c>>>0>b>>>0?j+1|0:j;c=j;d=(e|0)==(j|0)&b>>>0<d>>>0|e>>>0>j>>>0;j=s;e=d;d=d+v|0;j=e>>>0>d>>>0?j+1|0:j;g=d;e=x[k+20>>2];m=(e|0)==(h|0)&A[k+16>>2]<i>>>0|e>>>0<h>>>0;e=x[k+28>>2];d=x[k+24>>2];e=j>>>0<2147418112&((d|0)==(f|0)&(e|0)==(l|0)?m:(e|0)==(l|0)&d>>>0<f>>>0|e>>>0<l>>>0);d=c;m=e;e=b+e|0;d=m>>>0>e>>>0?d+1|0:d;b=(c|0)==(d|0)&b>>>0>e>>>0|c>>>0>d>>>0;c=b;b=b+g|0;j=c>>>0>b>>>0?j+1|0:j;g=b;c=x[k+4>>2];h=(c|0)==(h|0)&A[k>>2]<i>>>0|c>>>0<h>>>0;c=x[k+12>>2];b=x[k+8>>2];b=j>>>0<2147418112&((b|0)==(f|0)&(c|0)==(l|0)?h:(c|0)==(l|0)&b>>>0<f>>>0|c>>>0<l>>>0);c=b;b=b+e|0;l=c>>>0>b>>>0?d+1|0:d;c=l;e=(d|0)==(l|0)&b>>>0<e>>>0|d>>>0>l>>>0;d=j;f=e;e=e+g|0;d=f>>>0>e>>>0?d+1|0:d;r=e|r;u=d|u}x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=r;x[a+12>>2]=u;Wa=k+336|0}function Vg(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=Wa-16|0;Wa=f;a:{if(Ja(f+12|0,f+8|0)|0){break a}c=ob((x[f+12>>2]<<2)+4|0);x[5171]=c;if(!c){break a}c=ob(x[f+8>>2]);if(c){x[x[5171]+(x[f+12>>2]<<2)>>2]=0;if(!(Ia(x[5171],c|0)|0)){break a}}x[5171]=0}Wa=f+16|0;a=Wa-448|0;Wa=a;x[4981]=0;x[4982]=0;x[4980]=19924;x[a+364>>2]=4436;c=x[1112];x[a+256>>2]=c;f=a+256|0;x[f+x[c-12>>2]>>2]=x[1113];x[a+260>>2]=0;c=x[x[a+256>>2]-12>>2];x[5120]=0;d=c+f|0;f=a+264|0;S(36,d|0,f|0);c=x[5120];x[5120]=0;h=a+364|0;b:{c:{d:{e:{if((c|0)!=1){x[d+72>>2]=0;x[d+76>>2]=-1;x[a+364>>2]=4436;x[a+256>>2]=4416;x[5120]=0;i=Q(37,f|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){d=P()|0;kc(h);break c}x[5120]=0;U(38,a+256|0,1954,8);c=x[5120];x[5120]=0;if((c|0)==1){break e}x[a+248>>2]=0;x[a+240>>2]=0;x[a+244>>2]=0;x[a+232>>2]=0;x[a+236>>2]=0;x[a+224>>2]=0;x[a+228>>2]=0;x[a+216>>2]=0;x[a+220>>2]=0;x[a+208>>2]=0;x[a+212>>2]=0;d=a- -64|0;f=a+48|4;c=a+168|4;f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{while(1){b=x[x[a+256>>2]-12>>2];x[5120]=0;b=x[(b+(a+256|0)|0)+28>>2];x[a+168>>2]=b;x[b+4>>2]=x[b+4>>2]+1;b=x[5120];x[5120]=0;if((b|0)==1){break g}x[5120]=0;e=T(40,a+168|0,20956)|0;b=x[5120];x[5120]=0;p:{if((b|0)!=1){b=x[x[e>>2]+28>>2];x[5120]=0;e=T(b|0,e|0,10)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break p}}d=P()|0;f=x[a+168>>2];c=x[f+4>>2]-1|0;x[f+4>>2]=c;if((c|0)==-1){Za[x[x[f>>2]+8>>2]](f)}break f}g=x[a+168>>2];b=x[g+4>>2]-1|0;x[g+4>>2]=b;if((b|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;e=Y(41,a+256|0,a+240|0,e|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break g}if(y[(e+x[x[e>>2]-12>>2]|0)+16|0]&5){break h}v[a+172|0]=0;v[a+183|0]=0;v[a+184|0]=0;v[a+207|0]=0;v[a+195|0]=0;v[a+196|0]=0;e=a+240|0;b=bc(e,44,0);x[a+224>>2]=b;x[5120]=0;g=la(42,a+152|0,e|0,0,b|0,e|0)|0;b=x[5120];x[5120]=0;q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{if((b|0)!=1){x[5120]=0;e=Y(1,g|0,0,10)|0;b=x[5120];x[5120]=0;if((b|0)==1){break B}x[a+168>>2]=e;if(v[a+163|0]<0){db(x[g>>2])}C:{if(v[a+251|0]>=0){x[a+144>>2]=x[a+248>>2];b=x[a+244>>2];x[a+136>>2]=x[a+240>>2];x[a+140>>2]=b;break C}x[5120]=0;U(4,a+136|0,x[a+240>>2],x[a+244>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break A}}x[5120]=0;da(43,a+48|0,a|0,a+136|0,0,a+224|0,a+208|0);b=x[5120];x[5120]=0;if((b|0)==1){break z}if(v[a+183|0]<0){db(x[a+172>>2])}b=x[a+52>>2];x[c>>2]=x[a+48>>2];x[c+4>>2]=b;x[c+8>>2]=x[a+56>>2];if(v[a+147|0]<0){db(x[a+136>>2])}D:{if(v[a+251|0]>=0){x[a+128>>2]=x[a+248>>2];b=x[a+244>>2];x[a+120>>2]=x[a+240>>2];x[a+124>>2]=b;break D}x[5120]=0;U(4,a+120|0,x[a+240>>2],x[a+244>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break y}}x[5120]=0;da(43,a+48|0,a|0,a+120|0,1,a+224|0,a+208|0);b=x[5120];x[5120]=0;if((b|0)==1){break x}if(v[a+195|0]<0){db(x[a+184>>2])}b=x[a+52>>2];x[a+184>>2]=x[a+48>>2];x[a+188>>2]=b;x[a+192>>2]=x[a+56>>2];if(v[a+131|0]<0){db(x[a+120>>2])}b=x[x[a+256>>2]-12>>2];x[5120]=0;b=x[(b+(a+256|0)|0)+28>>2];x[a+48>>2]=b;x[b+4>>2]=x[b+4>>2]+1;b=x[5120];x[5120]=0;if((b|0)==1){break j}x[5120]=0;e=T(40,a+48|0,20956)|0;b=x[5120];x[5120]=0;E:{if((b|0)!=1){b=x[x[e>>2]+28>>2];x[5120]=0;e=T(b|0,e|0,10)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break E}}d=P()|0;f=x[a+48>>2];c=x[f+4>>2]-1|0;x[f+4>>2]=c;if((c|0)==-1){Za[x[x[f>>2]+8>>2]](f)}break i}g=x[a+48>>2];b=x[g+4>>2]-1|0;x[g+4>>2]=b;if((b|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;Y(41,a+256|0,a+240|0,e|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break j}e=a+240|0;b=bc(e,44,0);x[a+224>>2]=b;x[5120]=0;g=la(42,a+104|0,e|0,0,b|0,e|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break w}x[5120]=0;e=Y(1,g|0,0,10)|0;b=x[5120];x[5120]=0;if((b|0)==1){break v}if(v[a+115|0]<0){db(x[g>>2])}if((e|0)!=x[a+168>>2]){break s}F:{if(v[a+251|0]>=0){x[a+96>>2]=x[a+248>>2];b=x[a+244>>2];x[a+88>>2]=x[a+240>>2];x[a+92>>2]=b;break F}x[5120]=0;U(4,a+88|0,x[a+240>>2],x[a+244>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break u}}x[5120]=0;da(43,a+48|0,a|0,a+88|0,1,a+224|0,a+208|0);b=x[5120];x[5120]=0;if((b|0)==1){break t}if(v[a+207|0]<0){db(x[a+196>>2])}b=x[a+52>>2];x[a+196>>2]=x[a+48>>2];x[a+200>>2]=b;x[a+204>>2]=x[a+56>>2];if(v[a+99|0]<0){db(x[a+88>>2])}x[5120]=0;b=a+168|0;Ba(44,a+48|0,19920,b|0,b|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){break r}d=P()|0;break i}d=P()|0;break i}d=P()|0;if(v[a+163|0]>=0){break i}db(x[g>>2]);break i}d=P()|0;break i}d=P()|0;if(v[a+147|0]>=0){break i}db(x[a+136>>2]);break i}d=P()|0;break i}d=P()|0;if(v[a+131|0]>=0){break i}db(x[a+120>>2]);break i}d=P()|0;break i}d=P()|0;if(v[a+115|0]>=0){break i}db(x[g>>2]);break i}d=P()|0;break i}d=P()|0;if(v[a+99|0]>=0){break i}db(x[a+88>>2]);break i}x[5120]=0;b=a+168|0;Ba(44,a+48|0,19920,b|0,b|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break q}v[a+52|0]=0;v[a+63|0]=0;v[a+64|0]=0;v[a+87|0]=0;v[a+75|0]=0;v[a+76|0]=0;x[a+48>>2]=e;G:{if(v[a+251|0]>=0){x[a+24>>2]=x[a+248>>2];b=x[a+244>>2];x[a+16>>2]=x[a+240>>2];x[a+20>>2]=b;break G}x[5120]=0;U(4,a+16|0,x[a+240>>2],x[a+244>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break o}}x[5120]=0;da(43,a+32|0,a|0,a+16|0,0,a+224|0,a+208|0);b=x[5120];x[5120]=0;if((b|0)==1){break n}e=v[a+27|0];b=x[a+36>>2];x[f>>2]=x[a+32>>2];x[f+4>>2]=b;x[f+8>>2]=x[a+40>>2];if((e|0)<0){db(x[a+16>>2])}H:{if(v[a+251|0]>=0){x[a+8>>2]=x[a+248>>2];b=x[a+244>>2];x[a>>2]=x[a+240>>2];x[a+4>>2]=b;break H}x[5120]=0;U(4,a|0,x[a+240>>2],x[a+244>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break m}}x[5120]=0;da(43,a+32|0,a|0,a|0,1,a+224|0,a+208|0);b=x[5120];x[5120]=0;if((b|0)==1){break l}e=v[a+11|0];b=x[a+36>>2];x[d>>2]=x[a+32>>2];x[d+4>>2]=b;x[d+8>>2]=x[a+40>>2];if((e|0)<0){db(x[a>>2])}if(v[a+75|0]<0){db(x[a+64>>2])}if(v[a+63|0]>=0){break r}db(x[a+52>>2])}if(v[a+207|0]<0){db(x[a+196>>2])}if(v[a+195|0]<0){db(x[a+184>>2])}if(v[a+183|0]>=0){continue}db(x[a+172>>2]);continue}break}d=P()|0;break i}d=P()|0;break k}d=P()|0;if(v[a+27|0]>=0){break k}db(x[a+16>>2]);break k}d=P()|0;break k}d=P()|0;if(v[a+11|0]>=0){break k}db(x[a>>2])}Kc(a+48|0);break i}d=P()|0}Kc(a+168|0);break f}if(v[a+251|0]<0){db(x[a+240>>2])}c=x[1111];x[a+256>>2]=c;x[x[c-12>>2]+(a+256|0)>>2]=x[1114];Rc(i);kc(h);Wa=a+448|0;break b}d=P()|0}if(v[a+251|0]>=0){break d}db(x[a+240>>2]);break d}d=P()|0;kc(h);break c}d=P()|0}Jc(a+256|0)}sd(19920,x[4981]);R(d|0);p()}x[4987]=0;x[4988]=0;x[4985]=0;x[4983]=0;x[4984]=131072;x[4989]=0;x[5120]=0;S(49,19948,131072);c=x[5120];x[5120]=0;I:{J:{if((c|0)==1){break J}v[19944]=0;x[5120]=0;aa(50,19932);c=x[5120];x[5120]=0;if((c|0)==1){break J}break I}c=P()|0;vf(19948);R(c|0);p()}x[4990]=35;x[4991]=0;fa(1270,2,2756,2836,6,7);fa(1716,2,2756,2836,6,8);fa(1284,2,2840,2836,9,10);fa(1829,2,2944,2952,11,12);Hg();x[4991]=x[4992];x[4992]=19960;x[4993]=55;x[4994]=0;gf();x[4994]=x[4992];x[4992]=19972;x[5164]=20520;x[5146]=42}function Mk(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,w=0;l=Wa-560|0;Wa=l;x[l+548>>2]=k;x[l+552>>2]=b;a:{b:{if(Pb(a,l+552|0)){x[f>>2]=x[f>>2]|4;a=0;break b}x[l+96>>2]=198;k=l+96|0;r=qb(l+136|0,l+144|0,k);b=x[r>>2];x[l+132>>2]=b;x[l+128>>2]=b+400;s=fb(k);o=fb(l+80|0);n=fb(l- -64|0);m=fb(l+48|0);q=fb(l+32|0);x[5120]=0;ia(210,c|0,d|0,l+120|0,l+116|0,l+112|0,s|0,o|0,n|0,m|0,l+28|0);b=x[5120];x[5120]=0;if((b|0)!=1){x[j>>2]=x[i>>2];u=e&512;w=u>>>9|0;e=0;k=0;while(1){c=k;c:{d:{e:{f:{if((e|0)==4){break f}x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(d){break f}b=0;g:{h:{i:{j:{k:{switch(v[(l+120|0)+e|0]){case 1:if((e|0)==3){break d}x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[5120]=0;d=Y(211,h|0,1,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(d){x[5120]=0;U(212,l+16|0,a|0,0);b=x[5120];x[5120]=0;if((b|0)!=1){b=x[l+16>>2];x[5120]=0;S(213,q|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){break j}}break a}x[f>>2]=x[f>>2]|4;a=0;break e;case 4:break g;case 2:break h;case 3:break i;case 0:break k;default:break c}}if((e|0)==3){break d}}while(1){x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(d){break d}x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[5120]=0;d=Y(211,h|0,1,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(!d){break d}x[5120]=0;U(212,l+16|0,a|0,0);b=x[5120];x[5120]=0;if((b|0)!=1){b=x[l+16>>2];x[5120]=0;S(213,q|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){continue}}break}break a}l:{if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}if(!b){break l}x[5120]=0;b=Q(165,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(y[n+11|0]>>>7|0){d=x[n>>2]}else{d=n}if(x[d>>2]!=(b|0)){break l}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}v[g|0]=0;if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}k=b>>>0>1?n:c;break c}m:{if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}if(!b){break m}x[5120]=0;b=Q(165,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(y[m+11|0]>>>7|0){d=x[m>>2]}else{d=m}if(x[d>>2]!=(b|0)){break m}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}v[g|0]=1;if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}k=b>>>0>1?m:c;break c}if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}d=!b;if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}if(!(d|!b)){x[f>>2]=x[f>>2]|4;a=0;break e}if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}if(y[m+11|0]>>>7|0){d=x[m+4>>2]}else{d=y[m+11|0]&127}if(!(b|d)){break d}if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}v[g|0]=!b;break d}if(!(e>>>0<2|c)){k=0;if(!((e|0)==2&y[l+123|0]!=0|w)){break c}}x[l+8>>2]=Jb(o);x[l+16>>2]=x[l+8>>2];n:{if(!e|y[(e+l|0)+119|0]>1){break n}o:{while(1){x[l+8>>2]=ec(o);if(x[l+16>>2]==x[l+8>>2]){break o}b=x[x[l+16>>2]>>2];x[5120]=0;d=Y(211,h|0,1,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){if(!d){break o}x[l+16>>2]=x[l+16>>2]+4;continue}break}break a}x[l+8>>2]=Jb(o);if(y[q+11|0]>>>7|0){d=x[q+4>>2]}else{d=y[q+11|0]&127}b=x[l+16>>2]-x[l+8>>2]>>2;if(d>>>0>=b>>>0){x[l+8>>2]=ec(q);k=Qd(l+8|0,0-b|0);d=ec(q);b=Jb(o);x[5120]=0;d=Cf(k,d,b);b=x[5120];x[5120]=0;if((b|0)==1){break a}if(d){break n}}x[l>>2]=Jb(o);x[l+8>>2]=x[l>>2];x[l+16>>2]=x[l+8>>2]}x[l+8>>2]=x[l+16>>2];p:{while(1){x[l>>2]=ec(o);if(x[l+8>>2]==x[l>>2]){break p}x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;q:{if((b|0)==1){break q}if(d){break p}x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break q}if((d|0)!=x[x[l+8>>2]>>2]){break p}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[l+8>>2]=x[l+8>>2]+4;continue}break}break a}if(!u){break d}x[l>>2]=ec(o);if(x[l+8>>2]==x[l>>2]){break d}x[f>>2]=x[f>>2]|4;a=0;break e}r:{while(1){s:{x[5120]=0;k=T(164,a|0,l+552|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break s}if(k){break r}x[5120]=0;t=Q(165,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}x[5120]=0;k=Y(211,h|0,64,t|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}t:{if(k){d=x[j>>2];if((d|0)==x[l+548>>2]){x[5120]=0;U(215,i|0,j|0,l+548|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}d=x[j>>2]}x[j>>2]=d+4;x[d>>2]=t;b=b+1|0;break t}if(y[s+11|0]>>>7|0){d=x[s+4>>2]}else{d=y[s+11|0]&127}if(!d|!b|(t|0)!=x[l+112>>2]){break r}k=x[l+132>>2];if((k|0)==x[l+128>>2]){x[5120]=0;U(205,r|0,l+132|0,l+128|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}k=x[l+132>>2]}x[l+132>>2]=k+4;x[k>>2]=b;b=0}x[5120]=0;Q(167,a|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break a}k=x[l+132>>2];if(!(!b|(k|0)==x[r>>2])){if(x[l+128>>2]==(k|0)){x[5120]=0;U(205,r|0,l+132|0,l+128|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}k=x[l+132>>2]}x[l+132>>2]=k+4;x[k>>2]=b}u:{if(x[l+28>>2]<=0){break u}x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}v:{if(!d){x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if((d|0)==x[l+116>>2]){break v}}x[f>>2]=x[f>>2]|4;a=0;break e}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}while(1){if(x[l+28>>2]<=0){break u}x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;w:{if((b|0)==1){break w}x:{if(!d){x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break w}x[5120]=0;d=Y(211,h|0,64,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break w}if(d){break x}}x[f>>2]=x[f>>2]|4;a=0;break e}if(x[j>>2]==x[l+548>>2]){x[5120]=0;U(215,i|0,j|0,l+548|0);b=x[5120];x[5120]=0;if((b|0)==1){break w}}x[5120]=0;d=Q(165,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break w}b=x[j>>2];x[j>>2]=b+4;x[b>>2]=d;x[5120]=0;x[l+28>>2]=x[l+28>>2]-1;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){continue}}break}break a}k=c;if(x[i>>2]!=x[j>>2]){break c}x[f>>2]=x[f>>2]|4;a=0;break e}y:{if(!c){break y}k=1;while(1){if(y[c+11|0]>>>7|0){b=x[c+4>>2]}else{b=y[c+11|0]&127}if(b>>>0<=k>>>0){break y}x[5120]=0;d=T(164,a|0,l+552|0)|0;b=x[5120];x[5120]=0;z:{if((b|0)==1){break z}A:{if(!d){x[5120]=0;b=Q(165,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break z}if(y[c+11|0]>>>7|0){d=x[c>>2]}else{d=c}if(x[d+(k<<2)>>2]==(b|0)){break A}}x[f>>2]=x[f>>2]|4;a=0;break e}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;k=k+1|0;if((b|0)!=1){continue}}break}break a}B:{if(x[r>>2]==x[l+132>>2]){break B}x[l+16>>2]=0;a=x[r>>2];x[5120]=0;wb(s,a,x[l+132>>2],l+16|0);a=x[5120];x[5120]=0;if((a|0)!=1){if(!x[l+16>>2]){break B}x[f>>2]=x[f>>2]|4;a=0;break e}break a}a=1}gb(q);gb(m);gb(n);gb(o);cb(s);eb(r);break b}k=c}e=e+1|0;continue}}break a}Wa=l+560|0;return a|0}a=P()|0;gb(q);gb(m);gb(n);gb(o);cb(s);eb(r);R(a|0);p()}function Tk(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0;l=Wa-560|0;Wa=l;x[l+548>>2]=k;x[l+552>>2]=b;a:{b:{if(Qb(a,l+552|0)){x[f>>2]=x[f>>2]|4;a=0;break b}x[l+104>>2]=198;b=l+104|0;r=qb(l+136|0,l+144|0,b);k=x[r>>2];x[l+132>>2]=k;x[l+128>>2]=k+400;s=fb(b);o=fb(l+88|0);n=fb(l+72|0);m=fb(l+56|0);q=fb(l+40|0);x[5120]=0;ia(201,c|0,d|0,l+120|0,l+119|0,l+118|0,s|0,o|0,n|0,m|0,l+36|0);b=x[5120];x[5120]=0;if((b|0)!=1){x[j>>2]=x[i>>2];t=e&512;u=t>>>9|0;c=0;k=0;while(1){e=k;c:{d:{e:{f:{if((c|0)==4){break f}x[5120]=0;b=T(134,a|0,l+552|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(b){break f}b=0;g:{h:{i:{j:{k:{switch(v[(l+120|0)+c|0]){case 1:if((c|0)==3){break d}x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(x[x[h+8>>2]+((b&255)<<2)>>2]&1&(b|0)>=0){x[5120]=0;U(202,l+24|0,a|0,0);b=x[5120];x[5120]=0;if((b|0)!=1){b=v[l+24|0];x[5120]=0;S(45,q|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){break j}}break a}x[f>>2]=x[f>>2]|4;a=0;break e;case 4:break g;case 2:break h;case 3:break i;case 0:break k;default:break c}}if((c|0)==3){break d}}while(1){x[5120]=0;b=T(134,a|0,l+552|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(b){break d}x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(!(x[x[h+8>>2]+((b&255)<<2)>>2]&1&(b|0)>=0)){break d}x[5120]=0;U(202,l+24|0,a|0,0);b=x[5120];x[5120]=0;if((b|0)!=1){b=v[l+24|0];x[5120]=0;S(45,q|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){continue}}break}break a}l:{if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}if(!b){break l}x[5120]=0;d=Q(135,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(y[n+11|0]>>>7|0){b=x[n>>2]}else{b=n}if(y[b|0]!=(d&255)){break l}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}v[g|0]=0;if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}k=b>>>0>1?n:e;break c}m:{if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}if(!b){break m}x[5120]=0;d=Q(135,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}if(y[m+11|0]>>>7|0){b=x[m>>2]}else{b=m}if(y[b|0]!=(d&255)){break m}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}v[g|0]=1;if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}k=b>>>0>1?m:e;break c}if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}d=!b;if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}if(!(d|!b)){x[f>>2]=x[f>>2]|4;a=0;break e}if(y[n+11|0]>>>7|0){b=x[n+4>>2]}else{b=y[n+11|0]&127}if(y[m+11|0]>>>7|0){d=x[m+4>>2]}else{d=y[m+11|0]&127}if(!(b|d)){break d}if(y[m+11|0]>>>7|0){b=x[m+4>>2]}else{b=y[m+11|0]&127}v[g|0]=!b;break d}if(!(c>>>0<2|e)){k=0;if(!((c|0)==2&y[l+123|0]!=0|u)){break c}}x[l+16>>2]=Jb(o);x[l+24>>2]=x[l+16>>2];n:{if(!c|y[(c+l|0)+119|0]>1){break n}while(1){o:{x[l+16>>2]=gc(o);if(x[l+24>>2]==x[l+16>>2]){break o}b=v[x[l+24>>2]];if((b|0)>=0){b=x[x[h+8>>2]+((b&255)<<2)>>2]&1}else{b=0}if(!b){break o}x[l+24>>2]=x[l+24>>2]+1;continue}break}x[l+16>>2]=Jb(o);if(y[q+11|0]>>>7|0){d=x[q+4>>2]}else{d=y[q+11|0]&127}b=x[l+24>>2]-x[l+16>>2]|0;if(d>>>0>=b>>>0){x[l+16>>2]=gc(q);b=Rd(l+16|0,0-b|0);d=gc(q);k=Jb(o);x[5120]=0;b=Hf(b,d,k);d=x[5120];x[5120]=0;if((d|0)==1){break a}if(b){break n}}x[l+8>>2]=Jb(o);x[l+16>>2]=x[l+8>>2];x[l+24>>2]=x[l+16>>2]}x[l+16>>2]=x[l+24>>2];p:{while(1){x[l+8>>2]=gc(o);if(x[l+16>>2]==x[l+8>>2]){break p}x[5120]=0;b=T(134,a|0,l+552|0)|0;d=x[5120];x[5120]=0;q:{if((d|0)==1){break q}if(b){break p}x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break q}if(y[x[l+16>>2]]!=(b&255)){break p}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[l+16>>2]=x[l+16>>2]+1;continue}break}break a}if(!t){break d}x[l+8>>2]=gc(o);if(x[l+16>>2]==x[l+8>>2]){break d}x[f>>2]=x[f>>2]|4;a=0;break e}r:{while(1){s:{x[5120]=0;d=T(134,a|0,l+552|0)|0;k=x[5120];x[5120]=0;if((k|0)==1){break s}if(d){break r}x[5120]=0;k=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}t:{if((k|0)>=0?x[x[h+8>>2]+((k&255)<<2)>>2]&64:0){d=x[j>>2];if((d|0)==x[l+548>>2]){x[5120]=0;U(204,i|0,j|0,l+548|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}d=x[j>>2]}x[j>>2]=d+1;v[d|0]=k;b=b+1|0;break t}if(y[s+11|0]>>>7|0){d=x[s+4>>2]}else{d=y[s+11|0]&127}if(!d|!b|y[l+118|0]!=(k&255)){break r}k=x[l+132>>2];if((k|0)==x[l+128>>2]){x[5120]=0;U(205,r|0,l+132|0,l+128|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}k=x[l+132>>2]}x[l+132>>2]=k+4;x[k>>2]=b;b=0}x[5120]=0;Q(137,a|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break a}k=x[l+132>>2];if(!(!b|(k|0)==x[r>>2])){if(x[l+128>>2]==(k|0)){x[5120]=0;U(205,r|0,l+132|0,l+128|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}k=x[l+132>>2]}x[l+132>>2]=k+4;x[k>>2]=b}u:{if(x[l+36>>2]<=0){break u}x[5120]=0;b=T(134,a|0,l+552|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}v:{if(!b){x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}if(y[l+119|0]==(b&255)){break v}}x[f>>2]=x[f>>2]|4;a=0;break e}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}while(1){if(x[l+36>>2]<=0){break u}x[5120]=0;b=T(134,a|0,l+552|0)|0;d=x[5120];x[5120]=0;w:{if((d|0)==1){break w}x:{if(!b){x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break w}if((b|0)>=0?x[x[h+8>>2]+((b&255)<<2)>>2]&64:0){break x}}x[f>>2]=x[f>>2]|4;a=0;break e}if(x[j>>2]==x[l+548>>2]){x[5120]=0;U(204,i|0,j|0,l+548|0);b=x[5120];x[5120]=0;if((b|0)==1){break w}}x[5120]=0;b=Q(135,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break w}d=x[j>>2];x[j>>2]=d+1;v[d|0]=b;x[5120]=0;x[l+36>>2]=x[l+36>>2]-1;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){continue}}break}break a}k=e;if(x[i>>2]!=x[j>>2]){break c}x[f>>2]=x[f>>2]|4;a=0;break e}y:{if(!e){break y}k=1;while(1){if(y[e+11|0]>>>7|0){b=x[e+4>>2]}else{b=y[e+11|0]&127}if(b>>>0<=k>>>0){break y}x[5120]=0;b=T(134,a|0,l+552|0)|0;c=x[5120];x[5120]=0;z:{if((c|0)==1){break z}A:{if(!b){x[5120]=0;c=Q(135,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break z}if(y[e+11|0]>>>7|0){b=x[e>>2]}else{b=e}if(y[b+k|0]==(c&255)){break A}}x[f>>2]=x[f>>2]|4;a=0;break e}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;k=k+1|0;if((b|0)!=1){continue}}break}break a}B:{if(x[r>>2]==x[l+132>>2]){break B}x[l+24>>2]=0;a=x[r>>2];x[5120]=0;wb(s,a,x[l+132>>2],l+24|0);a=x[5120];x[5120]=0;if((a|0)!=1){if(!x[l+24>>2]){break B}x[f>>2]=x[f>>2]|4;a=0;break e}break a}a=1}cb(q);cb(m);cb(n);cb(o);cb(s);eb(r);break b}k=e}c=c+1|0;continue}}break a}Wa=l+560|0;return a|0}a=P()|0;cb(q);cb(m);cb(n);cb(o);cb(s);eb(r);R(a|0);p()}function kk(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=Wa-448|0;Wa=b;x[b+364>>2]=4436;e=x[1112];x[b+256>>2]=e;f=b+256|0;x[f+x[e-12>>2]>>2]=x[1113];x[b+260>>2]=0;e=x[x[b+256>>2]-12>>2];x[5120]=0;h=e+f|0;f=b+264|0;S(36,h|0,f|0);e=x[5120];x[5120]=0;i=b+364|0;a:{b:{if((e|0)!=1){x[h+72>>2]=0;x[h+76>>2]=-1;x[b+364>>2]=4436;x[b+256>>2]=4416;x[5120]=0;j=Q(37,f|0)|0;e=x[5120];x[5120]=0;if((e|0)!=1){break b}break a}break a}x[5120]=0;U(38,b+256|0,1156,8);e=x[5120];x[5120]=0;c:{d:{e:{f:{if((e|0)!=1){x[b+248>>2]=0;x[b+240>>2]=0;x[b+244>>2]=0;x[b+232>>2]=0;x[b+236>>2]=0;x[b+224>>2]=0;x[b+228>>2]=0;x[b+216>>2]=0;x[b+220>>2]=0;x[b+208>>2]=0;x[b+212>>2]=0;h=b- -64|0;f=b+48|4;e=b+168|4;g:{h:{i:{j:{k:{l:{m:{while(1){c=x[x[b+256>>2]-12>>2];x[5120]=0;c=x[(c+(b+256|0)|0)+28>>2];x[b+168>>2]=c;x[c+4>>2]=x[c+4>>2]+1;c=x[5120];x[5120]=0;if((c|0)==1){break g}x[5120]=0;d=T(40,b+168|0,20956)|0;c=x[5120];x[5120]=0;n:{if((c|0)!=1){c=x[x[d>>2]+28>>2];x[5120]=0;d=T(c|0,d|0,10)|0;c=x[5120];x[5120]=0;if((c|0)!=1){break n}}a=P()|0;f=x[b+168>>2];e=x[f+4>>2]-1|0;x[f+4>>2]=e;if((e|0)==-1){Za[x[x[f>>2]+8>>2]](f)}break d}g=x[b+168>>2];c=x[g+4>>2]-1|0;x[g+4>>2]=c;if((c|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;d=Y(41,b+256|0,b+240|0,d|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break g}if(y[(d+x[x[d>>2]-12>>2]|0)+16|0]&5){break h}x[b+168>>2]=0;v[b+172|0]=0;v[b+207|0]=0;v[b+183|0]=0;v[b+184|0]=0;v[b+195|0]=0;v[b+196|0]=0;d=b+240|0;c=bc(d,44,0);x[b+224>>2]=c;x[5120]=0;g=la(42,b+152|0,d|0,0,c|0,d|0)|0;c=x[5120];x[5120]=0;o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{if((c|0)!=1){x[5120]=0;d=Y(1,g|0,0,10)|0;c=x[5120];x[5120]=0;if((c|0)==1){break z}x[b+168>>2]=d;if(v[b+163|0]<0){db(x[g>>2])}A:{if(v[b+251|0]>=0){x[b+144>>2]=x[b+248>>2];c=x[b+244>>2];x[b+136>>2]=x[b+240>>2];x[b+140>>2]=c;break A}x[5120]=0;U(4,b+136|0,x[b+240>>2],x[b+244>>2]);c=x[5120];x[5120]=0;if((c|0)==1){break y}}x[5120]=0;da(51,b+48|0,b|0,b+136|0,0,b+224|0,b+208|0);c=x[5120];x[5120]=0;if((c|0)==1){break x}if(v[b+183|0]<0){db(x[b+172>>2])}c=x[b+52>>2];x[e>>2]=x[b+48>>2];x[e+4>>2]=c;x[e+8>>2]=x[b+56>>2];if(v[b+147|0]<0){db(x[b+136>>2])}B:{if(v[b+251|0]>=0){x[b+128>>2]=x[b+248>>2];c=x[b+244>>2];x[b+120>>2]=x[b+240>>2];x[b+124>>2]=c;break B}x[5120]=0;U(4,b+120|0,x[b+240>>2],x[b+244>>2]);c=x[5120];x[5120]=0;if((c|0)==1){break w}}x[5120]=0;da(51,b+48|0,b|0,b+120|0,1,b+224|0,b+208|0);c=x[5120];x[5120]=0;if((c|0)==1){break v}if(v[b+195|0]<0){db(x[b+184>>2])}c=x[b+52>>2];x[b+184>>2]=x[b+48>>2];x[b+188>>2]=c;x[b+192>>2]=x[b+56>>2];if(v[b+131|0]<0){db(x[b+120>>2])}c=x[x[b+256>>2]-12>>2];x[5120]=0;c=x[(c+(b+256|0)|0)+28>>2];x[b+48>>2]=c;x[c+4>>2]=x[c+4>>2]+1;c=x[5120];x[5120]=0;if((c|0)==1){break i}x[5120]=0;d=T(40,b+48|0,20956)|0;c=x[5120];x[5120]=0;C:{if((c|0)!=1){c=x[x[d>>2]+28>>2];x[5120]=0;d=T(c|0,d|0,10)|0;c=x[5120];x[5120]=0;if((c|0)!=1){break C}}a=P()|0;f=x[b+48>>2];e=x[f+4>>2]-1|0;x[f+4>>2]=e;if((e|0)==-1){Za[x[x[f>>2]+8>>2]](f)}break e}g=x[b+48>>2];c=x[g+4>>2]-1|0;x[g+4>>2]=c;if((c|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;Y(41,b+256|0,b+240|0,d|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break i}d=b+240|0;c=bc(d,44,0);x[b+224>>2]=c;x[5120]=0;g=la(42,b+104|0,d|0,0,c|0,d|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break u}x[5120]=0;d=Y(1,g|0,0,10)|0;c=x[5120];x[5120]=0;if((c|0)==1){break t}if(v[b+115|0]<0){db(x[g>>2])}if((d|0)!=x[b+168>>2]){break q}D:{if(v[b+251|0]>=0){x[b+96>>2]=x[b+248>>2];c=x[b+244>>2];x[b+88>>2]=x[b+240>>2];x[b+92>>2]=c;break D}x[5120]=0;U(4,b+88|0,x[b+240>>2],x[b+244>>2]);c=x[5120];x[5120]=0;if((c|0)==1){break s}}x[5120]=0;da(51,b+48|0,b|0,b+88|0,1,b+224|0,b+208|0);c=x[5120];x[5120]=0;if((c|0)==1){break r}if(v[b+207|0]<0){db(x[b+196>>2])}c=x[b+52>>2];x[b+196>>2]=x[b+48>>2];x[b+200>>2]=c;x[b+204>>2]=x[b+56>>2];if(v[b+99|0]<0){db(x[b+88>>2])}x[5120]=0;T(52,a|0,b+168|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){break p}break f}a=P()|0;break e}a=P()|0;if(v[b+163|0]>=0){break e}db(x[g>>2]);break e}a=P()|0;break e}a=P()|0;if(v[b+147|0]>=0){break e}db(x[b+136>>2]);break e}a=P()|0;break e}a=P()|0;if(v[b+131|0]>=0){break e}db(x[b+120>>2]);break e}a=P()|0;break e}a=P()|0;if(v[b+115|0]>=0){break e}db(x[g>>2]);break e}a=P()|0;break e}a=P()|0;if(v[b+99|0]>=0){break e}db(x[b+88>>2]);break e}x[5120]=0;T(52,a|0,b+168|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break f}v[b+52|0]=0;v[b+63|0]=0;v[b+64|0]=0;v[b+87|0]=0;v[b+75|0]=0;v[b+76|0]=0;x[b+48>>2]=d;E:{if(v[b+251|0]>=0){x[b+24>>2]=x[b+248>>2];c=x[b+244>>2];x[b+16>>2]=x[b+240>>2];x[b+20>>2]=c;break E}x[5120]=0;U(4,b+16|0,x[b+240>>2],x[b+244>>2]);c=x[5120];x[5120]=0;if((c|0)==1){break o}}x[5120]=0;da(51,b+32|0,b|0,b+16|0,0,b+224|0,b+208|0);c=x[5120];x[5120]=0;if((c|0)==1){break m}d=v[b+27|0];c=x[b+36>>2];x[f>>2]=x[b+32>>2];x[f+4>>2]=c;x[f+8>>2]=x[b+40>>2];if((d|0)<0){db(x[b+16>>2])}F:{if(v[b+251|0]>=0){x[b+8>>2]=x[b+248>>2];c=x[b+244>>2];x[b>>2]=x[b+240>>2];x[b+4>>2]=c;break F}x[5120]=0;U(4,b|0,x[b+240>>2],x[b+244>>2]);c=x[5120];x[5120]=0;if((c|0)==1){break l}}x[5120]=0;da(51,b+32|0,b|0,b|0,1,b+224|0,b+208|0);c=x[5120];x[5120]=0;if((c|0)==1){break k}d=v[b+11|0];c=x[b+36>>2];x[h>>2]=x[b+32>>2];x[h+4>>2]=c;x[h+8>>2]=x[b+40>>2];if((d|0)<0){db(x[b>>2])}if(v[b+75|0]<0){db(x[b+64>>2])}if(v[b+63|0]>=0){break p}db(x[b+52>>2])}if(v[b+207|0]<0){db(x[b+196>>2])}if(v[b+195|0]<0){db(x[b+184>>2])}if(v[b+183|0]>=0){continue}db(x[b+172>>2]);continue}break}a=P()|0;break j}a=P()|0;if(v[b+27|0]>=0){break j}db(x[b+16>>2]);break j}a=P()|0;break j}a=P()|0;if(v[b+11|0]>=0){break j}db(x[b>>2])}Kc(b+48|0);break e}a=P()|0;break e}if(v[b+251|0]<0){db(x[b+240>>2])}a=x[1111];x[b+256>>2]=a;x[x[a-12>>2]+(b+256|0)>>2]=x[1114];Rc(j);kc(i);Wa=b+448|0;return}a=P()|0;break d}a=P()|0;break c}a=P()|0}Kc(b+168|0)}if(v[b+251|0]>=0){break c}db(x[b+240>>2])}Jc(b+256|0);R(a|0);p()}a=P()|0;kc(i);R(a|0);p()}function kg(a,b,c,d,e,f){a=a|0;b=+b;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,k=0,l=0,m=0,n=0,p=0,q=0,r=0,s=0,t=0,u=0,w=0,z=0,A=0,B=0,C=0;n=Wa-560|0;Wa=n;x[n+44>>2]=0;o(+b);g=j(1)|0;j(0)|0;a:{if((g|0)<0){u=1;C=1135;b=-b;o(+b);g=j(1)|0;j(0)|0;break a}if(e&2048){u=1;C=1138;break a}u=e&1;C=u?1141:1136;B=!u}b:{if((g&2146435072)==2146435072){g=u+3|0;Db(a,32,c,g,e&-65537);zb(a,C,u);d=f&32;zb(a,b!=b?d?1533:2017:d?1730:2039,3);Db(a,32,c,g,e^8192);t=(c|0)<(g|0)?g:c;break b}A=n+16|0;c:{d:{e:{b=og(b,n+44|0);b=b+b;if(b!=0){g=x[n+44>>2];x[n+44>>2]=g-1;t=f|32;if((t|0)!=97){break e}break c}t=f|32;if((t|0)==97){break c}k=x[n+44>>2];m=(d|0)<0?6:d;break d}k=g-29|0;x[n+44>>2]=k;b=b*268435456;m=(d|0)<0?6:d}r=(n+48|0)+((k|0)>=0?288:0)|0;h=r;while(1){if(b<4294967296&b>=0){d=~~b>>>0}else{d=0}x[h>>2]=d;h=h+4|0;b=(b-+(d>>>0))*1e9;if(b!=0){continue}break}f:{if((k|0)<=0){g=h;i=r;break f}i=r;while(1){p=(k|0)>=29?29:k;g=h-4|0;g:{if(i>>>0>g>>>0){break g}d=0;while(1){l=x[g>>2];k=d;d=p&31;if((p&63)>>>0>=32){q=l<<d;d=0}else{q=(1<<d)-1&l>>>32-d;d=l<<d}k=k+d|0;l=q+s|0;d=Hn(k,d>>>0>k>>>0?l+1|0:l,1e9);x[g>>2]=k-Gn(d,Ya,1e9,0);g=g-4|0;if(i>>>0<=g>>>0){continue}break}if(!d){break g}i=i-4|0;x[i>>2]=d}while(1){g=h;if(i>>>0<g>>>0){h=g-4|0;if(!x[h>>2]){continue}}break}k=x[n+44>>2]-p|0;x[n+44>>2]=k;h=g;if((k|0)>0){continue}break}}if((k|0)<0){w=((m+25>>>0)/9|0)+1|0;s=(t|0)==102;while(1){d=0-k|0;q=(d|0)>=9?9:d;h:{if(g>>>0<=i>>>0){h=x[i>>2];break h}p=1e9>>>q|0;l=-1<<q^-1;k=0;h=i;while(1){d=x[h>>2];x[h>>2]=(d>>>q|0)+k;k=D(p,d&l);h=h+4|0;if(h>>>0<g>>>0){continue}break}h=x[i>>2];if(!k){break h}x[g>>2]=k;g=g+4|0}k=q+x[n+44>>2]|0;x[n+44>>2]=k;i=(!h<<2)+i|0;d=s?r:i;g=g-d>>2>(w|0)?d+(w<<2)|0:g;if((k|0)<0){continue}break}}k=0;i:{if(g>>>0<=i>>>0){break i}k=D(r-i>>2,9);h=10;d=x[i>>2];if(d>>>0<10){break i}while(1){k=k+1|0;h=D(h,10);if(d>>>0>=h>>>0){continue}break}}d=(m-((t|0)!=102?k:0)|0)-((t|0)==103&(m|0)!=0)|0;if((d|0)<(D(g-r>>2,9)-9|0)){p=d+9216|0;d=(p|0)/9|0;l=r+(d<<2)|0;q=l-4096|0;h=10;d=p-D(d,9)|0;if((d|0)<=7){while(1){h=D(h,10);d=d+1|0;if((d|0)!=8){continue}break}}d=l-4092|0;p=x[q+4>>2];l=(p>>>0)/(h>>>0)|0;s=p-D(h,l)|0;w=q+8|0;j:{if(!s&(w|0)==(g|0)){break j}k:{if(!(l&1)){b=9007199254740992;if(!(v[q|0]&1)|((h|0)!=1e9|d>>>0<=i>>>0)){break k}}b=9007199254740994}l=h>>>1|0;z=l>>>0>s>>>0?.5:(l|0)==(s|0)?(g|0)==(w|0)?1:1.5:1.5;if(!(y[C|0]!=45|B)){z=-z;b=-b}l=p-s|0;x[d>>2]=l;if(b+z==b){break j}h=h+l|0;x[d>>2]=h;if(h>>>0>=1e9){while(1){x[d>>2]=0;d=d-4|0;if(i>>>0>d>>>0){i=i-4|0;x[i>>2]=0}h=x[d>>2]+1|0;x[d>>2]=h;if(h>>>0>999999999){continue}break}}k=D(r-i>>2,9);h=10;l=x[i>>2];if(l>>>0<10){break j}while(1){k=k+1|0;h=D(h,10);if(l>>>0>=h>>>0){continue}break}}d=d+4|0;g=d>>>0<g>>>0?d:g}while(1){l=g;h=g>>>0<=i>>>0;if(!h){g=l-4|0;if(!x[g>>2]){continue}}break}l:{if((t|0)!=103){q=e&8;break l}g=m?m:1;d=(g|0)>(k|0)&(k|0)>-5;m=(d?k^-1:-1)+g|0;f=(d?-1:-2)+f|0;q=e&8;if(q){break l}g=-9;m:{if(h){break m}p=x[l-4>>2];if(!p){break m}d=10;g=0;if((p>>>0)%10|0){break m}while(1){h=g;g=g+1|0;d=D(d,10);if(!((p>>>0)%(d>>>0)|0)){continue}break}g=h^-1}d=D(l-r>>2,9);if((f&-33)==70){q=0;d=(d+g|0)-9|0;d=(d|0)>0?d:0;m=(d|0)>(m|0)?m:d;break l}q=0;d=((d+k|0)+g|0)-9|0;d=(d|0)>0?d:0;m=(d|0)>(m|0)?m:d}t=-1;p=m|q;if(((p?2147483645:2147483646)|0)<(m|0)){break b}s=(((p|0)!=0)+m|0)+1|0;h=f&-33;n:{if((h|0)==70){if((s^2147483647)<(k|0)){break b}g=(k|0)>0?k:0;break n}d=k>>31;g=Cc((d^k)-d|0,0,A);if((A-g|0)<=1){while(1){g=g-1|0;v[g|0]=48;if((A-g|0)<2){continue}break}}w=g-2|0;v[w|0]=f;v[g-1|0]=(k|0)<0?45:43;g=A-w|0;if((g|0)>(s^2147483647)){break b}}d=g+s|0;if((d|0)>(u^2147483647)){break b}B=d+u|0;Db(a,32,c,B,e);zb(a,C,u);Db(a,48,c,B,e^65536);o:{p:{q:{if((h|0)==70){f=n+16|0;d=f|8;s=f|9;h=i>>>0>r>>>0?r:i;i=h;while(1){g=Cc(x[i>>2],0,s);r:{if((h|0)!=(i|0)){if(n+16>>>0>=g>>>0){break r}while(1){g=g-1|0;v[g|0]=48;if(n+16>>>0<g>>>0){continue}break}break r}if((g|0)!=(s|0)){break r}v[n+24|0]=48;g=d}zb(a,g,s-g|0);i=i+4|0;if(r>>>0>=i>>>0){continue}break}if(p){zb(a,2703,1)}if((m|0)<=0|i>>>0>=l>>>0){break q}while(1){g=Cc(x[i>>2],0,s);if(g>>>0>n+16>>>0){while(1){g=g-1|0;v[g|0]=48;if(n+16>>>0<g>>>0){continue}break}}zb(a,g,(m|0)>=9?9:m);g=m-9|0;i=i+4|0;if(l>>>0<=i>>>0){break p}d=(m|0)>9;m=g;if(d){continue}break}break p}s:{if((m|0)<0){break s}r=i>>>0<l>>>0?l:i+4|0;f=n+16|0;d=f|8;l=f|9;h=i;while(1){g=Cc(x[h>>2],0,l);if((l|0)==(g|0)){v[n+24|0]=48;g=d}t:{if((h|0)!=(i|0)){if(n+16>>>0>=g>>>0){break t}while(1){g=g-1|0;v[g|0]=48;if(n+16>>>0<g>>>0){continue}break}break t}zb(a,g,1);g=g+1|0;if(!(m|q)){break t}zb(a,2703,1)}f=l-g|0;zb(a,g,(f|0)>(m|0)?m:f);m=m-f|0;h=h+4|0;if(r>>>0<=h>>>0){break s}if((m|0)>=0){continue}break}}Db(a,48,m+18|0,18,0);zb(a,w,A-w|0);break o}g=m}Db(a,48,g+9|0,9,0)}Db(a,32,c,B,e^8192);t=(c|0)<(B|0)?B:c;break b}l=(f<<26>>31&9)+C|0;u:{if(d>>>0>11){break u}g=12-d|0;z=16;while(1){z=z*16;g=g-1|0;if(g){continue}break}if(y[l|0]==45){b=-(z+(-b-z));break u}b=b+z-z}g=x[n+44>>2];h=g>>31;g=Cc((g^h)-h|0,0,A);if((A|0)==(g|0)){v[n+15|0]=48;g=n+15|0}r=u|2;i=f&32;h=x[n+44>>2];m=g-2|0;v[m|0]=f+15;v[g-1|0]=(h|0)<0?45:43;g=e&8;h=n+16|0;while(1){f=h;if(F(b)<2147483648){p=~~b}else{p=-2147483648}v[h|0]=i|y[p+6032|0];b=(b-+(p|0))*16;h=f+1|0;if(!(!((d|0)>0|g)&b==0|(h-(n+16|0)|0)!=1)){v[f+1|0]=46;h=f+2|0}if(b!=0){continue}break}t=-1;g=A-m|0;f=g+r|0;if((2147483645-f|0)<(d|0)){break b}v:{w:{if(!d){break w}i=h-(n+16|0)|0;if((i-2|0)>=(d|0)){break w}d=d+2|0;break v}i=h-(n+16|0)|0;d=i}f=d+f|0;Db(a,32,c,f,e);zb(a,l,r);Db(a,48,c,f,e^65536);zb(a,n+16|0,i);Db(a,48,d-i|0,0,0);zb(a,m,g);Db(a,32,c,f,e^8192);t=(c|0)<(f|0)?f:c}Wa=n+560|0;return t|0}function ng(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,z=0,A=0,B=0,E=0;h=Wa-80|0;Wa=h;x[h+76>>2]=b;A=h+55|0;q=h+56|0;a:{b:{c:{d:{e:while(1){i=b;if((n^2147483647)<(f|0)){break d}n=f+n|0;f:{g:{h:{f=i;g=y[f|0];if(g){while(1){i:{b=g&255;j:{if(!b){b=f;break j}if((b|0)!=37){break i}g=f;while(1){if(y[g+1|0]!=37){b=g;break j}f=f+1|0;k=y[g+2|0];b=g+2|0;g=b;if((k|0)==37){continue}break}}f=f-i|0;z=n^2147483647;if((f|0)>(z|0)){break d}if(a){zb(a,i,f)}if(f){continue e}x[h+76>>2]=b;f=b+1|0;o=-1;if(!(y[b+2|0]!=36|v[b+1|0]-48>>>0>=10)){o=v[b+1|0]-48|0;s=1;f=b+3|0}x[h+76>>2]=f;l=0;g=v[f|0];b=g-32|0;k:{if(b>>>0>31){m=f;break k}m=f;b=1<<b;if(!(b&75913)){break k}while(1){m=f+1|0;x[h+76>>2]=m;l=b|l;g=v[f+1|0];b=g-32|0;if(b>>>0>=32){break k}f=m;b=1<<b;if(b&75913){continue}break}}l:{if((g|0)==42){m:{if(!(y[m+2|0]!=36|v[m+1|0]-48>>>0>=10)){x[((v[m+1|0]<<2)+e|0)-192>>2]=10;g=m+3|0;s=1;b=x[((v[m+1|0]<<3)+d|0)-384>>2];break m}if(s){break h}g=m+1|0;if(!a){x[h+76>>2]=g;s=0;p=0;break l}b=x[c>>2];x[c>>2]=b+4;s=0;b=x[b>>2]}x[h+76>>2]=g;p=b;if((b|0)>=0){break l}p=0-p|0;l=l|8192;break l}p=mg(h+76|0);if((p|0)<0){break d}g=x[h+76>>2]}f=0;j=-1;n:{if(y[g|0]!=46){b=g;u=0;break n}if(y[g+1|0]==42){o:{if(!(y[g+3|0]!=36|v[g+2|0]-48>>>0>=10)){x[((v[g+2|0]<<2)+e|0)-192>>2]=10;b=g+4|0;j=x[((v[g+2|0]<<3)+d|0)-384>>2];break o}if(s){break h}b=g+2|0;j=0;if(!a){break o}g=x[c>>2];x[c>>2]=g+4;j=x[g>>2]}x[h+76>>2]=b;u=(j^-1)>>>31|0;break n}x[h+76>>2]=g+1;j=mg(h+76|0);b=x[h+76>>2];u=1}while(1){r=f;m=28;k=b;f=v[b|0];if(f-123>>>0<4294967238){break c}b=k+1|0;f=y[(f+D(r,58)|0)+5503|0];if(f-1>>>0<8){continue}break}x[h+76>>2]=b;p:{q:{if((f|0)!=27){if(!f){break c}if((o|0)>=0){x[(o<<2)+e>>2]=f;g=(o<<3)+d|0;f=x[g+4>>2];x[h+64>>2]=x[g>>2];x[h+68>>2]=f;break q}if(!a){break f}lg(h- -64|0,f,c);break p}if((o|0)>=0){break c}}f=0;if(!a){continue e}}g=l&-65537;l=l&8192?g:l;o=0;t=1125;m=q;r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{B:{C:{D:{E:{F:{G:{f=v[k|0];f=r?(f&15)==3?f&-33:f:f;switch(f-88|0){case 11:break r;case 9:case 13:case 14:case 15:break s;case 27:break x;case 12:case 17:break A;case 23:break B;case 0:case 32:break C;case 24:break D;case 22:break E;case 29:break F;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break g;default:break G}}H:{switch(f-65|0){case 0:case 4:case 5:case 6:break s;case 2:break v;case 1:case 3:break g;default:break H}}if((f|0)==83){break w}break g}g=x[h+64>>2];k=x[h+68>>2];t=1125;break z}f=0;I:{switch(r&255){case 0:x[x[h+64>>2]>>2]=n;continue e;case 1:x[x[h+64>>2]>>2]=n;continue e;case 2:i=x[h+64>>2];x[i>>2]=n;x[i+4>>2]=n>>31;continue e;case 3:w[x[h+64>>2]>>1]=n;continue e;case 4:v[x[h+64>>2]]=n;continue e;case 6:x[x[h+64>>2]>>2]=n;continue e;case 7:break I;default:continue e}}i=x[h+64>>2];x[i>>2]=n;x[i+4>>2]=n>>31;continue e}j=j>>>0<=8?8:j;l=l|8;f=120}i=q;B=f&32;g=x[h+64>>2];k=x[h+68>>2];if(g|k){while(1){i=i-1|0;v[i|0]=B|y[(g&15)+6032|0];E=!k&g>>>0>15|(k|0)!=0;r=k;k=k>>>4|0;g=(r&15)<<28|g>>>4;if(E){continue}break}}if(!(x[h+64>>2]|x[h+68>>2])|!(l&8)){break y}t=(f>>>4|0)+1125|0;o=2;break y}f=q;i=x[h+68>>2];k=i;g=x[h+64>>2];if(i|g){while(1){f=f-1|0;v[f|0]=g&7|48;r=!k&g>>>0>7|(k|0)!=0;i=k;k=i>>>3|0;g=(i&7)<<29|g>>>3;if(r){continue}break}}i=f;if(!(l&8)){break y}f=q-i|0;j=(f|0)<(j|0)?j:f+1|0;break y}g=x[h+64>>2];f=x[h+68>>2];k=f;if((f|0)<0){i=0-(k+((g|0)!=0)|0)|0;k=i;g=0-g|0;x[h+64>>2]=g;x[h+68>>2]=i;o=1;t=1125;break z}if(l&2048){o=1;t=1126;break z}o=l&1;t=o?1127:1125}i=Cc(g,k,q)}if((j|0)<0?u:0){break d}l=u?l&-65537:l;f=x[h+64>>2];g=x[h+68>>2];if(!(j|(f|g)!=0)){i=q;j=0;break g}f=!(f|g)+(q-i|0)|0;j=(f|0)<(j|0)?j:f;break g}f=x[h+64>>2];i=f?f:2714;k=j>>>0>=2147483647?2147483647:j;f=de(i,0,k);f=f?f-i|0:k;m=f+i|0;if((j|0)>=0){l=g;j=f;break g}l=g;j=f;if(y[m|0]){break d}break g}if(j){g=x[h+64>>2];break u}f=0;Db(a,32,p,0,l);break t}x[h+12>>2]=0;x[h+8>>2]=x[h+64>>2];g=h+8|0;x[h+64>>2]=g;j=-1}f=0;J:{while(1){i=x[g>>2];if(!i){break J}k=pg(h+4|0,i);i=(k|0)<0;if(!(i|k>>>0>j-f>>>0)){g=g+4|0;f=f+k|0;if(j>>>0>f>>>0){continue}break J}break}if(i){break b}}m=61;if((f|0)<0){break c}Db(a,32,p,f,l);if(!f){f=0;break t}m=0;g=x[h+64>>2];while(1){i=x[g>>2];if(!i){break t}i=pg(h+4|0,i);m=i+m|0;if(m>>>0>f>>>0){break t}zb(a,h+4|0,i);g=g+4|0;if(f>>>0>m>>>0){continue}break}}Db(a,32,p,f,l^8192);f=(f|0)<(p|0)?p:f;continue e}if((j|0)<0?u:0){break d}m=61;f=kg(a,C[h+64>>3],p,j,l,f);if((f|0)>=0){continue e}break c}v[h+55|0]=x[h+64>>2];j=1;i=A;l=g;break g}g=y[f+1|0];f=f+1|0;continue}}if(a){break a}if(!s){break f}f=1;while(1){a=x[(f<<2)+e>>2];if(a){lg((f<<3)+d|0,a,c);n=1;f=f+1|0;if((f|0)!=10){continue}break a}break}n=1;if(f>>>0>=10){break a}while(1){if(x[(f<<2)+e>>2]){break h}f=f+1|0;if((f|0)!=10){continue}break}break a}m=28;break c}k=m-i|0;g=(j|0)>(k|0)?j:k;if((g|0)>(o^2147483647)){break d}m=61;j=g+o|0;f=(j|0)<(p|0)?p:j;if((z|0)<(f|0)){break c}Db(a,32,f,j,l);zb(a,t,o);Db(a,48,f,j,l^65536);Db(a,48,g,k,0);zb(a,i,k);Db(a,32,f,j,l^8192);continue}break}n=0;break a}m=61}x[4995]=m}n=-1}Wa=h+80|0;return n}function Aj(){var a=0,b=0,c=0;if(y[20940]){return x[5234]}if(y[20928]){a=x[5231]}else{x[5643]=0;x[5642]=16040;x[5642]=10880;x[5642]=9400;x[5120]=0;b=T(223,22576,30)|0;a=x[5120];x[5120]=0;a:{b:{c:{d:{e:{if((a|0)!=1){x[5120]=0;c=T(224,22720,2043)|0;a=x[5120];x[5120]=0;if((a|0)==1){break e}sf(b);x[5561]=0;x[5560]=16040;x[5560]=10880;x[5560]=11988;x[5120]=0;S(225,22568,22240);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5563]=0;x[5562]=16040;x[5562]=10880;x[5562]=12020;x[5120]=0;S(226,22568,22248);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;kf();a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(228,22568,22256);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5569]=0;x[5568]=16040;x[5568]=10880;x[5568]=10936;x[5120]=0;S(229,22568,22272);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5571]=0;x[5570]=16040;x[5570]=10880;x[5570]=11084;x[5120]=0;S(230,22568,22280);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;X(231);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(232,22568,22288);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5577]=0;x[5576]=16040;x[5576]=10880;x[5576]=11232;x[5120]=0;S(233,22568,22304);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5579]=0;x[5578]=16040;x[5578]=10880;x[5578]=11464;x[5120]=0;S(234,22568,22312);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5581]=0;x[5580]=16040;x[5580]=10880;x[5580]=11348;x[5120]=0;S(235,22568,22320);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5583]=0;x[5582]=16040;x[5582]=10880;x[5582]=11580;x[5120]=0;S(236,22568,22328);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;X(237);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(238,22568,22336);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;X(239);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(240,22568,22360);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5599]=0;x[5598]=16040;x[5598]=10880;x[5598]=12052;x[5120]=0;S(241,22568,22392);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5601]=0;x[5600]=16040;x[5600]=10880;x[5600]=12296;x[5120]=0;S(242,22568,22400);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5603]=0;x[5602]=16040;x[5602]=10880;x[5602]=12508;x[5120]=0;S(243,22568,22408);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5605]=0;x[5604]=16040;x[5604]=10880;x[5604]=12740;x[5120]=0;S(244,22568,22416);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5607]=0;x[5606]=16040;x[5606]=10880;x[5606]=13724;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(246,22568,22424);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5609]=0;x[5608]=16040;x[5608]=10880;x[5608]=13872;x[5120]=0;S(247,22568,22432);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5611]=0;x[5610]=16040;x[5610]=10880;x[5610]=13988;x[5120]=0;S(248,22568,22440);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5613]=0;x[5612]=16040;x[5612]=10880;x[5612]=14104;x[5120]=0;S(249,22568,22448);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5615]=0;x[5614]=16040;x[5614]=10880;x[5614]=14220;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(251,22568,22456);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5617]=0;x[5616]=16040;x[5616]=10880;x[5616]=14384;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(253,22568,22464);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5619]=0;x[5618]=16040;x[5618]=10880;x[5618]=14548;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(255,22568,22472);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5621]=0;x[5620]=16040;x[5620]=10880;x[5620]=14712;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(257,22568,22480);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5623]=0;x[5622]=16040;x[5622]=10880;x[5624]=15968;x[5622]=12940;x[5624]=12988;x[5120]=0;S(258,22568,22488);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5627]=0;x[5626]=16040;x[5626]=10880;x[5628]=16004;x[5626]=13204;x[5628]=13252;x[5120]=0;S(259,22568,22504);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;X(260);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(261,22568,22520);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;X(262);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(263,22568,22536);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;x[5639]=0;x[5638]=16040;x[5638]=10880;x[5638]=14876;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;S(265,22568,22552);a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5641]=0;x[5640]=16040;x[5640]=10880;x[5640]=14996;x[5120]=0;S(266,22568,22560);a=x[5120];x[5120]=0;if((a|0)==1){break d}break a}a=P()|0;break b}a=P()|0;break c}a=P()|0;cb(c)}uf(b)}R(a|0);p()}x[5230]=22568;v[20928]=1;x[5231]=20920;a=20920}b=x[a>>2];x[5233]=b;x[b+4>>2]=x[b+4>>2]+1;v[20940]=1;x[5234]=20932;return 20932}function Yk(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0;h=Wa+-64|0;Wa=h;x[h+56>>2]=b;x[e>>2]=0;i=x[d+28>>2];x[h>>2]=i;x[i+4>>2]=x[i+4>>2]+1;x[5120]=0;i=Q(159,h|0)|0;j=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{if((j|0)!=1){j=x[h>>2];k=x[j+4>>2]-1|0;x[j+4>>2]=k;if((k|0)==-1){Za[x[x[j>>2]+8>>2]](j)}switch(g-65|0){case 54:break j;case 19:break k;case 18:break l;case 17:break m;case 49:break n;case 47:break o;case 45:case 51:break p;case 12:break q;case 44:break r;case 41:break s;case 8:break t;case 7:break u;case 5:break v;case 3:break w;case 35:case 36:break x;case 34:break y;case 1:case 33:case 39:break z;case 0:case 32:break A;case 2:case 4:case 6:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 20:case 21:case 22:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 37:case 38:case 40:case 42:case 43:case 46:case 48:case 50:case 52:case 53:break d;case 24:break f;case 56:break g;case 23:break h;case 55:break i;default:break e}}c=P()|0;a=x[h>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}Pf(a,f+24|0,h+56|0,c,e,i);break b}Of(a,f+16|0,h+56|0,c,e,i);break b}g=a;i=b;a=Za[x[x[a+8>>2]+12>>2]](a+8|0)|0;B:{if(y[a+11|0]>>>7|0){b=x[a>>2];break B}b=a}j=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[h+56>>2]=$b(g,i,c,d,e,f,j,b+(a<<2)|0);break b}a=Wb(h+56|0,c,e,i,2);b=x[e>>2];C:{if(!(a-1>>>0>30|b&4)){x[f+12>>2]=a;break C}x[e>>2]=b|4}break b}g=x[2311];x[h+24>>2]=x[2310];x[h+28>>2]=g;g=x[2309];x[h+16>>2]=x[2308];x[h+20>>2]=g;g=x[2307];x[h+8>>2]=x[2306];x[h+12>>2]=g;g=x[2305];x[h>>2]=x[2304];x[h+4>>2]=g;x[h+56>>2]=$b(a,b,c,d,e,f,h,h+32|0);break b}g=x[2319];x[h+24>>2]=x[2318];x[h+28>>2]=g;g=x[2317];x[h+16>>2]=x[2316];x[h+20>>2]=g;g=x[2315];x[h+8>>2]=x[2314];x[h+12>>2]=g;g=x[2313];x[h>>2]=x[2312];x[h+4>>2]=g;x[h+56>>2]=$b(a,b,c,d,e,f,h,h+32|0);break b}a=Wb(h+56|0,c,e,i,2);b=x[e>>2];D:{if(!((a|0)>23|b&4)){x[f+8>>2]=a;break D}x[e>>2]=b|4}break b}a=Wb(h+56|0,c,e,i,2);b=x[e>>2];E:{if(!(a-1>>>0>11|b&4)){x[f+8>>2]=a;break E}x[e>>2]=b|4}break b}a=Wb(h+56|0,c,e,i,3);b=x[e>>2];F:{if(!((a|0)>365|b&4)){x[f+28>>2]=a;break F}x[e>>2]=b|4}break b}b=Wb(h+56|0,c,e,i,2)-1|0;a=x[e>>2];G:{if(!(b>>>0>11|a&4)){x[f+16>>2]=b;break G}x[e>>2]=a|4}break b}a=Wb(h+56|0,c,e,i,2);b=x[e>>2];H:{if(!((a|0)>59|b&4)){x[f+4>>2]=a;break H}x[e>>2]=b|4}break b}a=h+56|0;b=Wa-16|0;Wa=b;x[b+8>>2]=c;while(1){I:{if(Pb(a,b+8|0)){break I}c=x[a>>2];d=x[c+12>>2];J:{if((d|0)==x[c+16>>2]){c=Za[x[x[c>>2]+36>>2]](c)|0;break J}c=x[d>>2]}if(!(Za[x[x[i>>2]+12>>2]](i,1,c)|0)){break I}Fc(a);continue}break}if(Pb(a,b+8|0)){x[e>>2]=x[e>>2]|2}Wa=b+16|0;break b}g=h+56|0;b=Za[x[x[a+8>>2]+8>>2]](a+8|0)|0;K:{if(y[b+11|0]>>>7|0){a=x[b+4>>2];break K}a=y[b+11|0]&127}if(y[b+23|0]>>>7|0){d=x[b+16>>2]}else{d=y[b+23|0]&127}L:{if((a|0)==(0-d|0)){x[e>>2]=x[e>>2]|4;break L}c=md(g,c,b,b+24|0,i,e,0);a=x[f+8>>2];if(!((c|0)!=(b|0)|(a|0)!=12)){x[f+8>>2]=0;break L}if(!((c-b|0)!=12|(a|0)>11)){x[f+8>>2]=a+12}}break b}g=ub(h,9280,44);x[g+56>>2]=$b(a,b,c,d,e,f,g,g+44|0);break b}x[h+16>>2]=x[2336];g=x[2335];x[h+8>>2]=x[2334];x[h+12>>2]=g;g=x[2333];x[h>>2]=x[2332];x[h+4>>2]=g;x[h+56>>2]=$b(a,b,c,d,e,f,h,h+20|0);break b}a=Wb(h+56|0,c,e,i,2);b=x[e>>2];M:{if(!((a|0)>60|b&4)){x[f>>2]=a;break M}x[e>>2]=b|4}break b}g=x[2347];x[h+24>>2]=x[2346];x[h+28>>2]=g;g=x[2345];x[h+16>>2]=x[2344];x[h+20>>2]=g;g=x[2343];x[h+8>>2]=x[2342];x[h+12>>2]=g;g=x[2341];x[h>>2]=x[2340];x[h+4>>2]=g;x[h+56>>2]=$b(a,b,c,d,e,f,h,h+32|0);break b}a=Wb(h+56|0,c,e,i,1);b=x[e>>2];N:{if(!((a|0)>6|b&4)){x[f+24>>2]=a;break N}x[e>>2]=b|4}break b}a=Za[x[x[a>>2]+20>>2]](a,b,c,d,e,f)|0;break a}g=a;i=b;a=Za[x[x[a+8>>2]+24>>2]](a+8|0)|0;O:{if(y[a+11|0]>>>7|0){b=x[a>>2];break O}b=a}j=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[h+56>>2]=$b(g,i,c,d,e,f,j,b+(a<<2)|0);break b}Nf(f+20|0,h+56|0,c,e,i);break b}a=Wb(h+56|0,c,e,i,4);if(!(y[e|0]&4)){x[f+20>>2]=a-1900}break b}if((g|0)==37){break c}}x[e>>2]=x[e>>2]|4;break b}a=Wa-16|0;Wa=a;x[a+8>>2]=c;b=6;d=h+56|0;P:{Q:{if(Pb(d,a+8|0)){break Q}b=4;c=x[d>>2];f=x[c+12>>2];R:{if((f|0)==x[c+16>>2]){c=Za[x[x[c>>2]+36>>2]](c)|0;break R}c=x[f>>2]}if((Za[x[x[i>>2]+52>>2]](i,c,0)|0)!=37){break Q}b=2;if(!Pb(Fc(d),a+8|0)){break P}}x[e>>2]=x[e>>2]|b}Wa=a+16|0}a=x[h+56>>2]}Wa=h- -64|0;return a|0}function mb(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;k=Wa-96|0;Wa=k;u=i&65535;o=(e^i)&-2147483648;q=e&65535;A=q;R=i>>>16&32767;S=e>>>16&32767;a:{b:{if(R-32767>>>0>4294934529&S-32767>>>0>=4294934530){break b}s=e&2147483647;r=s;j=d;if(!(!d&(r|0)==2147418112?!(b|c):r>>>0<2147418112)){m=d;o=e|32768;break a}s=i&2147483647;p=s;e=h;if(!(!e&(p|0)==2147418112?!(f|g):p>>>0<2147418112)){m=h;o=i|32768;b=f;c=g;break a}if(!(b|j|(r^2147418112|c))){if(!(e|f|(g|p))){o=2147450880;b=0;c=0;break a}o=o|2147418112;b=0;c=0;break a}if(!(e|f|(p^2147418112|g))){e=b|j;d=c|r;b=0;c=0;if(!(d|e)){o=2147450880;break a}o=o|2147418112;break a}if(!(b|j|(c|r))){b=0;c=0;break a}if(!(e|f|(g|p))){b=0;c=0;break a}if((r|0)==65535|r>>>0<65535){j=!(d|q);i=j?b:d;s=j<<6;e=G(i)+32|0;i=G(j?c:q);i=s+((i|0)==32?e:i)|0;Eb(k+80|0,b,c,d,q,i-15|0);t=16-i|0;d=x[k+88>>2];A=x[k+92>>2];c=x[k+84>>2];b=x[k+80>>2]}if(p>>>0>65535){break b}i=!(h|u);e=i?f:h;q=i<<6;j=G(e)+32|0;e=G(i?g:u);e=q+((e|0)==32?j:e)|0;Eb(k- -64|0,f,g,h,u,e-15|0);t=(t-e|0)+16|0;h=x[k+72>>2];u=x[k+76>>2];f=x[k+64>>2];g=x[k+68>>2]}e=f;f=g<<15|f>>>17;i=e<<15;e=0;v=i&-32768;L=c;s=Gn(v,e,c,0);e=Ya;z=e;M=f;r=b;b=Gn(f,0,b,0);i=b+s|0;f=Ya+e|0;c=b>>>0>i>>>0?f+1|0:f;j=0;b=Gn(r,l,v,l);p=j+b|0;f=i;e=f+Ya|0;e=b>>>0>p>>>0?e+1|0:e;q=e;N=(f|0)==(e|0)&j>>>0>p>>>0|e>>>0<f>>>0;O=d;w=Gn(v,l,d,0);P=Ya;b=Gn(L,l,M,l);y=b+w|0;j=Ya+P|0;j=b>>>0>y>>>0?j+1|0:j;b=u<<15|h>>>17;B=h<<15|g>>>17;d=Gn(B,0,r,l);C=d+y|0;f=Ya+j|0;f=d>>>0>C>>>0?f+1|0:f;D=f;d=(c|0)==(z|0)&i>>>0<s>>>0|c>>>0<z>>>0;E=c+C|0;f=d+f|0;f=c>>>0>E>>>0?f+1|0:f;u=f;g=E;c=f;F=A|65536;A=Gn(v,l,F,n);Q=Ya;d=Gn(O,m,M,l);H=d+A|0;e=Ya+Q|0;e=d>>>0>H>>>0?e+1|0:e;i=e;I=b|-2147483648;b=Gn(I,0,r,l);J=b+H|0;f=Ya+e|0;f=b>>>0>J>>>0?f+1|0:f;b=Gn(B,m,L,l);z=b+J|0;K=f;f=f+Ya|0;s=b>>>0>z>>>0?f+1|0:f;b=0;r=b+g|0;e=c+z|0;v=b>>>0>r>>>0?e+1|0:e;f=v;b=r+N|0;c=b>>>0<r>>>0?f+1|0:f;t=((S+R|0)+t|0)-16383|0;d=Gn(I,m,L,l);h=Ya;e=Gn(F,m,M,l);g=e+d|0;f=Ya+h|0;f=e>>>0>g>>>0?f+1|0:f;n=(h|0)==(f|0)&d>>>0>g>>>0|f>>>0<h>>>0;h=f;e=Gn(B,m,O,m);d=e+g|0;f=Ya+f|0;f=d>>>0<e>>>0?f+1|0:f;e=f;g=(f|0)==(h|0)&d>>>0<g>>>0|f>>>0<h>>>0;f=0;h=g;g=g+n|0;f=h>>>0>g>>>0?1:f;h=g;g=Gn(I,m,F,m);h=h+g|0;f=Ya+f|0;N=h;g=g>>>0>h>>>0?f+1|0:f;h=d;l=e;e=(j|0)==(P|0)&w>>>0>y>>>0|j>>>0<P>>>0;f=0;j=(j|0)==(D|0)&y>>>0>C>>>0|j>>>0>D>>>0;n=j;j=e+j|0;e=(n>>>0>j>>>0?1:f)+l|0;f=g;d=d+j|0;e=d>>>0<j>>>0?e+1|0:e;n=e;w=d;d=(e|0)==(l|0)&d>>>0<h>>>0|e>>>0<l>>>0;e=d;d=d+N|0;f=e>>>0>d>>>0?f+1|0:f;j=d;g=f;e=Gn(B,m,F,m);l=Ya;d=Gn(I,m,O,m);h=d+e|0;f=Ya+l|0;f=d>>>0>h>>>0?f+1|0:f;d=f;f=(l|0)==(f|0)&e>>>0>h>>>0|f>>>0<l>>>0;y=d+j|0;e=f+g|0;e=d>>>0>y>>>0?e+1|0:e;l=y;g=e;e=0;d=e+w|0;f=h+n|0;f=d>>>0<e>>>0?f+1|0:f;e=f;h=(n|0)==(f|0)&d>>>0<w>>>0|f>>>0<n>>>0;f=g;g=h+l|0;f=g>>>0<h>>>0?f+1|0:f;w=g;g=f;h=d;j=e;e=(s|0)==(K|0)&z>>>0<J>>>0|s>>>0<K>>>0;d=(i|0)==(Q|0)&A>>>0>H>>>0|i>>>0<Q>>>0;i=(i|0)==(K|0)&H>>>0>J>>>0|i>>>0>K>>>0;d=d+i|0;d=d+e|0;n=s;i=n+h|0;e=d+j|0;f=g;d=i;e=d>>>0<n>>>0?e+1|0:e;h=(e|0)==(j|0)&h>>>0>d>>>0|e>>>0<j>>>0;g=h+w|0;f=h>>>0>g>>>0?f+1|0:f;j=g;g=f;h=d;f=0;i=e;n=(u|0)==(v|0)&r>>>0<E>>>0|u>>>0>v>>>0;l=n;n=n+((u|0)==(D|0)&C>>>0>E>>>0|u>>>0<D>>>0)|0;e=e+(l>>>0>n>>>0?1:f)|0;f=g;d=d+n|0;e=d>>>0<n>>>0?e+1|0:e;h=(e|0)==(i|0)&d>>>0<h>>>0|e>>>0<i>>>0;g=h;h=h+j|0;f=g>>>0>h>>>0?f+1|0:f;i=f;c:{if(f&65536){t=t+1|0;break c}j=q>>>31|0;g=0;f=i<<1|h>>>31;h=h<<1|e>>>31;i=f;f=e<<1|d>>>31;d=d<<1|c>>>31;e=f;f=q<<1|p>>>31;p=p<<1;q=f;f=c<<1|b>>>31;b=b<<1|j;c=f|g}if((t|0)>=32767){o=o|2147418112;b=0;c=0;break a}d:{if((t|0)<=0){g=1-t|0;if(g>>>0>=128){b=0;c=0;break a}f=t+127|0;Eb(k+48|0,p,q,b,c,f);Eb(k+32|0,d,e,h,i,f);rc(k+16|0,p,q,b,c,g);rc(k,d,e,h,i,g);p=x[k+32>>2]|x[k+16>>2]|(x[k+48>>2]|x[k+56>>2]|(x[k+52>>2]|x[k+60>>2]))!=0;q=x[k+36>>2]|x[k+20>>2];b=x[k+40>>2]|x[k+24>>2];c=x[k+44>>2]|x[k+28>>2];d=x[k>>2];e=x[k+4>>2];g=x[k+8>>2];f=x[k+12>>2];break d}g=h;f=i&65535|t<<16}m=g|m;o=f|o;if(!(!b&(c|0)==-2147483648?!(p|q):(c|0)>0|(c|0)>=0)){b=d+1|0;c=b?e:e+1|0;d=(e|0)==(c|0)&b>>>0<d>>>0|c>>>0<e>>>0;e=o;m=d+m|0;o=m>>>0<d>>>0?e+1|0:e;break a}if(b|p|(c^-2147483648|q)){b=d;c=e;break a}j=o;f=e;b=d&1;c=b;b=b+d|0;c=c>>>0>b>>>0?f+1|0:f;d=(f|0)==(c|0)&b>>>0<d>>>0|c>>>0<f>>>0;m=d+m|0;o=d>>>0>m>>>0?j+1|0:j}x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=m;x[a+12>>2]=o;Wa=k+96|0}function dl(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0;h=Wa-32|0;Wa=h;x[h+24>>2]=b;x[e>>2]=0;j=h+8|0;i=x[d+28>>2];x[j>>2]=i;x[i+4>>2]=x[i+4>>2]+1;x[5120]=0;i=Q(61,j|0)|0;j=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{r:{s:{t:{u:{v:{w:{x:{y:{z:{A:{if((j|0)!=1){j=x[h+8>>2];k=x[j+4>>2]-1|0;x[j+4>>2]=k;if((k|0)==-1){Za[x[x[j>>2]+8>>2]](j)}switch(g-65|0){case 54:break j;case 19:break k;case 18:break l;case 17:break m;case 49:break n;case 47:break o;case 45:case 51:break p;case 12:break q;case 44:break r;case 41:break s;case 8:break t;case 7:break u;case 5:break v;case 3:break w;case 35:case 36:break x;case 34:break y;case 1:case 33:case 39:break z;case 0:case 32:break A;case 2:case 4:case 6:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 20:case 21:case 22:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 37:case 38:case 40:case 42:case 43:case 46:case 48:case 50:case 52:case 53:break d;case 24:break f;case 56:break g;case 23:break h;case 55:break i;default:break e}}c=P()|0;a=x[h+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}Sf(a,f+24|0,h+24|0,c,e,i);break b}Rf(a,f+16|0,h+24|0,c,e,i);break b}g=a;i=b;a=Za[x[x[a+8>>2]+12>>2]](a+8|0)|0;B:{if(y[a+11|0]>>>7|0){b=x[a>>2];break B}b=a}j=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[h+24>>2]=ac(g,i,c,d,e,f,j,b+a|0);break b}a=Xb(h+24|0,c,e,i,2);b=x[e>>2];C:{if(!(a-1>>>0>30|b&4)){x[f+12>>2]=a;break C}x[e>>2]=b|4}break b}x[h+8>>2]=623865125;x[h+12>>2]=2032480100;x[h+24>>2]=ac(a,b,c,d,e,f,h+8|0,h+16|0);break b}x[h+8>>2]=623728933;x[h+12>>2]=1680158061;x[h+24>>2]=ac(a,b,c,d,e,f,h+8|0,h+16|0);break b}a=Xb(h+24|0,c,e,i,2);b=x[e>>2];D:{if(!((a|0)>23|b&4)){x[f+8>>2]=a;break D}x[e>>2]=b|4}break b}a=Xb(h+24|0,c,e,i,2);b=x[e>>2];E:{if(!(a-1>>>0>11|b&4)){x[f+8>>2]=a;break E}x[e>>2]=b|4}break b}a=Xb(h+24|0,c,e,i,3);b=x[e>>2];F:{if(!((a|0)>365|b&4)){x[f+28>>2]=a;break F}x[e>>2]=b|4}break b}b=Xb(h+24|0,c,e,i,2)-1|0;a=x[e>>2];G:{if(!(b>>>0>11|a&4)){x[f+16>>2]=b;break G}x[e>>2]=a|4}break b}a=Xb(h+24|0,c,e,i,2);b=x[e>>2];H:{if(!((a|0)>59|b&4)){x[f+4>>2]=a;break H}x[e>>2]=b|4}break b}a=h+24|0;b=Wa-16|0;Wa=b;x[b+8>>2]=c;while(1){I:{if(Qb(a,b+8|0)){break I}c=x[a>>2];d=x[c+12>>2];J:{if((d|0)==x[c+16>>2]){c=Za[x[x[c>>2]+36>>2]](c)|0;break J}c=y[d|0]}c=c<<24>>24;if((c|0)>=0){c=x[x[i+8>>2]+((c&255)<<2)>>2]&1}else{c=0}if(!c){break I}Gc(a);continue}break}if(Qb(a,b+8|0)){x[e>>2]=x[e>>2]|2}Wa=b+16|0;break b}g=h+24|0;b=Za[x[x[a+8>>2]+8>>2]](a+8|0)|0;K:{if(y[b+11|0]>>>7|0){a=x[b+4>>2];break K}a=y[b+11|0]&127}if(y[b+23|0]>>>7|0){d=x[b+16>>2]}else{d=y[b+23|0]&127}L:{if((a|0)==(0-d|0)){x[e>>2]=x[e>>2]|4;break L}c=od(g,c,b,b+24|0,i,e,0);a=x[f+8>>2];if(!((c|0)!=(b|0)|(a|0)!=12)){x[f+8>>2]=0;break L}if(!((c-b|0)!=12|(a|0)>11)){x[f+8>>2]=a+12}}break b}g=y[9192]|y[9193]<<8|(y[9194]<<16|y[9195]<<24);v[h+15|0]=g;v[h+16|0]=g>>>8;v[h+17|0]=g>>>16;v[h+18|0]=g>>>24;g=y[9189]|y[9190]<<8|(y[9191]<<16|y[9192]<<24);x[h+8>>2]=y[9185]|y[9186]<<8|(y[9187]<<16|y[9188]<<24);x[h+12>>2]=g;x[h+24>>2]=ac(a,b,c,d,e,f,h+8|0,h+19|0);break b}v[h+12|0]=y[9200];x[h+8>>2]=y[9196]|y[9197]<<8|(y[9198]<<16|y[9199]<<24);x[h+24>>2]=ac(a,b,c,d,e,f,h+8|0,h+13|0);break b}a=Xb(h+24|0,c,e,i,2);b=x[e>>2];M:{if(!((a|0)>60|b&4)){x[f>>2]=a;break M}x[e>>2]=b|4}break b}x[h+8>>2]=624576549;x[h+12>>2]=1394948685;x[h+24>>2]=ac(a,b,c,d,e,f,h+8|0,h+16|0);break b}a=Xb(h+24|0,c,e,i,1);b=x[e>>2];N:{if(!((a|0)>6|b&4)){x[f+24>>2]=a;break N}x[e>>2]=b|4}break b}a=Za[x[x[a>>2]+20>>2]](a,b,c,d,e,f)|0;break a}g=a;i=b;a=Za[x[x[a+8>>2]+24>>2]](a+8|0)|0;O:{if(y[a+11|0]>>>7|0){b=x[a>>2];break O}b=a}j=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[h+24>>2]=ac(g,i,c,d,e,f,j,b+a|0);break b}Qf(f+20|0,h+24|0,c,e,i);break b}a=Xb(h+24|0,c,e,i,4);if(!(y[e|0]&4)){x[f+20>>2]=a-1900}break b}if((g|0)==37){break c}}x[e>>2]=x[e>>2]|4;break b}a=Wa-16|0;Wa=a;x[a+8>>2]=c;b=6;d=h+24|0;P:{Q:{if(Qb(d,a+8|0)){break Q}b=4;c=x[d>>2];f=x[c+12>>2];R:{if((f|0)==x[c+16>>2]){c=Za[x[x[c>>2]+36>>2]](c)|0;break R}c=y[f|0]}if((Za[x[x[i>>2]+36>>2]](i,c<<24>>24,0)|0)!=37){break Q}b=2;if(!Qb(Gc(d),a+8|0)){break P}}x[e>>2]=x[e>>2]|b}Wa=a+16|0}a=x[h+24>>2]}Wa=h+32|0;return a|0}function Rj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=E(0),l=0;c=x[a+8>>2];a:{b:{if(!c){j=1;x[a+8>>2]=1;Pd(x[a+16>>2]+D(x[b>>2]%x[a+4>>2]|0,40)|0,b);if(!y[a+12|0]){break b}break a}c:{f=x[a+16>>2];g=x[a+4>>2];d=x[b>>2]%(g|0)|0;h=f+D(d,40)|0;if(x[h>>2]){if((g|0)<0){break a}break c}j=1;x[a+8>>2]=c+1;Pd(h,b);if(!y[a+12|0]){break b}break a}while(1){c=f+D(d,40)|0;if(x[c>>2]){d=d+1|0;if((g|0)>(d|0)){continue}break a}break}Pd(c,b);j=1;x[a+8>>2]=x[a+8>>2]+1;if(y[a+12|0]){break a}}c=Wa+-64|0;Wa=c;g=a;d=x[a+4>>2];k=E(E(x[a+8>>2])/E(d|0));B[a>>2]=k;d:{if(!(k>=E(.5))){break d}v[g+12|0]=1;x[c+56>>2]=0;x[c+48>>2]=0;x[c+52>>2]=0;b=x[g+20>>2];h=x[g+16>>2];f=b-h|0;a=(f|0)/40|0;e:{f:{g:{h:{i:{j:{if((b|0)==(h|0)){a=b}else{if(a>>>0>=107374183){break j}d=rb(f);x[c+52>>2]=d;x[c+48>>2]=d;x[c+56>>2]=d+D(a,40);f=Wa-32|0;Wa=f;e=c+48|0;d=x[e+4>>2];x[f+28>>2]=d;x[f+24>>2]=d;k:{l:{m:{if((b|0)==(h|0)){a=d;break m}i=e+8|0;a=d;while(1){x[5120]=0;U(53,i|0,a|0,h|0);l=x[5120];x[5120]=0;if((l|0)==1){break l}a=a+40|0;x[f+28>>2]=a;h=h+40|0;if((h|0)!=(b|0)){continue}break}}x[e+4>>2]=a;Wa=f+32|0;break k}ha(V(0)|0)|0;x[5120]=0;x[f+8>>2]=i;x[f+16>>2]=f+28;x[f+12>>2]=f+24;mf(f+8|0);a=x[5120];x[5120]=0;n:{o:{if((a|0)!=1){x[5120]=0;X(46);a=x[5120];x[5120]=0;if((a|0)!=1){break o}}a=P()|0;x[5120]=0;X(47);b=x[5120];x[5120]=0;if((b|0)!=1){break n}V(0)|0;lb()}p()}x[e+4>>2]=d;R(a|0);p()}b=x[g+16>>2];d=x[g+4>>2];a=x[g+20>>2]}d=d<<1;x[g+4>>2]=d;f=(a-b|0)/40|0;p:{if(f>>>0<d>>>0){x[5120]=0;S(49,g+16|0,d-f|0);a=x[5120];x[5120]=0;if((a|0)!=1){break p}a=P()|0;break g}if(d>>>0>=f>>>0){break p}b=D(d,40)+b|0;if((b|0)!=(a|0)){while(1){if(v[a-1|0]<0){db(x[a-12>>2])}if(v[a-13|0]<0){db(x[a-24>>2])}if(v[a-25|0]<0){db(x[a-36>>2])}a=a-40|0;if((b|0)!=(a|0)){continue}break}}x[g+20>>2]=b}a=x[c+48>>2];h=x[c+52>>2];if((a|0)==(h|0)){break e}b=c+36|0;d=c+24|0;f=c+8|4;while(1){q:{x[c+8>>2]=x[a>>2];r:{if(v[a+15|0]>=0){e=x[a+8>>2];x[f>>2]=x[a+4>>2];x[f+4>>2]=e;x[f+8>>2]=x[a+12>>2];break r}e=x[a+8>>2];i=x[a+4>>2];x[5120]=0;U(4,f|0,i|0,e|0);e=x[5120];x[5120]=0;if((e|0)==1){break q}}s:{t:{u:{v:{if(v[a+27|0]>=0){e=x[a+20>>2];x[d>>2]=x[a+16>>2];x[d+4>>2]=e;x[d+8>>2]=x[a+24>>2];break v}e=x[a+20>>2];i=x[a+16>>2];x[5120]=0;U(4,d|0,i|0,e|0);e=x[5120];x[5120]=0;if((e|0)==1){break u}}if(v[a+39|0]<0){break t}e=x[a+32>>2];x[b>>2]=x[a+28>>2];x[b+4>>2]=e;x[b+8>>2]=x[a+36>>2];break s}a=P()|0;break h}e=x[a+32>>2];i=x[a+28>>2];x[5120]=0;U(4,b|0,i|0,e|0);e=x[5120];x[5120]=0;if((e|0)==1){break i}}w:{e=y[c+23|0];if(!(e<<24>>24<0?x[c+16>>2]:e)){break w}x[5120]=0;T(52,g|0,c+8|0)|0;e=x[5120];x[5120]=0;if((e|0)!=1){break w}a=P()|0;Kc(c+8|0);break g}if(v[c+47|0]<0){db(x[c+36>>2])}if(v[c+35|0]<0){db(x[c+24>>2])}if(v[c+23|0]<0){db(x[c+12>>2])}a=a+40|0;if((h|0)!=(a|0)){continue}break f}break}a=P()|0;break g}oc();p()}a=P()|0;if(v[c+35|0]>=0){break h}db(x[c+24>>2])}if(v[c+23|0]>=0){break g}db(x[c+12>>2])}vf(c+48|0);R(a|0);p()}a=x[c+48>>2]}v[g+12|0]=0;if(!a){break d}d=a;b=x[c+52>>2];if((b|0)!=(a|0)){while(1){if(v[b-1|0]<0){db(x[b-12>>2])}if(v[b-13|0]<0){db(x[b-24>>2])}if(v[b-25|0]<0){db(x[b-36>>2])}b=b-40|0;if((b|0)!=(a|0)){continue}break}d=x[c+48>>2]}x[c+52>>2]=a;db(d)}Wa=c- -64|0}return j|0}function dh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=Wa-32|0;Wa=d;x[a+8>>2]=0;x[a>>2]=0;x[a+4>>2]=0;x[d+24>>2]=0;x[d+16>>2]=0;x[d+20>>2]=0;i=x[4982];h=(i|0)/2|0;e=x[4980];a:{if((i|0)<2){c=e;break a}while(1){f=x[e+4>>2];b:{if(f){while(1){c=f;f=x[c>>2];if(f){continue}break b}}while(1){c=x[e+8>>2];f=x[c>>2]!=(e|0);e=c;if(f){continue}break}}e=c;g=g+1|0;if((h|0)!=(g|0)){continue}break}}f=x[c+20>>2];x[5120]=0;j=Y(1,b|0,0,10)|0;b=x[5120];x[5120]=0;c:{d:{e:{f:{g:{if((b|0)!=1){x[5120]=0;S(2,d|0,f|0);b=x[5120];x[5120]=0;if((b|0)==1){break g}b=x[a+4>>2];h:{if(b>>>0<A[a+8>>2]){e=x[d+4>>2];x[b>>2]=x[d>>2];x[b+4>>2]=e;x[b+8>>2]=x[d+8>>2];x[a+4>>2]=b+12;break h}x[5120]=0;S(3,a|0,d|0);b=x[5120];x[5120]=0;if((b|0)==1){break f}if(v[d+11|0]>=0){break h}db(x[d>>2])}e=c+24|0;b=x[d+20>>2];if((b|0)!=x[d+24>>2]){if(v[c+35|0]>=0){c=x[e+4>>2];x[b>>2]=x[e>>2];x[b+4>>2]=c;x[b+8>>2]=x[e+8>>2];break e}e=x[c+28>>2];c=x[c+24>>2];x[5120]=0;U(4,b|0,c|0,e|0);c=x[5120];x[5120]=0;if((c|0)!=1){break e}g=P()|0;x[d+20>>2]=b;break c}x[5120]=0;S(5,d+16|0,e|0);b=x[5120];x[5120]=0;if((b|0)!=1){break d}}g=P()|0;break c}g=P()|0;break c}g=P()|0;if(v[d+11|0]>=0){break c}db(x[d>>2]);break c}x[d+20>>2]=b+12}i:{if((f|0)!=(j|0)){b=0;while(1){e=x[4980];g=0;c=(f|0)>(j|0);i=c?h-1|0:i;b=c?b:h+1|0;h=b+((i-b|0)/2|0)|0;if((h|0)>0){while(1){f=x[e+4>>2];j:{if(f){while(1){c=f;f=x[c>>2];if(f){continue}break j}}while(1){c=x[e+8>>2];f=x[c>>2]!=(e|0);e=c;if(f){continue}break}}e=c;g=g+1|0;if((h|0)!=(g|0)){continue}break}}f=x[e+20>>2];x[5120]=0;S(2,d|0,f|0);c=x[5120];x[5120]=0;k:{l:{m:{if((c|0)!=1){c=x[a+4>>2];n:{if(c>>>0<A[a+8>>2]){g=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=g;x[c+8>>2]=x[d+8>>2];x[a+4>>2]=c+12;break n}x[5120]=0;S(3,a|0,d|0);c=x[5120];x[5120]=0;if((c|0)==1){break m}if(v[d+11|0]>=0){break n}db(x[d>>2])}g=e+24|0;c=x[d+20>>2];if((c|0)!=x[d+24>>2]){if(v[e+35|0]>=0){e=x[g+4>>2];x[c>>2]=x[g>>2];x[c+4>>2]=e;x[c+8>>2]=x[g+8>>2];break l}g=x[e+28>>2];e=x[e+24>>2];x[5120]=0;U(4,c|0,e|0,g|0);e=x[5120];x[5120]=0;if((e|0)!=1){break l}g=P()|0;x[d+20>>2]=c;break c}x[5120]=0;S(5,d+16|0,g|0);c=x[5120];x[5120]=0;if((c|0)==1){break i}break k}g=P()|0;break c}g=P()|0;if(v[d+11|0]>=0){break c}db(x[d>>2]);break c}x[d+20>>2]=c+12}if((f|0)!=(j|0)){continue}break}}c=x[d+16>>2];e=x[d+20>>2];if((c|0)!=(e|0)){while(1){o:{p:{q:{r:{s:{t:{if(v[c+11|0]>=0){x[d+8>>2]=x[c+8>>2];b=x[c+4>>2];x[d>>2]=x[c>>2];x[d+4>>2]=b;break t}b=x[c+4>>2];f=x[c>>2];x[5120]=0;U(4,d|0,f|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break s}}b=x[a+4>>2];if((b|0)!=x[a+8>>2]){if(v[d+11|0]>=0){f=x[d+4>>2];x[b>>2]=x[d>>2];x[b+4>>2]=f;x[b+8>>2]=x[d+8>>2];break p}x[5120]=0;U(4,b|0,x[d>>2],x[d+4>>2]);f=x[5120];x[5120]=0;if((f|0)!=1){break p}g=P()|0;x[a+4>>2]=b;break q}x[5120]=0;S(5,a|0,d|0);b=x[5120];x[5120]=0;if((b|0)==1){break r}break o}g=P()|0;break c}g=P()|0}if(v[d+11|0]>=0){break c}db(x[d>>2]);break c}x[a+4>>2]=b+12}if(v[d+11|0]<0){db(x[d>>2])}c=c+12|0;if((e|0)!=(c|0)){continue}break}c=x[d+16>>2]}if(c){f=c;e=x[d+20>>2];if((e|0)!=(c|0)){while(1){a=e-12|0;if(v[e-1|0]<0){db(x[a>>2])}e=a;if((e|0)!=(c|0)){continue}break}f=x[d+16>>2]}x[d+20>>2]=c;db(f)}Wa=d+32|0;return}g=P()|0}pe(d+16|0);pe(a);R(g|0);p()}function Gb(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=Wa-112|0;Wa=j;o=i&2147483647;m=e&2147483647;l=m;a:{b:{k=!(b|c);if(!(d|l?l-2147418112>>>0<2147549184:k)){m=o-2147418112|0;if(!h&(m|0)==-2147418112?f|g:(m|0)==-2147418112&(h|0)!=0|m>>>0>2147549184){break b}}if(!(!d&(l|0)==2147418112?k:l>>>0<2147418112)){h=d;i=e|32768;f=b;g=c;break a}if(!(!h&(o|0)==2147418112?!(f|g):o>>>0<2147418112)){i=i|32768;break a}if(!(b|d|(l^2147418112|c))){l=d;d=!(b^f|d^h|(c^g|e^i^-2147483648));h=d?0:l;i=d?2147450880:e;f=d?0:b;g=d?0:c;break a}if(!(f|h|(o^2147418112|g))){break a}if(!(b|d|(c|l))){if(f|h|(g|o)){break a}f=b&f;g=c&g;h=d&h;i=e&i;break a}if(f|h|(g|o)){break b}f=b;g=c;h=d;i=e;break a}k=(l|0)==(o|0);s=k&(d|0)==(h|0)?(c|0)==(g|0)&b>>>0<f>>>0|c>>>0<g>>>0:k&d>>>0<h>>>0|l>>>0<o>>>0;k=s;m=k?f:b;o=k?g:c;r=k?h:d;k=k?i:e;t=k;l=r;p=k&65535;d=s?d:h;e=s?e:i;r=e;n=e>>>16&32767;q=k>>>16&32767;if(!q){h=!(l|p);e=h?m:l;k=h<<6;i=G(e)+32|0;e=G(h?o:p);e=k+((e|0)==32?i:e)|0;Eb(j+96|0,m,o,l,p,e-15|0);l=x[j+104>>2];p=x[j+108>>2];o=x[j+100>>2];q=16-e|0;m=x[j+96>>2]}f=s?b:f;g=s?c:g;h=d;i=r&65535;if(!n){c=!(h|i);b=c?f:h;k=c<<6;d=G(b)+32|0;b=G(c?g:i);b=k+((b|0)==32?d:b)|0;Eb(j+80|0,f,g,h,i,b-15|0);n=16-b|0;h=x[j+88>>2];i=x[j+92>>2];g=x[j+84>>2];f=x[j+80>>2]}c=i<<3|h>>>29;b=h<<3|g>>>29;c=c|524288;e=l<<3|o>>>29;k=p<<3|l>>>29;h=r^t;i=g<<3|f>>>29;d=f<<3;c:{if((n|0)==(q|0)){break c}f=q-n|0;if(f>>>0>127){b=0;c=0;i=0;d=1;break c}Eb(j- -64|0,d,i,b,c,128-f|0);rc(j+48|0,d,i,b,c,f);b=x[j+56>>2];c=x[j+60>>2];i=x[j+52>>2];d=x[j+48>>2]|(x[j+64>>2]|x[j+72>>2]|(x[j+68>>2]|x[j+76>>2]))!=0}n=d;p=i;l=e;r=k|524288;i=o<<3|m>>>29;m=m<<3;k=i;d:{if((h|0)<0){f=0;g=0;h=0;i=0;if(!(m^n|b^l|(k^p|c^r))){break a}d=m-n|0;e=k-((m>>>0<n>>>0)+p|0)|0;g=l-b|0;f=(k|0)==(p|0)&m>>>0<n>>>0|k>>>0<p>>>0;h=g-f|0;b=(r-((b>>>0>l>>>0)+c|0)|0)-(f>>>0>g>>>0)|0;i=b;if(b>>>0>524287){break d}c=!(h|i);b=c?d:h;g=c<<6;f=G(b)+32|0;b=G(c?e:i);b=g+((b|0)==32?f:b)|0;b=b-12|0;Eb(j+32|0,d,e,h,i,b);q=q-b|0;h=x[j+40>>2];i=x[j+44>>2];d=x[j+32>>2];e=x[j+36>>2];break d}e=k+p|0;d=m+n|0;e=d>>>0<m>>>0?e+1|0:e;f=(p|0)==(e|0)&d>>>0<n>>>0|e>>>0<p>>>0;k=c+r|0;b=b+l|0;k=b>>>0<l>>>0?k+1|0:k;h=b+f|0;i=h>>>0<b>>>0?k+1|0:k;if(!(i&1048576)){break d}d=n&1|((e&1)<<31|d>>>1);e=h<<31|e>>>1;q=q+1|0;h=(i&1)<<31|h>>>1;i=i>>>1|0}c=0;l=t&-2147483648;if((q|0)>=32767){h=c;i=l|2147418112;f=0;g=0;break a}n=0;e:{if((q|0)>0){n=q;break e}Eb(j+16|0,d,e,h,i,q+127|0);rc(j,d,e,h,i,1-q|0);d=x[j>>2]|(x[j+16>>2]|x[j+24>>2]|(x[j+20>>2]|x[j+28>>2]))!=0;e=x[j+4>>2];h=x[j+8>>2];i=x[j+12>>2]}m=d&7;d=(e&7)<<29|d>>>3;f=(m>>>0>4)+d|0;b=h<<29|e>>>3;g=d>>>0>f>>>0?b+1|0:b;d=(b|0)==(g|0)&d>>>0>f>>>0|b>>>0>g>>>0;b=c|((i&7)<<29|h>>>3);h=d+b|0;i=l|(i>>>3&65535|n<<16);i=b>>>0>h>>>0?i+1|0:i;f:{if((m|0)==4){k=g+0|0;d=f;b=f&1;f=f+b|0;g=d>>>0>f>>>0?k+1|0:k;b=(c|0)==(g|0)&b>>>0>f>>>0|c>>>0>g>>>0;h=b+h|0;i=b>>>0>h>>>0?i+1|0:i;break f}if(!m){break a}}}x[a>>2]=f;x[a+4>>2]=g;x[a+8>>2]=h;x[a+12>>2]=i;Wa=j+112|0}function db(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;a:{if(!a){break a}d=a-8|0;b=x[a-4>>2];a=b&-8;f=d+a|0;b:{if(b&1){break b}if(!(b&3)){break a}b=x[d>>2];d=d-b|0;if(d>>>0<A[5e3]){break a}a=a+b|0;c:{d:{if(x[5001]!=(d|0)){if(b>>>0<=255){e=b>>>3|0;b=x[d+8>>2];c=x[d+12>>2];if((c|0)==(b|0)){x[4996]=x[4996]&In(e);break b}x[b+12>>2]=c;x[c+8>>2]=b;break b}g=x[d+24>>2];b=x[d+12>>2];if((d|0)!=(b|0)){c=x[d+8>>2];x[c+12>>2]=b;x[b+8>>2]=c;break c}e=d+20|0;c=x[e>>2];if(!c){c=x[d+16>>2];if(!c){break d}e=d+16|0}while(1){h=e;b=c;e=b+20|0;c=x[e>>2];if(c){continue}e=b+16|0;c=x[b+16>>2];if(c){continue}break}x[h>>2]=0;break c}b=x[f+4>>2];if((b&3)!=3){break b}x[4998]=a;x[f+4>>2]=b&-2;x[d+4>>2]=a|1;x[f>>2]=a;return}b=0}if(!g){break b}c=x[d+28>>2];e=(c<<2)+20288|0;e:{if(x[e>>2]==(d|0)){x[e>>2]=b;if(b){break e}x[4997]=x[4997]&In(c);break b}x[g+(x[g+16>>2]==(d|0)?16:20)>>2]=b;if(!b){break b}}x[b+24>>2]=g;c=x[d+16>>2];if(c){x[b+16>>2]=c;x[c+24>>2]=b}c=x[d+20>>2];if(!c){break b}x[b+20>>2]=c;x[c+24>>2]=b}if(d>>>0>=f>>>0){break a}b=x[f+4>>2];if(!(b&1)){break a}f:{g:{h:{i:{if(!(b&2)){if(x[5002]==(f|0)){x[5002]=d;a=x[4999]+a|0;x[4999]=a;x[d+4>>2]=a|1;if(x[5001]!=(d|0)){break a}x[4998]=0;x[5001]=0;return}if(x[5001]==(f|0)){x[5001]=d;a=x[4998]+a|0;x[4998]=a;x[d+4>>2]=a|1;x[a+d>>2]=a;return}a=(b&-8)+a|0;if(b>>>0<=255){e=b>>>3|0;b=x[f+8>>2];c=x[f+12>>2];if((c|0)==(b|0)){x[4996]=x[4996]&In(e);break g}x[b+12>>2]=c;x[c+8>>2]=b;break g}g=x[f+24>>2];b=x[f+12>>2];if((f|0)!=(b|0)){c=x[f+8>>2];x[c+12>>2]=b;x[b+8>>2]=c;break h}e=f+20|0;c=x[e>>2];if(!c){c=x[f+16>>2];if(!c){break i}e=f+16|0}while(1){h=e;b=c;e=b+20|0;c=x[e>>2];if(c){continue}e=b+16|0;c=x[b+16>>2];if(c){continue}break}x[h>>2]=0;break h}x[f+4>>2]=b&-2;x[d+4>>2]=a|1;x[a+d>>2]=a;break f}b=0}if(!g){break g}c=x[f+28>>2];e=(c<<2)+20288|0;j:{if(x[e>>2]==(f|0)){x[e>>2]=b;if(b){break j}x[4997]=x[4997]&In(c);break g}x[g+(x[g+16>>2]==(f|0)?16:20)>>2]=b;if(!b){break g}}x[b+24>>2]=g;c=x[f+16>>2];if(c){x[b+16>>2]=c;x[c+24>>2]=b}c=x[f+20>>2];if(!c){break g}x[b+20>>2]=c;x[c+24>>2]=b}x[d+4>>2]=a|1;x[a+d>>2]=a;if(x[5001]!=(d|0)){break f}x[4998]=a;return}if(a>>>0<=255){b=(a&-8)+20024|0;c=x[4996];a=1<<(a>>>3);k:{if(!(c&a)){x[4996]=a|c;a=b;break k}a=x[b+8>>2]}x[b+8>>2]=d;x[a+12>>2]=d;x[d+12>>2]=b;x[d+8>>2]=a;return}c=31;if(a>>>0<=16777215){b=G(a>>>8|0);c=((a>>>38-b&1)-(b<<1)|0)+62|0}x[d+28>>2]=c;x[d+16>>2]=0;x[d+20>>2]=0;b=(c<<2)+20288|0;l:{m:{e=x[4997];h=1<<c;n:{if(!(e&h)){x[4997]=e|h;x[b>>2]=d;x[d+24>>2]=b;break n}c=a<<((c|0)!=31?25-(c>>>1|0)|0:0);b=x[b>>2];while(1){e=b;if((x[b+4>>2]&-8)==(a|0)){break m}b=c>>>29|0;c=c<<1;h=e+(b&4)|0;b=x[h+16>>2];if(b){continue}break}x[h+16>>2]=d;x[d+24>>2]=e}x[d+12>>2]=d;x[d+8>>2]=d;break l}a=x[e+8>>2];x[a+12>>2]=d;x[e+8>>2]=d;x[d+24>>2]=0;x[d+12>>2]=e;x[d+8>>2]=a}a=x[5004]-1|0;x[5004]=a?a:-1}}function cd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;f=a+b|0;c=x[a+4>>2];a:{b:{if(c&1){break b}if(!(c&3)){break a}c=x[a>>2];b=c+b|0;c:{d:{e:{a=a-c|0;if((a|0)!=x[5001]){if(c>>>0<=255){e=c>>>3|0;c=x[a+8>>2];d=x[a+12>>2];if((d|0)!=(c|0)){break e}x[4996]=x[4996]&In(e);break b}g=x[a+24>>2];c=x[a+12>>2];if((c|0)!=(a|0)){d=x[a+8>>2];x[d+12>>2]=c;x[c+8>>2]=d;break c}e=a+20|0;d=x[e>>2];if(!d){d=x[a+16>>2];if(!d){break d}e=a+16|0}while(1){h=e;c=d;e=c+20|0;d=x[e>>2];if(d){continue}e=c+16|0;d=x[c+16>>2];if(d){continue}break}x[h>>2]=0;break c}c=x[f+4>>2];if((c&3)!=3){break b}x[4998]=b;x[f+4>>2]=c&-2;x[a+4>>2]=b|1;x[f>>2]=b;return}x[c+12>>2]=d;x[d+8>>2]=c;break b}c=0}if(!g){break b}d=x[a+28>>2];e=(d<<2)+20288|0;f:{if(x[e>>2]==(a|0)){x[e>>2]=c;if(c){break f}x[4997]=x[4997]&In(d);break b}x[g+(x[g+16>>2]==(a|0)?16:20)>>2]=c;if(!c){break b}}x[c+24>>2]=g;d=x[a+16>>2];if(d){x[c+16>>2]=d;x[d+24>>2]=c}d=x[a+20>>2];if(!d){break b}x[c+20>>2]=d;x[d+24>>2]=c}g:{h:{i:{j:{c=x[f+4>>2];if(!(c&2)){if(x[5002]==(f|0)){x[5002]=a;b=x[4999]+b|0;x[4999]=b;x[a+4>>2]=b|1;if(x[5001]!=(a|0)){break a}x[4998]=0;x[5001]=0;return}if(x[5001]==(f|0)){x[5001]=a;b=x[4998]+b|0;x[4998]=b;x[a+4>>2]=b|1;x[a+b>>2]=b;return}b=(c&-8)+b|0;if(c>>>0<=255){e=c>>>3|0;c=x[f+8>>2];d=x[f+12>>2];if((d|0)==(c|0)){x[4996]=x[4996]&In(e);break h}x[c+12>>2]=d;x[d+8>>2]=c;break h}g=x[f+24>>2];c=x[f+12>>2];if((f|0)!=(c|0)){d=x[f+8>>2];x[d+12>>2]=c;x[c+8>>2]=d;break i}e=f+20|0;d=x[e>>2];if(!d){d=x[f+16>>2];if(!d){break j}e=f+16|0}while(1){h=e;c=d;e=c+20|0;d=x[e>>2];if(d){continue}e=c+16|0;d=x[c+16>>2];if(d){continue}break}x[h>>2]=0;break i}x[f+4>>2]=c&-2;x[a+4>>2]=b|1;x[a+b>>2]=b;break g}c=0}if(!g){break h}d=x[f+28>>2];e=(d<<2)+20288|0;k:{if(x[e>>2]==(f|0)){x[e>>2]=c;if(c){break k}x[4997]=x[4997]&In(d);break h}x[g+(x[g+16>>2]==(f|0)?16:20)>>2]=c;if(!c){break h}}x[c+24>>2]=g;d=x[f+16>>2];if(d){x[c+16>>2]=d;x[d+24>>2]=c}d=x[f+20>>2];if(!d){break h}x[c+20>>2]=d;x[d+24>>2]=c}x[a+4>>2]=b|1;x[a+b>>2]=b;if(x[5001]!=(a|0)){break g}x[4998]=b;return}if(b>>>0<=255){c=(b&-8)+20024|0;d=x[4996];b=1<<(b>>>3);l:{if(!(d&b)){x[4996]=b|d;b=c;break l}b=x[c+8>>2]}x[c+8>>2]=a;x[b+12>>2]=a;x[a+12>>2]=c;x[a+8>>2]=b;return}d=31;if(b>>>0<=16777215){c=G(b>>>8|0);d=((b>>>38-c&1)-(c<<1)|0)+62|0}x[a+28>>2]=d;x[a+16>>2]=0;x[a+20>>2]=0;c=(d<<2)+20288|0;m:{e=x[4997];h=1<<d;n:{if(!(e&h)){x[4997]=e|h;x[c>>2]=a;x[a+24>>2]=c;break n}d=b<<((d|0)!=31?25-(d>>>1|0)|0:0);c=x[c>>2];while(1){e=c;if((x[c+4>>2]&-8)==(b|0)){break m}c=d>>>29|0;d=d<<1;h=e+(c&4)|0;c=x[h+16>>2];if(c){continue}break}x[h+16>>2]=a;x[a+24>>2]=e}x[a+12>>2]=a;x[a+8>>2]=a;return}b=x[e+8>>2];x[b+12>>2]=a;x[e+8>>2]=a;x[a+24>>2]=0;x[a+12>>2]=e;x[a+8>>2]=b}}function ll(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0;j=Wa-16|0;Wa=j;m=me(g);q=Vd(g);g=q;Za[x[x[g>>2]+20>>2]](j,g);x[f>>2]=d;a:{b:{c:{i=a;g=y[i|0];switch(g-43|0){case 0:case 2:break c;default:break b}}x[5120]=0;g=T(188,m|0,g<<24>>24)|0;i=x[5120];x[5120]=0;if((i|0)==1){break a}i=x[f>>2];x[f>>2]=i+4;x[i>>2]=g;i=a+1|0}d:{g=i;if(!((c-g|0)<=1|y[g|0]!=48|(y[g+1|0]|32)!=120)){x[5120]=0;g=T(188,m|0,48)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+4;x[h>>2]=g;g=v[i+1|0];x[5120]=0;g=T(188,m|0,g|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+4;x[h>>2]=g;i=i+2|0;g=i;while(1){if(c>>>0<=g>>>0){break d}h=v[g|0];x[5120]=0;Z(156)|0;k=x[5120];x[5120]=0;e:{if((k|0)==1){break e}x[5120]=0;k=x[5120];x[5120]=0;if((k|0)==1){break e}if(!(h-48>>>0<10|(h|32)-97>>>0<6)){break d}g=g+1|0;continue}break}break a}while(1){if(c>>>0<=g>>>0){break d}h=v[g|0];x[5120]=0;Z(156)|0;k=x[5120];x[5120]=0;if((k|0)==1){break a}x[5120]=0;k=x[5120];x[5120]=0;if((k|0)==1){break a}if(h-48>>>0>=10){break d}g=g+1|0;continue}}f:{if(y[j+11|0]>>>7|0){l=x[j+4>>2]}else{l=y[j+11|0]&127}if(!l){h=x[f>>2];x[5120]=0;W(172,m|0,i|0,g|0,h|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}x[f>>2]=x[f>>2]+(g-i<<2);break f}x[5120]=0;dc(i,g);h=x[5120];x[5120]=0;if((h|0)==1){break a}x[5120]=0;r=Q(169,q|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=0;k=i;while(1){if(g>>>0<=k>>>0){h=x[f>>2];x[5120]=0;Lc((i-a<<2)+d|0,h);i=x[5120];x[5120]=0;if((i|0)!=1){break f}break a}if(y[j+11|0]>>>7|0){l=x[j>>2]}else{l=j}o=v[l+h|0]!=(n|0);if(y[j+11|0]>>>7|0){l=x[j>>2]}else{l=j}if(!(o|v[l+h|0]<=0)){n=x[f>>2];x[f>>2]=n+4;x[n>>2]=r;if(y[j+11|0]>>>7|0){l=x[j+4>>2]}else{l=y[j+11|0]&127}h=(l-1>>>0>h>>>0)+h|0;n=0}l=v[k|0];x[5120]=0;l=T(188,m|0,l|0)|0;o=x[5120];x[5120]=0;if((o|0)!=1){o=x[f>>2];x[f>>2]=o+4;x[o>>2]=l;k=k+1|0;n=n+1|0;continue}break}break a}g:{while(1){if(c>>>0>g>>>0){i=y[g|0];if((i|0)==46){x[5120]=0;i=Q(173,q|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];k=h+4|0;x[f>>2]=k;x[h>>2]=i;g=g+1|0;break g}x[5120]=0;i=T(188,m|0,i<<24>>24)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+4;x[h>>2]=i;g=g+1|0;continue}break}k=x[f>>2]}x[5120]=0;W(172,m|0,g|0,c|0,k|0)|0;i=x[5120];x[5120]=0;if((i|0)==1){break a}i=f;f=x[f>>2]+(c-g<<2)|0;x[i>>2]=f;x[e>>2]=(b|0)==(c|0)?f:(b-a<<2)+d|0;cb(j);Wa=j+16|0;return}a=P()|0;cb(j);R(a|0);p()}function vl(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0;j=Wa-16|0;Wa=j;m=oe(g);q=Yd(g);g=q;Za[x[x[g>>2]+20>>2]](j,g);x[f>>2]=d;a:{b:{c:{i=a;g=y[i|0];switch(g-43|0){case 0:case 2:break c;default:break b}}x[5120]=0;g=T(176,m|0,g<<24>>24)|0;i=x[5120];x[5120]=0;if((i|0)==1){break a}i=x[f>>2];x[f>>2]=i+1;v[i|0]=g;i=a+1|0}d:{g=i;if(!((c-g|0)<=1|y[g|0]!=48|(y[g+1|0]|32)!=120)){x[5120]=0;g=T(176,m|0,48)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+1;v[h|0]=g;g=v[i+1|0];x[5120]=0;g=T(176,m|0,g|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+1;v[h|0]=g;i=i+2|0;g=i;while(1){if(c>>>0<=g>>>0){break d}h=v[g|0];x[5120]=0;Z(156)|0;l=x[5120];x[5120]=0;e:{if((l|0)==1){break e}x[5120]=0;l=x[5120];x[5120]=0;if((l|0)==1){break e}if(!(h-48>>>0<10|(h|32)-97>>>0<6)){break d}g=g+1|0;continue}break}break a}while(1){if(c>>>0<=g>>>0){break d}h=v[g|0];x[5120]=0;Z(156)|0;l=x[5120];x[5120]=0;if((l|0)==1){break a}x[5120]=0;l=x[5120];x[5120]=0;if((l|0)==1){break a}if(h-48>>>0>=10){break d}g=g+1|0;continue}}f:{if(y[j+11|0]>>>7|0){k=x[j+4>>2]}else{k=y[j+11|0]&127}if(!k){h=x[f>>2];x[5120]=0;W(152,m|0,i|0,g|0,h|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}x[f>>2]=x[f>>2]+(g-i|0);break f}x[5120]=0;dc(i,g);h=x[5120];x[5120]=0;if((h|0)==1){break a}x[5120]=0;r=Q(143,q|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=0;l=i;while(1){if(g>>>0<=l>>>0){h=x[f>>2];x[5120]=0;dc((i-a|0)+d|0,h);i=x[5120];x[5120]=0;if((i|0)!=1){break f}break a}if(y[j+11|0]>>>7|0){k=x[j>>2]}else{k=j}o=v[k+h|0]!=(n|0);if(y[j+11|0]>>>7|0){k=x[j>>2]}else{k=j}if(!(o|v[k+h|0]<=0)){n=x[f>>2];x[f>>2]=n+1;v[n|0]=r;if(y[j+11|0]>>>7|0){k=x[j+4>>2]}else{k=y[j+11|0]&127}h=(k-1>>>0>h>>>0)+h|0;n=0}k=v[l|0];x[5120]=0;k=T(176,m|0,k|0)|0;o=x[5120];x[5120]=0;if((o|0)!=1){o=x[f>>2];x[f>>2]=o+1;v[o|0]=k;l=l+1|0;n=n+1|0;continue}break}break a}while(1){g:{if(c>>>0>g>>>0){i=y[g|0];if((i|0)!=46){break g}x[5120]=0;i=Q(153,q|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+1;v[h|0]=i;g=g+1|0}i=x[f>>2];x[5120]=0;W(152,m|0,g|0,c|0,i|0)|0;i=x[5120];x[5120]=0;if((i|0)==1){break a}i=f;f=x[f>>2]+(c-g|0)|0;x[i>>2]=f;x[e>>2]=(b|0)==(c|0)?f:(b-a|0)+d|0;cb(j);Wa=j+16|0;return}x[5120]=0;i=T(176,m|0,i<<24>>24)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}h=x[f>>2];x[f>>2]=h+1;v[h|0]=i;g=g+1|0;continue}}a=P()|0;cb(j);R(a|0);p()}function Bk(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0;j=Wa-1072|0;Wa=j;x[j+16>>2]=f;x[j+20>>2]=g;x[j+24>>2]=h;x[j+28>>2]=i;a=j+960|0;x[j+956>>2]=a;k=be(a,100,1734,j+16|0);x[j+48>>2]=132;a=j+48|0;q=qb(j+536|0,0,a);x[j+48>>2]=132;l=qb(j+528|0,0,a);n=j+544|0;a:{b:{c:{d:{if(k>>>0>=100){x[5120]=0;a=Z(156)|0;k=x[5120];x[5120]=0;if((k|0)==1){break d}x[j>>2]=f;x[j+4>>2]=g;x[5120]=0;x[j+8>>2]=h;x[j+12>>2]=i;k=W(179,j+956|0,a|0,1734,j|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}e:{if((k|0)!=-1){vb(q,x[j+956>>2]);vb(l,ob(k<<2));if(x[l>>2]){break e}}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break a}n=x[l>>2]}x[5120]=0;a=x[d+28>>2];x[j+520>>2]=a;x[a+4>>2]=x[a+4>>2]+1;a=x[5120];x[5120]=0;f:{g:{h:{i:{j:{k:{if((a|0)!=1){x[5120]=0;s=Q(159,j+520|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break k}x[5120]=0;a=x[j+956>>2];W(172,s|0,a|0,a+k|0,n|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break k}r=(k|0)>0?y[x[j+956>>2]]==45:r;h=fb(j+488|0);f=fb(j+472|0);g=fb(j+456|0);x[5120]=0;ia(220,c|0,r|0,j+520|0,j+512|0,j+508|0,j+504|0,h|0,f|0,g|0,j+452|0);a=x[5120];x[5120]=0;if((a|0)==1){break j}x[j+36>>2]=132;i=qb(j+40|0,0,j+36|0);c=j+48|0;a=x[j+452>>2];l:{if((a|0)<(k|0)){t=x[j+452>>2];if(y[f+11|0]>>>7|0){m=x[f+4>>2]}else{m=y[f+11|0]&127}if(y[g+11|0]>>>7|0){o=x[g+4>>2]}else{o=y[g+11|0]&127}a=(t+(m+(o+(k-a<<1)|0)|0)|0)+1|0;break l}o=x[j+452>>2];if(y[g+11|0]>>>7|0){a=x[g+4>>2]}else{a=y[g+11|0]&127}if(y[f+11|0]>>>7|0){m=x[f+4>>2]}else{m=y[f+11|0]&127}a=(o+(a+m|0)|0)+2|0}if(a>>>0<101){break i}vb(i,ob(a<<2));c=x[i>>2];if(c){break i}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break a}break h}k=P()|0;break b}k=P()|0;break f}k=P()|0;break g}a=x[d+4>>2];x[5120]=0;ma(221,c|0,j+36|0,j+32|0,a|0,n|0,(k<<2)+n|0,s|0,r|0,j+512|0,x[j+508>>2],x[j+504>>2],h|0,f|0,g|0,x[j+452>>2]);a=x[5120];x[5120]=0;if((a|0)!=1){x[5120]=0;c=ga(192,b|0,c|0,x[j+36>>2],x[j+32>>2],d|0,e|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){break c}}}k=P()|0;eb(i)}gb(g);gb(f);cb(h)}a=x[j+520>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break b}k=P()|0;break b}eb(i);gb(g);gb(f);cb(h);a=x[j+520>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}eb(l);eb(q);Wa=j+1072|0;return c|0}eb(l);eb(q);R(k|0);p()}p()}function Gk(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0;j=Wa-464|0;Wa=j;x[j+16>>2]=f;x[j+20>>2]=g;x[j+24>>2]=h;x[j+28>>2]=i;a=j+352|0;x[j+348>>2]=a;k=be(a,100,1734,j+16|0);x[j+48>>2]=132;a=j+48|0;q=qb(j+232|0,0,a);x[j+48>>2]=132;l=qb(j+224|0,0,a);n=j+240|0;a:{b:{c:{d:{if(k>>>0>=100){x[5120]=0;a=Z(156)|0;k=x[5120];x[5120]=0;if((k|0)==1){break d}x[j>>2]=f;x[j+4>>2]=g;x[5120]=0;x[j+8>>2]=h;x[j+12>>2]=i;k=W(179,j+348|0,a|0,1734,j|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}e:{if((k|0)!=-1){vb(q,x[j+348>>2]);vb(l,ob(k));if(x[l>>2]){break e}}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break a}n=x[l>>2]}x[5120]=0;a=x[d+28>>2];x[j+216>>2]=a;x[a+4>>2]=x[a+4>>2]+1;a=x[5120];x[5120]=0;f:{g:{h:{i:{j:{k:{if((a|0)!=1){x[5120]=0;s=Q(61,j+216|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break k}x[5120]=0;a=x[j+348>>2];W(152,s|0,a|0,a+k|0,n|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break k}r=(k|0)>0?y[x[j+348>>2]]==45:r;h=fb(j+192|0);f=fb(j+176|0);g=fb(j+160|0);x[5120]=0;ia(218,c|0,r|0,j+216|0,j+208|0,j+207|0,j+206|0,h|0,f|0,g|0,j+156|0);a=x[5120];x[5120]=0;if((a|0)==1){break j}x[j+36>>2]=132;i=qb(j+40|0,0,j+36|0);c=j+48|0;a=x[j+156>>2];l:{if((a|0)<(k|0)){t=x[j+156>>2];if(y[f+11|0]>>>7|0){m=x[f+4>>2]}else{m=y[f+11|0]&127}if(y[g+11|0]>>>7|0){o=x[g+4>>2]}else{o=y[g+11|0]&127}a=(t+(m+(o+(k-a<<1)|0)|0)|0)+1|0;break l}o=x[j+156>>2];if(y[g+11|0]>>>7|0){a=x[g+4>>2]}else{a=y[g+11|0]&127}if(y[f+11|0]>>>7|0){m=x[f+4>>2]}else{m=y[f+11|0]&127}a=(o+(a+m|0)|0)+2|0}if(a>>>0<101){break i}vb(i,ob(a));c=x[i>>2];if(c){break i}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break a}break h}k=P()|0;break b}k=P()|0;break f}k=P()|0;break g}a=x[d+4>>2];x[5120]=0;ma(219,c|0,j+36|0,j+32|0,a|0,n|0,k+n|0,s|0,r|0,j+208|0,v[j+207|0],v[j+206|0],h|0,f|0,g|0,x[j+156>>2]);a=x[5120];x[5120]=0;if((a|0)!=1){x[5120]=0;c=ga(181,b|0,c|0,x[j+36>>2],x[j+32>>2],d|0,e|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){break c}}}k=P()|0;eb(i)}cb(g);cb(f);cb(h)}a=x[j+216>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break b}k=P()|0;break b}eb(i);cb(g);cb(f);cb(h);a=x[j+216>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}eb(l);eb(q);Wa=j+464|0;return c|0}eb(l);eb(q);R(k|0);p()}p()}function Gm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=x[a+4>>2];d=x[a>>2];i=(f-d|0)/12|0;if(i>>>0<b>>>0){d=c;c=0;g=Wa-32|0;Wa=g;f=a;a:{b:{c:{d:{h=b-i|0;e=x[a+8>>2];a=x[a+4>>2];e:{if(h>>>0<=(e-a|0)/12>>>0){f:{if(h){b=D(h,12)+a|0;while(1){g:{if(v[d+11|0]>=0){c=x[d+4>>2];x[a>>2]=x[d>>2];x[a+4>>2]=c;x[a+8>>2]=x[d+8>>2];break g}e=x[d+4>>2];c=x[d>>2];x[5120]=0;U(4,a|0,c|0,e|0);c=x[5120];x[5120]=0;if((c|0)==1){break f}}a=a+12|0;if((b|0)!=(a|0)){continue}break}a=b}x[f+4>>2]=a;break e}b=P()|0;x[f+4>>2]=a;R(b|0);p()}b=x[f>>2];i=(a-b|0)/12|0;j=i+h|0;if(j>>>0>=357913942){break d}x[g+24>>2]=f+8;e=(e-b|0)/12|0;b=e<<1;b=e>>>0>=178956970?357913941:b>>>0>j>>>0?b:j;if(b){if(b>>>0>=357913942){break c}c=rb(D(b,12))}x[g+8>>2]=c;l=D(b,12)+c|0;x[g+20>>2]=l;b=D(i,12)+c|0;x[g+12>>2]=b;k=D(h,12)+b|0;h:{i:{c=v[d+11|0];if((c|0)<0){a=b;break i}c=b;j=D(h,12)-12|0;i=((j>>>0)/12|0)+1&3;if(i){h=0;while(1){e=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=e;x[c+8>>2]=x[d+8>>2];c=c+12|0;h=h+1|0;if((i|0)!=(h|0)){continue}break}}if(j>>>0<36){break h}while(1){e=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=e;x[c+8>>2]=x[d+8>>2];x[c+20>>2]=x[d+8>>2];e=x[d+4>>2];x[c+12>>2]=x[d>>2];x[c+16>>2]=e;x[c+32>>2]=x[d+8>>2];e=x[d+4>>2];x[c+24>>2]=x[d>>2];x[c+28>>2]=e;e=x[d+4>>2];x[c+36>>2]=x[d>>2];x[c+40>>2]=e;x[c+44>>2]=x[d+8>>2];c=c+48|0;if((k|0)!=(c|0)){continue}break}break h}while(1){j:{if(c<<24>>24>=0){c=x[d+4>>2];x[a>>2]=x[d>>2];x[a+4>>2]=c;x[a+8>>2]=x[d+8>>2];break j}e=x[d+4>>2];c=x[d>>2];x[5120]=0;U(4,a|0,c|0,e|0);c=x[5120];x[5120]=0;if((c|0)==1){break b}}a=a+12|0;if((k|0)!=(a|0)){c=y[d+11|0];continue}break}a=x[f+4>>2]}d=x[f>>2];if((d|0)==(a|0)){c=a}else{while(1){a=a-12|0;c=x[a+4>>2];b=b-12|0;x[b>>2]=x[a>>2];x[b+4>>2]=c;x[b+8>>2]=x[a+8>>2];x[a>>2]=0;x[a+4>>2]=0;x[a+8>>2]=0;if((a|0)!=(d|0)){continue}break}a=x[f+4>>2];c=x[f>>2]}x[f>>2]=b;x[g+12>>2]=c;x[f+4>>2]=k;b=x[f+8>>2];x[f+8>>2]=l;x[g+8>>2]=c;x[g+20>>2]=b;if((a|0)!=(c|0)){while(1){b=a-12|0;x[g+16>>2]=b;if(v[a-1|0]<0){db(x[b>>2])}a=b;if((c|0)!=(a|0)){continue}break}a=c}if(!a){break e}db(a)}Wa=g+32|0;break a}oc();p()}Mc();p()}b=P()|0;x[g+16>>2]=a;Tf(g+8|0);R(b|0);p()}return}if(b>>>0<i>>>0){c=d+D(b,12)|0;if((c|0)!=(f|0)){while(1){b=f-12|0;if(v[f-1|0]<0){db(x[b>>2])}f=b;if((c|0)!=(b|0)){continue}break}}x[a+4>>2]=c}}function Gl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-352|0;Wa=g;x[g+336>>2]=c;x[g+344>>2]=b;h=fb(g+208|0);x[5120]=0;a=x[d+28>>2];x[g+16>>2]=a;x[a+4>>2]=x[a+4>>2]+1;a=x[5120];x[5120]=0;a:{b:{c:{d:{if((a|0)!=1){x[5120]=0;b=Q(159,g+16|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;W(172,b|0,9152,9178,g+224|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}b=x[g+16>>2];a=x[b+4>>2]-1|0;x[b+4>>2]=a;if((a|0)==-1){Za[x[x[b>>2]+8>>2]](b)}a=fb(g+192|0);if(y[a+11|0]>>>7|0){b=(x[a+8>>2]&2147483647)-1|0}else{b=10}x[5120]=0;S(139,a|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[g+188>>2]=b;x[g+12>>2]=g+16;x[g+8>>2]=0;while(1){e:{x[5120]=0;d=T(164,g+344|0,g+336|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break e}if(d){break c}d=x[g+188>>2];if(y[a+11|0]>>>7|0){c=x[a+4>>2]}else{c=y[a+11|0]&127}if((d|0)==(c+b|0)){if(y[a+11|0]>>>7|0){c=x[a+4>>2]}else{c=y[a+11|0]&127}if(y[a+11|0]>>>7|0){b=x[a+4>>2]}else{b=y[a+11|0]&127}x[5120]=0;S(139,a|0,b<<1);b=x[5120];x[5120]=0;if((b|0)==1){break b}b=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,a|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[g+188>>2]=c+b}x[5120]=0;d=Q(165,g+344|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break e}x[5120]=0;d=hc(d,16,b,g+188|0,g+8|0,0,h,g+16|0,g+12|0,g+224|0);c=x[5120];x[5120]=0;if((c|0)==1){break e}if(d){break c}x[5120]=0;Q(167,g+344|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){continue}}break}break b}b=P()|0;break a}b=P()|0;c=x[g+16>>2];a=x[c+4>>2]-1|0;x[c+4>>2]=a;if((a|0)==-1){Za[x[x[c>>2]+8>>2]](c)}break a}x[5120]=0;S(139,a|0,x[g+188>>2]-b|0);b=x[5120];x[5120]=0;f:{if((b|0)==1){break f}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[5120]=0;d=Z(156)|0;c=x[5120];x[5120]=0;if((c|0)==1){break f}x[g>>2]=f;x[5120]=0;c=W(157,b|0,d|0,1437,g|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if((c|0)!=1){x[e>>2]=4}x[5120]=0;c=T(164,g+344|0,g+336|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}b=x[g+344>>2];cb(a);cb(h);Wa=g+352|0;return b|0}}b=P()|0;cb(a)}cb(h);R(b|0);p()}function Vl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-272|0;Wa=g;x[g+256>>2]=c;x[g+264>>2]=b;h=fb(g+208|0);x[5120]=0;a=x[d+28>>2];x[g+16>>2]=a;x[a+4>>2]=x[a+4>>2]+1;a=x[5120];x[5120]=0;a:{b:{c:{d:{if((a|0)!=1){x[5120]=0;b=Q(61,g+16|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[5120]=0;W(152,b|0,9152,9178,g+224|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}b=x[g+16>>2];a=x[b+4>>2]-1|0;x[b+4>>2]=a;if((a|0)==-1){Za[x[x[b>>2]+8>>2]](b)}a=fb(g+192|0);if(y[a+11|0]>>>7|0){b=(x[a+8>>2]&2147483647)-1|0}else{b=10}x[5120]=0;S(139,a|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[g+188>>2]=b;x[g+12>>2]=g+16;x[g+8>>2]=0;while(1){e:{x[5120]=0;d=T(134,g+264|0,g+256|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break e}if(d){break c}d=x[g+188>>2];if(y[a+11|0]>>>7|0){c=x[a+4>>2]}else{c=y[a+11|0]&127}if((d|0)==(c+b|0)){if(y[a+11|0]>>>7|0){c=x[a+4>>2]}else{c=y[a+11|0]&127}if(y[a+11|0]>>>7|0){b=x[a+4>>2]}else{b=y[a+11|0]&127}x[5120]=0;S(139,a|0,b<<1);b=x[5120];x[5120]=0;if((b|0)==1){break b}b=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,a|0,b|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[g+188>>2]=c+b}x[5120]=0;d=Q(135,g+264|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break e}x[5120]=0;d=ic(d,16,b,g+188|0,g+8|0,0,h,g+16|0,g+12|0,g+224|0);c=x[5120];x[5120]=0;if((c|0)==1){break e}if(d){break c}x[5120]=0;Q(137,g+264|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){continue}}break}break b}b=P()|0;break a}b=P()|0;c=x[g+16>>2];a=x[c+4>>2]-1|0;x[c+4>>2]=a;if((a|0)==-1){Za[x[x[c>>2]+8>>2]](c)}break a}x[5120]=0;S(139,a|0,x[g+188>>2]-b|0);b=x[5120];x[5120]=0;f:{if((b|0)==1){break f}if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}x[5120]=0;d=Z(156)|0;c=x[5120];x[5120]=0;if((c|0)==1){break f}x[g>>2]=f;x[5120]=0;c=W(157,b|0,d|0,1437,g|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if((c|0)!=1){x[e>>2]=4}x[5120]=0;c=T(134,g+264|0,g+256|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}b=x[g+264>>2];cb(a);cb(h);Wa=g+272|0;return b|0}}b=P()|0;cb(a)}cb(h);R(b|0);p()}function wg(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=Wa-128|0;Wa=j;a:{b:{c:{if(!qc(f,g,h,i,0,0,0,0)){break c}l=i&65535;n=i>>>16&32767;d:{e:{if((n|0)!=32767){k=4;if(n){break e}k=f|h|(g|l)?3:2;break d}k=!(f|h|(g|l))}}s=e>>>16|0;o=s&32767;if((o|0)==32767){break c}if(k){break b}}mb(j+16|0,b,c,d,e,f,g,h,i);b=x[j+16>>2];d=x[j+20>>2];e=x[j+24>>2];c=x[j+28>>2];xg(j,b,d,e,c,b,d,e,c);d=x[j+8>>2];e=x[j+12>>2];h=x[j>>2];i=x[j+4>>2];break a}k=d;p=e&2147483647;n=h;m=i&2147483647;if((qc(b,c,k,p,f,g,h,m)|0)<=0){if(qc(b,c,k,p,f,g,n,m)){h=b;i=c;break a}mb(j+112|0,b,c,d,e,0,0,0,0);d=x[j+120>>2];e=x[j+124>>2];h=x[j+112>>2];i=x[j+116>>2];break a}q=i>>>16&32767;if(o){i=c;h=b}else{mb(j+96|0,b,c,k,p,0,0,0,1081540608);k=x[j+104>>2];h=x[j+108>>2];p=h;o=(h>>>16|0)-120|0;i=x[j+100>>2];h=x[j+96>>2]}if(!q){mb(j+80|0,f,g,n,m,0,0,0,1081540608);n=x[j+88>>2];f=x[j+92>>2];m=f;q=(f>>>16|0)-120|0;g=x[j+84>>2];f=x[j+80>>2]}r=n;t=m&65535|65536;p=p&65535|65536;if((o|0)>(q|0)){while(1){m=k-r|0;l=(g|0)==(i|0)&f>>>0>h>>>0|g>>>0>i>>>0;n=m-l|0;l=(p-((k>>>0<r>>>0)+t|0)|0)-(l>>>0>m>>>0)|0;f:{if((l|0)>0|(l|0)>=0){k=h;h=h-f|0;i=i-((f>>>0>k>>>0)+g|0)|0;if(!(h|n|(i|l))){mb(j+32|0,b,c,d,e,0,0,0,0);d=x[j+40>>2];e=x[j+44>>2];h=x[j+32>>2];i=x[j+36>>2];break a}l=l<<1|n>>>31;k=n<<1|i>>>31;break f}l=p<<1|k>>>31;k=k<<1|i>>>31}p=l;l=i<<1|h>>>31;h=h<<1;i=l;o=o-1|0;if((o|0)>(q|0)){continue}break}o=q}m=k-r|0;l=(g|0)==(i|0)&f>>>0>h>>>0|g>>>0>i>>>0;n=m-l|0;l=(p-((k>>>0<r>>>0)+t|0)|0)-(l>>>0>m>>>0)|0;m=l;g:{if((l|0)<0){n=k;m=p;break g}k=h;h=h-f|0;i=i-((f>>>0>k>>>0)+g|0)|0;if(h|n|(i|m)){break g}mb(j+48|0,b,c,d,e,0,0,0,0);d=x[j+56>>2];e=x[j+60>>2];h=x[j+48>>2];i=x[j+52>>2];break a}if((m|0)==65535|m>>>0<65535){while(1){b=i>>>31|0;o=o-1|0;p=i<<1|h>>>31;h=h<<1;i=p;c=b;b=m<<1|n>>>31;n=c|n<<1;m=b;if(b>>>0<65536){continue}break}}b=s&32768;if((o|0)<=0){mb(j- -64|0,h,i,n,m&65535|(b|o+120)<<16,0,0,0,1065811968);d=x[j+72>>2];e=x[j+76>>2];h=x[j+64>>2];i=x[j+68>>2];break a}d=n;e=m&65535|(b|o)<<16}x[a>>2]=h;x[a+4>>2]=i;x[a+8>>2]=d;x[a+12>>2]=e;Wa=j+128|0}function nn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=c|8;g=a+8|0;a:{b:{if(x[g+64>>2]){break b}c=1154;c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{f=i&-3;switch(f-1|0){case 11:break h;case 4:case 20:break i;case 19:break j;case 8:case 24:break k;case 23:break m;case 7:break n;case 0:case 16:break o;case 15:break c;case 1:case 2:case 3:case 5:case 6:case 9:case 10:case 13:case 14:case 17:case 18:case 21:case 22:case 25:case 26:break d;case 12:case 28:break e;case 27:break g;default:break p}}q:{switch(f-48|0){case 4:break j;case 0:break c;case 1:case 2:case 3:break d;default:break q}}switch(f-56|0){case 0:break l;case 4:break f;default:break d}}c=1979;break c}c=1422;break c}c=2708;break c}c=2705;break c}c=2711;break c}c=1925;break c}c=1935;break c}c=1928;break c}c=1942;break c}c=1938;break c}c=1946;break c}c=0}f=c;if(!c){break b}c=0;h=Wa-16|0;Wa=h;r:{s:{if(!tc(1950,v[f|0])){x[4995]=28;break s}d=2;if(!tc(f,43)){d=y[f|0]!=114}d=tc(f,120)?d|128:d;d=tc(f,101)?d|524288:d;e=d;j=d|64;d=y[f|0];e=(d|0)==114?e:j;e=(d|0)==119?e|512:e;x[h>>2]=438;x[h+4>>2]=0;d=Ma(-100,b|0,((d|0)==97?e|1024:e)|32768,h|0)|0;if(d>>>0>=4294963201){x[4995]=0-d;d=-1}if((d|0)<0){break r}e=Wa-32|0;Wa=e;t:{u:{v:{if(!tc(1950,v[f|0])){x[4995]=28;break v}c=ob(1176);if(c){break u}}c=0;break t}Mb(c,0,144);if(!tc(f,43)){x[c>>2]=y[f|0]==114?8:4}w:{if(y[f|0]!=97){b=x[c>>2];break w}b=wa(d|0,3,0)|0;if(!(b&1024)){b=b|1024;x[e+16>>2]=b;x[e+20>>2]=b>>31;wa(d|0,4,e+16|0)|0}b=x[c>>2]|128;x[c>>2]=b}x[c+80>>2]=-1;x[c+48>>2]=1024;x[c+60>>2]=d;x[c+44>>2]=c+152;x:{if(b&8){break x}x[e>>2]=e+24;x[e+4>>2]=0;if(La(d|0,21523,e|0)|0){break x}x[c+80>>2]=10}x[c+40>>2]=56;x[c+36>>2]=57;x[c+32>>2]=58;x[c+12>>2]=59;if(!y[20489]){x[c+76>>2]=-1}x[c+56>>2]=x[5137];b=x[5137];if(b){x[b+52>>2]=c}x[5137]=c}Wa=e+32|0;if(c){break r}ua(d|0)|0}c=0}Wa=h+16|0;x[g+64>>2]=c;if(!c){break b}x[g+88>>2]=i;if(!(i&2)){break a}if(!Vc(c,0,0,2)){break a}yd(x[g+64>>2]);x[g+64>>2]=0}g=0}a=x[x[a>>2]-12>>2]+a|0;if(g){ie(a,0);return}ne(a,4)}function $d(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=x[b>>2];a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{l:{if(!d){break l}g=x[d>>2];if(!g){break l}if(!a){d=c;break j}x[d>>2]=0;d=c;break k}m:{if(!x[x[5164]>>2]){if(!a){break m}if(!c){break a}g=c;while(1){d=v[e|0];if(d){x[a>>2]=d&57343;a=a+4|0;e=e+1|0;g=g-1|0;if(g){continue}break a}break}x[a>>2]=0;x[b>>2]=0;return c-g|0}d=c;if(!a){break i}break g}return _b(e)|0}f=1;break g}f=0;break h}f=1}while(1){if(!f){f=y[e|0]>>>3|0;if((f-16|f+(g>>26))>>>0>7){break f}f=e+1|0;n:{if(!(g&33554432)){break n}if((y[f|0]&192)!=128){e=e-1|0;break d}f=e+2|0;if(!(g&524288)){break n}if((y[f|0]&192)!=128){e=e-1|0;break d}f=e+3|0}e=f;d=d-1|0;f=1;continue}while(1){g=y[e|0];o:{if(e&3|g-1>>>0>126){break o}g=x[e>>2];if((g|g-16843009)&-2139062144){break o}while(1){d=d-4|0;g=x[e+4>>2];e=e+4|0;if(!((g-16843009|g)&-2139062144)){continue}break}}f=g&255;if(f-1>>>0<=126){d=d-1|0;e=e+1|0;continue}break}f=f-194|0;if(f>>>0>50){break e}e=e+1|0;g=x[(f<<2)+5168>>2];f=0;continue}}while(1){if(!f){if(!d){break a}while(1){p:{f=y[e|0];h=f-1|0;q:{r:{if(h>>>0>126){g=f;break r}if(e&3|d>>>0<5){break q}s:{while(1){g=x[e>>2];if((g|g-16843009)&-2139062144){break s}x[a>>2]=g&255;x[a+4>>2]=y[e+1|0];x[a+8>>2]=y[e+2|0];x[a+12>>2]=y[e+3|0];a=a+16|0;e=e+4|0;d=d-4|0;if(d>>>0>4){continue}break}g=y[e|0]}f=g&255;h=f-1|0}if(h>>>0>126){break p}}x[a>>2]=f;a=a+4|0;e=e+1|0;d=d-1|0;if(d){continue}break a}break}f=f-194|0;if(f>>>0>50){break e}e=e+1|0;g=x[(f<<2)+5168>>2];f=1;continue}i=y[e|0];f=i>>>3|0;if((f-16|f+(g>>26))>>>0>7){break f}t:{u:{h=e+1|0;f=i-128|g<<6;v:{if((f|0)>=0){break v}i=y[h|0]-128|0;if(i>>>0>63){break u}h=e+2|0;f=i|f<<6;if((f|0)>=0){break v}h=y[h|0]-128|0;if(h>>>0>63){break u}f=h|f<<6;h=e+3|0}e=h;x[a>>2]=f;d=d-1|0;a=a+4|0;break t}x[4995]=25;e=e-1|0;break c}f=0;continue}}e=e-1|0;if(g){break d}g=y[e|0]}if(g&255){break d}if(a){x[a>>2]=0;x[b>>2]=0}return c-d|0}x[4995]=25;if(!a){break b}}x[b>>2]=e}return-1}x[b>>2]=e;return c|0}function zk(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,w=0,z=0,A=0,B=0;t=Wa-16|0;Wa=t;x[c>>2]=a;z=d&512;A=h<<2;while(1){if((u|0)==4){if(y[n+11|0]>>>7|0){e=x[n+4>>2]}else{e=y[n+11|0]&127}if(e>>>0>1){x[t+8>>2]=Jb(n);x[c>>2]=yf(Qd(t+8|0,1),ec(n),x[c>>2])}d=d&176;if((d|0)!=16){if((d|0)==32){a=x[c>>2]}x[b>>2]=a}Wa=t+16|0}else{a:{b:{switch(v[i+u|0]){case 0:x[b>>2]=x[c>>2];break a;case 1:x[b>>2]=x[c>>2];h=Za[x[x[g>>2]+44>>2]](g,32)|0;p=x[c>>2];x[c>>2]=p+4;x[p>>2]=h;break a;case 3:if(y[n+11|0]>>>7|0){h=x[n+4>>2]}else{h=y[n+11|0]&127}if(!h){break a}if(y[n+11|0]>>>7|0){h=x[n>>2]}else{h=n}h=x[h>>2];p=x[c>>2];x[c>>2]=p+4;x[p>>2]=h;break a;case 2:p=!z;if(y[m+11|0]>>>7|0){h=x[m+4>>2]}else{h=y[m+11|0]&127}if(p|!h){break a}x[c>>2]=yf(Jb(m),ec(m),x[c>>2]);break a;case 4:break b;default:break a}}B=x[c>>2];e=e+A|0;h=e;while(1){c:{if(f>>>0<=h>>>0){break c}if(!(Za[x[x[g>>2]+12>>2]](g,64,x[h>>2])|0)){break c}h=h+4|0;continue}break}if((o|0)>0){p=x[c>>2];r=o;while(1){if(!(!r|e>>>0>=h>>>0)){h=h-4|0;s=x[h>>2];q=p+4|0;x[c>>2]=q;x[p>>2]=s;r=r-1|0;p=q;continue}break}d:{if(!r){q=0;break d}q=Za[x[x[g>>2]+44>>2]](g,48)|0;p=x[c>>2]}while(1){s=p+4|0;if((r|0)>0){x[p>>2]=q;r=r-1|0;p=s;continue}break}x[c>>2]=s;x[p>>2]=j}e:{if((e|0)==(h|0)){p=Za[x[x[g>>2]+44>>2]](g,48)|0;q=x[c>>2];h=q+4|0;x[c>>2]=h;x[q>>2]=p;break e}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}q=v[p|0];if(y[l+11|0]>>>7|0){p=x[l+4>>2]}else{p=y[l+11|0]&127}q=p?q:-1;p=0;r=0;while(1){if((e|0)!=(h|0)){f:{if((p|0)!=(q|0)){s=p;break f}q=x[c>>2];x[c>>2]=q+4;x[q>>2]=k;s=0;if(y[l+11|0]>>>7|0){q=x[l+4>>2]}else{q=y[l+11|0]&127}r=r+1|0;if(q>>>0<=r>>>0){q=p;break f}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}if(y[p+r|0]==127){q=-1;break f}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}q=v[p+r|0]}h=h-4|0;p=x[h>>2];w=x[c>>2];x[c>>2]=w+4;x[w>>2]=p;p=s+1|0;continue}break}h=x[c>>2]}Lc(B,h)}u=u+1|0;continue}break}}function Ek(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,w=0,z=0,A=0,B=0;u=Wa-16|0;Wa=u;x[c>>2]=a;A=d&512;while(1){if((w|0)==4){if(y[n+11|0]>>>7|0){e=x[n+4>>2]}else{e=y[n+11|0]&127}if(e>>>0>1){x[u+8>>2]=Jb(n);x[c>>2]=zf(Rd(u+8|0,1),gc(n),x[c>>2])}d=d&176;if((d|0)!=16){if((d|0)==32){a=x[c>>2]}x[b>>2]=a}Wa=u+16|0}else{a:{b:{switch(v[i+w|0]){case 0:x[b>>2]=x[c>>2];break a;case 1:x[b>>2]=x[c>>2];p=Za[x[x[g>>2]+28>>2]](g,32)|0;q=x[c>>2];x[c>>2]=q+1;v[q|0]=p;break a;case 3:if(y[n+11|0]>>>7|0){p=x[n+4>>2]}else{p=y[n+11|0]&127}if(!p){break a}if(y[n+11|0]>>>7|0){p=x[n>>2]}else{p=n}p=y[p|0];q=x[c>>2];x[c>>2]=q+1;v[q|0]=p;break a;case 2:q=!A;if(y[m+11|0]>>>7|0){p=x[m+4>>2]}else{p=y[m+11|0]&127}if(q|!p){break a}x[c>>2]=zf(Jb(m),gc(m),x[c>>2]);break a;case 4:break b;default:break a}}B=x[c>>2];e=e+h|0;r=e;while(1){c:{if(f>>>0<=r>>>0){break c}p=v[r|0];if((p|0)>=0){p=(x[x[g+8>>2]+((p&255)<<2)>>2]&64)!=0}else{p=0}if(!p){break c}r=r+1|0;continue}break}p=o;if((p|0)>0){while(1){if(!(!p|e>>>0>=r>>>0)){r=r-1|0;q=y[r|0];s=x[c>>2];x[c>>2]=s+1;v[s|0]=q;p=p-1|0;continue}break}if(p){q=Za[x[x[g>>2]+28>>2]](g,48)|0}else{q=0}while(1){s=x[c>>2];x[c>>2]=s+1;if((p|0)>0){v[s|0]=q;p=p-1|0;continue}break}v[s|0]=j}d:{if((e|0)==(r|0)){p=Za[x[x[g>>2]+28>>2]](g,48)|0;q=x[c>>2];x[c>>2]=q+1;v[q|0]=p;break d}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}q=v[p|0];if(y[l+11|0]>>>7|0){p=x[l+4>>2]}else{p=y[l+11|0]&127}q=p?q:-1;p=0;t=0;while(1){if((e|0)==(r|0)){break d}e:{if((p|0)!=(q|0)){s=p;break e}q=x[c>>2];x[c>>2]=q+1;v[q|0]=k;s=0;if(y[l+11|0]>>>7|0){q=x[l+4>>2]}else{q=y[l+11|0]&127}t=t+1|0;if(q>>>0<=t>>>0){q=p;break e}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}if(y[p+t|0]==127){q=-1;break e}if(y[l+11|0]>>>7|0){p=x[l>>2]}else{p=l}q=v[p+t|0]}r=r-1|0;p=y[r|0];z=x[c>>2];x[c>>2]=z+1;v[z|0]=p;p=s+1|0;continue}}dc(B,x[c>>2])}w=w+1|0;continue}break}}function yk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0;g=Wa-496|0;Wa=g;a=g+488|0;h=x[d+28>>2];x[a>>2]=h;x[h+4>>2]=x[h+4>>2]+1;x[5120]=0;n=Q(159,a|0)|0;a=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{if((a|0)!=1){if(y[f+11|0]>>>7|0){a=x[f+4>>2]}else{a=y[f+11|0]&127}if(a){if(y[f+11|0]>>>7|0){a=x[f>>2]}else{a=f}k=x[a>>2];x[5120]=0;h=T(188,n|0,45)|0;a=x[5120];x[5120]=0;if((a|0)==1){break g}o=(h|0)==(k|0)}l=fb(g+456|0);i=fb(g+440|0);j=fb(g+424|0);x[5120]=0;ia(220,c|0,o|0,g+488|0,g+480|0,g+476|0,g+472|0,l|0,i|0,j|0,g+420|0);a=x[5120];x[5120]=0;if((a|0)==1){break f}x[g+4>>2]=132;m=qb(g+8|0,0,g+4|0);c=g+16|0;if(y[f+11|0]>>>7|0){a=x[f+4>>2]}else{a=y[f+11|0]&127}h:{if((a|0)>x[g+420>>2]){if(y[f+11|0]>>>7|0){h=x[f+4>>2]}else{h=y[f+11|0]&127}k=x[g+420>>2];if(y[i+11|0]>>>7|0){a=x[i+4>>2]}else{a=y[i+11|0]&127}if(y[j+11|0]>>>7|0){q=x[j+4>>2]}else{q=y[j+11|0]&127}a=(k+(a+(q+(h-k<<1)|0)|0)|0)+1|0;break h}k=x[g+420>>2];if(y[j+11|0]>>>7|0){a=x[j+4>>2]}else{a=y[j+11|0]&127}if(y[i+11|0]>>>7|0){h=x[i+4>>2]}else{h=y[i+11|0]&127}a=(k+(a+h|0)|0)+2|0}if(a>>>0<101){break e}vb(m,ob(a<<2));c=x[m>>2];if(c){break e}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}p()}f=P()|0;break b}f=P()|0;break b}f=P()|0;break c}k=x[d+4>>2];if(y[f+11|0]>>>7|0){h=x[f>>2]}else{h=f}if(y[f+11|0]>>>7|0){a=x[f>>2]}else{a=f}if(y[f+11|0]>>>7|0){f=x[f+4>>2]}else{f=y[f+11|0]&127}x[5120]=0;ma(221,c|0,g+4|0,g|0,k|0,h|0,(f<<2)+a|0,n|0,o|0,g+480|0,x[g+476>>2],x[g+472>>2],l|0,i|0,j|0,x[g+420>>2]);a=x[5120];x[5120]=0;if((a|0)!=1){x[5120]=0;b=ga(192,b|0,c|0,x[g+4>>2],x[g>>2],d|0,e|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){break a}}}f=P()|0;eb(m)}gb(j);gb(i);cb(l)}b=x[g+488>>2];a=x[b+4>>2]-1|0;x[b+4>>2]=a;if((a|0)==-1){Za[x[x[b>>2]+8>>2]](b)}R(f|0);p()}eb(m);gb(j);gb(i);cb(l);c=x[g+488>>2];a=x[c+4>>2]-1|0;x[c+4>>2]=a;if((a|0)==-1){Za[x[x[c>>2]+8>>2]](c)}Wa=g+496|0;return b|0}function Ck(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0;g=Wa-192|0;Wa=g;a=g+184|0;h=x[d+28>>2];x[a>>2]=h;x[h+4>>2]=x[h+4>>2]+1;x[5120]=0;n=Q(61,a|0)|0;a=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{if((a|0)!=1){if(y[f+11|0]>>>7|0){a=x[f+4>>2]}else{a=y[f+11|0]&127}if(a){if(y[f+11|0]>>>7|0){a=x[f>>2]}else{a=f}k=y[a|0];x[5120]=0;h=T(176,n|0,45)|0;a=x[5120];x[5120]=0;if((a|0)==1){break g}o=(k|0)==(h&255)}l=fb(g+160|0);i=fb(g+144|0);j=fb(g+128|0);x[5120]=0;ia(218,c|0,o|0,g+184|0,g+176|0,g+175|0,g+174|0,l|0,i|0,j|0,g+124|0);a=x[5120];x[5120]=0;if((a|0)==1){break f}x[g+4>>2]=132;m=qb(g+8|0,0,g+4|0);c=g+16|0;if(y[f+11|0]>>>7|0){a=x[f+4>>2]}else{a=y[f+11|0]&127}h:{if((a|0)>x[g+124>>2]){if(y[f+11|0]>>>7|0){h=x[f+4>>2]}else{h=y[f+11|0]&127}k=x[g+124>>2];if(y[i+11|0]>>>7|0){a=x[i+4>>2]}else{a=y[i+11|0]&127}if(y[j+11|0]>>>7|0){q=x[j+4>>2]}else{q=y[j+11|0]&127}a=(k+(a+(q+(h-k<<1)|0)|0)|0)+1|0;break h}k=x[g+124>>2];if(y[j+11|0]>>>7|0){a=x[j+4>>2]}else{a=y[j+11|0]&127}if(y[i+11|0]>>>7|0){h=x[i+4>>2]}else{h=y[i+11|0]&127}a=(k+(a+h|0)|0)+2|0}if(a>>>0<101){break e}vb(m,ob(a));c=x[m>>2];if(c){break e}x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}p()}f=P()|0;break b}f=P()|0;break b}f=P()|0;break c}k=x[d+4>>2];if(y[f+11|0]>>>7|0){h=x[f>>2]}else{h=f}if(y[f+11|0]>>>7|0){a=x[f>>2]}else{a=f}if(y[f+11|0]>>>7|0){f=x[f+4>>2]}else{f=y[f+11|0]&127}x[5120]=0;ma(219,c|0,g+4|0,g|0,k|0,h|0,a+f|0,n|0,o|0,g+176|0,v[g+175|0],v[g+174|0],l|0,i|0,j|0,x[g+124>>2]);a=x[5120];x[5120]=0;if((a|0)!=1){x[5120]=0;b=ga(181,b|0,c|0,x[g+4>>2],x[g>>2],d|0,e|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){break a}}}f=P()|0;eb(m)}cb(j);cb(i);cb(l)}b=x[g+184>>2];a=x[b+4>>2]-1|0;x[b+4>>2]=a;if((a|0)==-1){Za[x[x[b>>2]+8>>2]](b)}R(f|0);p()}eb(m);cb(j);cb(i);cb(l);c=x[g+184>>2];a=x[c+4>>2]-1|0;x[c+4>>2]=a;if((a|0)==-1){Za[x[x[c>>2]+8>>2]](c)}Wa=g+192|0;return b|0}function Hl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;a=Wa-384|0;Wa=a;x[a+368>>2]=c;x[a+376>>2]=b;Ud(a+216|0,d,a+240|0,a+236|0,a+232|0);b=fb(a+200|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+196>>2]=c;x[a+28>>2]=a+32;x[a+24>>2]=0;v[a+23|0]=1;v[a+22|0]=69;while(1){d:{x[5120]=0;d=T(164,a+376|0,a+368|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+196>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+196>>2]=d+c}x[5120]=0;d=Q(165,a+376|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ld(d,a+23|0,a+22|0,c,a+196|0,x[a+236>>2],x[a+232>>2],a+216|0,a+32|0,a+28|0,a+24|0,a+240|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+376|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+227|0]>>>7|0){d=x[a+220>>2]}else{d=y[a+227|0]&127}e:{if(!d|!y[a+23|0]){break e}d=x[a+28>>2];if((d-(a+32|0)|0)>159){break e}x[a+28>>2]=d+4;x[d>>2]=x[a+24>>2]}x[5120]=0;xa(155,a|0,c|0,x[a+196>>2],e|0);c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}c=x[a+8>>2];d=x[a+12>>2];g=x[a+4>>2];x[f>>2]=x[a>>2];x[f+4>>2]=g;x[f+8>>2]=c;x[f+12>>2]=d;x[5120]=0;wb(a+216|0,a+32|0,x[a+28>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+376|0,a+368|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+376>>2];cb(b);cb(a+216|0);Wa=a+384|0;break a}}c=P()|0;cb(b);cb(a+216|0);R(c|0);p()}return c|0}function Xl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;a=Wa-288|0;Wa=a;x[a+272>>2]=c;x[a+280>>2]=b;Xd(a+224|0,d,a+240|0,a+239|0,a+238|0);b=fb(a+208|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+204>>2]=c;x[a+28>>2]=a+32;x[a+24>>2]=0;v[a+23|0]=1;v[a+22|0]=69;while(1){d:{x[5120]=0;d=T(134,a+280|0,a+272|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+204>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+204>>2]=d+c}x[5120]=0;d=Q(135,a+280|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=nd(d,a+23|0,a+22|0,c,a+204|0,v[a+239|0],v[a+238|0],a+224|0,a+32|0,a+28|0,a+24|0,a+240|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+280|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+235|0]>>>7|0){d=x[a+228>>2]}else{d=y[a+235|0]&127}e:{if(!d|!y[a+23|0]){break e}d=x[a+28>>2];if((d-(a+32|0)|0)>159){break e}x[a+28>>2]=d+4;x[d>>2]=x[a+24>>2]}x[5120]=0;xa(155,a|0,c|0,x[a+204>>2],e|0);c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}c=x[a+8>>2];d=x[a+12>>2];g=x[a+4>>2];x[f>>2]=x[a>>2];x[f+4>>2]=g;x[f+8>>2]=c;x[f+12>>2]=d;x[5120]=0;wb(a+224|0,a+32|0,x[a+28>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+280|0,a+272|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+280>>2];cb(b);cb(a+224|0);Wa=a+288|0;break a}}c=P()|0;cb(b);cb(a+224|0);R(c|0);p()}return c|0}function ul(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0;i=Wa-256|0;Wa=i;x[i+248>>2]=37;x[i+252>>2]=0;m=kd(i+248|1,2032,x[c+4>>2]);x[i+204>>2]=i+208;a=sb();a:{if(m){k=x[c+8>>2];j=i- -64|0;x[j>>2]=g;x[j+4>>2]=h;x[i+56>>2]=e;x[i+60>>2]=f;x[i+48>>2]=k;a=Cb(i+208|0,30,a,i+248|0,i+48|0);break a}x[i+80>>2]=e;x[i+84>>2]=f;x[i+88>>2]=g;x[i+92>>2]=h;a=Cb(i+208|0,30,a,i+248|0,i+80|0)}x[i+128>>2]=132;k=qb(i+192|0,0,i+128|0);l=i+208|0;j=l;b:{c:{d:{e:{if((a|0)>=30){f:{if(m){x[5120]=0;a=Z(156)|0;j=x[5120];x[5120]=0;if((j|0)==1){break d}j=x[c+8>>2];x[i+16>>2]=g;x[i+20>>2]=h;x[i>>2]=j;x[5120]=0;x[i+8>>2]=e;x[i+12>>2]=f;a=W(179,i+204|0,a|0,i+248|0,i|0)|0;e=x[5120];x[5120]=0;if((e|0)!=1){break f}break d}x[5120]=0;a=Z(156)|0;j=x[5120];x[5120]=0;if((j|0)==1){break d}x[i+32>>2]=e;x[i+36>>2]=f;x[5120]=0;x[i+40>>2]=g;x[i+44>>2]=h;a=W(179,i+204|0,a|0,i+248|0,i+32|0)|0;e=x[5120];x[5120]=0;if((e|0)==1){break d}}if((a|0)==-1){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break e}vb(k,x[i+204>>2]);j=x[i+204>>2]}g=a+j|0;h=Ib(j,g,c);x[i+116>>2]=132;e=qb(i+120|0,0,i+116|0);g:{h:{if(x[i+204>>2]==(i+208|0)){a=i+128|0;break h}a=ob(a<<1);if(!a){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break e}b=P()|0;break g}vb(e,a);l=x[i+204>>2]}x[5120]=0;f=x[c+28>>2];x[i+104>>2]=f;x[f+4>>2]=x[f+4>>2]+1;f=x[5120];x[5120]=0;i:{j:{if((f|0)!=1){x[5120]=0;$(180,l|0,h|0,g|0,a|0,i+116|0,i+112|0,i+104|0);f=x[5120];x[5120]=0;if((f|0)==1){break j}f=x[i+104>>2];g=x[f+4>>2]-1|0;x[f+4>>2]=g;if((g|0)==-1){Za[x[x[f>>2]+8>>2]](f)}x[5120]=0;a=ga(181,b|0,a|0,x[i+116>>2],x[i+112>>2],c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break i}eb(e);eb(k);Wa=i+256|0;break b}b=P()|0;break g}b=P()|0;a=x[i+104>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break g}b=P()|0}eb(e);break c}p()}b=P()|0}eb(k);R(b|0);p()}return a|0}function kl(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0;i=Wa-432|0;Wa=i;x[i+424>>2]=37;x[i+428>>2]=0;m=kd(i+424|1,2032,x[c+4>>2]);x[i+380>>2]=i+384;a=sb();a:{if(m){k=x[c+8>>2];j=i- -64|0;x[j>>2]=g;x[j+4>>2]=h;x[i+56>>2]=e;x[i+60>>2]=f;x[i+48>>2]=k;a=Cb(i+384|0,30,a,i+424|0,i+48|0);break a}x[i+80>>2]=e;x[i+84>>2]=f;x[i+88>>2]=g;x[i+92>>2]=h;a=Cb(i+384|0,30,a,i+424|0,i+80|0)}x[i+128>>2]=132;k=qb(i+368|0,0,i+128|0);l=i+384|0;j=l;b:{c:{d:{e:{if((a|0)>=30){f:{if(m){x[5120]=0;a=Z(156)|0;j=x[5120];x[5120]=0;if((j|0)==1){break d}j=x[c+8>>2];x[i+16>>2]=g;x[i+20>>2]=h;x[i>>2]=j;x[5120]=0;x[i+8>>2]=e;x[i+12>>2]=f;a=W(179,i+380|0,a|0,i+424|0,i|0)|0;e=x[5120];x[5120]=0;if((e|0)!=1){break f}break d}x[5120]=0;a=Z(156)|0;j=x[5120];x[5120]=0;if((j|0)==1){break d}x[i+32>>2]=e;x[i+36>>2]=f;x[5120]=0;x[i+40>>2]=g;x[i+44>>2]=h;a=W(179,i+380|0,a|0,i+424|0,i+32|0)|0;e=x[5120];x[5120]=0;if((e|0)==1){break d}}if((a|0)==-1){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break e}vb(k,x[i+380>>2]);j=x[i+380>>2]}g=a+j|0;h=Ib(j,g,c);x[i+116>>2]=132;e=qb(i+120|0,0,i+116|0);g:{h:{if(x[i+380>>2]==(i+384|0)){a=i+128|0;break h}a=ob(a<<3);if(!a){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break e}b=P()|0;break g}vb(e,a);l=x[i+380>>2]}x[5120]=0;f=x[c+28>>2];x[i+104>>2]=f;x[f+4>>2]=x[f+4>>2]+1;f=x[5120];x[5120]=0;i:{j:{if((f|0)!=1){x[5120]=0;$(191,l|0,h|0,g|0,a|0,i+116|0,i+112|0,i+104|0);f=x[5120];x[5120]=0;if((f|0)==1){break j}f=x[i+104>>2];g=x[f+4>>2]-1|0;x[f+4>>2]=g;if((g|0)==-1){Za[x[x[f>>2]+8>>2]](f)}x[5120]=0;a=ga(192,b|0,a|0,x[i+116>>2],x[i+112>>2],c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break i}eb(e);eb(k);Wa=i+432|0;break b}b=P()|0;break g}b=P()|0;a=x[i+104>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break g}b=P()|0}eb(e);break c}p()}b=P()|0}eb(k);R(b|0);p()}return a|0}function dd(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;if(!a){return ob(b)}if(b>>>0>=4294967232){x[4995]=48;return 0}g=b>>>0<11?16:b+11&-8;e=a-8|0;i=x[e+4>>2];d=i&-8;a:{if(!(i&3)){if(g>>>0<256){break a}if(d>>>0>=g+4>>>0){c=e;if(d-g>>>0<=x[5116]<<1>>>0){break a}}c=0;break a}h=d+e|0;b:{if(d>>>0>=g>>>0){c=d-g|0;if(c>>>0<16){break b}x[e+4>>2]=i&1|g|2;d=e+g|0;x[d+4>>2]=c|3;x[h+4>>2]=x[h+4>>2]|1;cd(d,c);break b}if(x[5002]==(h|0)){d=d+x[4999]|0;if(d>>>0<=g>>>0){break a}x[e+4>>2]=i&1|g|2;c=e+g|0;d=d-g|0;x[c+4>>2]=d|1;x[4999]=d;x[5002]=c;break b}if(x[5001]==(h|0)){d=d+x[4998]|0;if(d>>>0<g>>>0){break a}c=d-g|0;c:{if(c>>>0>=16){x[e+4>>2]=i&1|g|2;f=e+g|0;x[f+4>>2]=c|1;d=d+e|0;x[d>>2]=c;x[d+4>>2]=x[d+4>>2]&-2;break c}x[e+4>>2]=d|i&1|2;c=d+e|0;x[c+4>>2]=x[c+4>>2]|1;c=0}x[5001]=f;x[4998]=c;break b}f=x[h+4>>2];if(f&2){break a}j=d+(f&-8)|0;if(j>>>0<g>>>0){break a}l=j-g|0;d:{if(f>>>0<=255){c=x[h+8>>2];f=f>>>3|0;d=x[h+12>>2];if((d|0)==(c|0)){x[4996]=x[4996]&In(f);break d}x[c+12>>2]=d;x[d+8>>2]=c;break d}k=x[h+24>>2];d=x[h+12>>2];e:{if((h|0)!=(d|0)){c=x[h+8>>2];x[c+12>>2]=d;x[d+8>>2]=c;break e}f:{c=h+20|0;f=x[c>>2];if(!f){f=x[h+16>>2];if(!f){break f}c=h+16|0}while(1){m=c;d=f;c=d+20|0;f=x[c>>2];if(f){continue}c=d+16|0;f=x[d+16>>2];if(f){continue}break}x[m>>2]=0;break e}d=0}if(!k){break d}c=x[h+28>>2];f=(c<<2)+20288|0;g:{if(x[f>>2]==(h|0)){x[f>>2]=d;if(d){break g}x[4997]=x[4997]&In(c);break d}x[(x[k+16>>2]==(h|0)?16:20)+k>>2]=d;if(!d){break d}}x[d+24>>2]=k;c=x[h+16>>2];if(c){x[d+16>>2]=c;x[c+24>>2]=d}c=x[h+20>>2];if(!c){break d}x[d+20>>2]=c;x[c+24>>2]=d}if(l>>>0<=15){x[e+4>>2]=i&1|j|2;c=e+j|0;x[c+4>>2]=x[c+4>>2]|1;break b}x[e+4>>2]=i&1|g|2;c=e+g|0;x[c+4>>2]=l|3;d=e+j|0;x[d+4>>2]=x[d+4>>2]|1;cd(c,l)}c=e}if(c){return c+8|0}c=ob(b);if(!c){return 0}e=x[a-4>>2];e=(e&3?-4:-8)+(e&-8)|0;ub(c,a,b>>>0>e>>>0?e:b);db(a);return c}function Jl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=E(0);a=Wa-368|0;Wa=a;x[a+352>>2]=c;x[a+360>>2]=b;Ud(a+200|0,d,a+224|0,a+220|0,a+216|0);b=fb(a+184|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+180>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;v[a+7|0]=1;v[a+6|0]=69;while(1){d:{x[5120]=0;d=T(164,a+360|0,a+352|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+180>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+180>>2]=d+c}x[5120]=0;d=Q(165,a+360|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ld(d,a+7|0,a+6|0,c,a+180|0,x[a+220>>2],x[a+216>>2],a+200|0,a+16|0,a+12|0,a+8|0,a+224|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+360|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+211|0]>>>7|0){d=x[a+204>>2]}else{d=y[a+211|0]&127}e:{if(!d|!y[a+7|0]){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;h=E(sa(151,c|0,x[a+180>>2],e|0));c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}B[f>>2]=h;x[5120]=0;wb(a+200|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+360|0,a+352|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+360>>2];cb(b);cb(a+200|0);Wa=a+368|0;break a}}c=P()|0;cb(b);cb(a+200|0);R(c|0);p()}return c|0}function am(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=E(0);a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;Xd(a+208|0,d,a+224|0,a+223|0,a+222|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;v[a+7|0]=1;v[a+6|0]=69;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=nd(d,a+7|0,a+6|0,c,a+188|0,v[a+223|0],v[a+222|0],a+208|0,a+16|0,a+12|0,a+8|0,a+224|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d|!y[a+7|0]){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;h=E(sa(151,c|0,x[a+188>>2],e|0));c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}B[f>>2]=h;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Il(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-368|0;Wa=a;x[a+352>>2]=c;x[a+360>>2]=b;Ud(a+200|0,d,a+224|0,a+220|0,a+216|0);b=fb(a+184|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+180>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;v[a+7|0]=1;v[a+6|0]=69;while(1){d:{x[5120]=0;d=T(164,a+360|0,a+352|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+180>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+180>>2]=d+c}x[5120]=0;d=Q(165,a+360|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ld(d,a+7|0,a+6|0,c,a+180|0,x[a+220>>2],x[a+216>>2],a+200|0,a+16|0,a+12|0,a+8|0,a+224|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+360|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+211|0]>>>7|0){d=x[a+204>>2]}else{d=y[a+211|0]&127}e:{if(!d|!y[a+7|0]){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;h=+ra(154,c|0,x[a+180>>2],e|0);c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}C[f>>3]=h;x[5120]=0;wb(a+200|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+360|0,a+352|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+360>>2];cb(b);cb(a+200|0);Wa=a+368|0;break a}}c=P()|0;cb(b);cb(a+200|0);R(c|0);p()}return c|0}function _l(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;Xd(a+208|0,d,a+224|0,a+223|0,a+222|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;v[a+7|0]=1;v[a+6|0]=69;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=nd(d,a+7|0,a+6|0,c,a+188|0,v[a+223|0],v[a+222|0],a+208|0,a+16|0,a+12|0,a+8|0,a+224|0);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d|!y[a+7|0]){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;h=+ra(154,c|0,x[a+188>>2],e|0);c=x[5120];x[5120]=0;f:{if((c|0)==1){break f}C[f>>3]=h;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function od(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0;j=Wa-128|0;Wa=j;x[j+120>>2]=b;x[j+4>>2]=132;n=qb(j+8|0,0,j+4|0);k=j+16|0;l=(d-c|0)/12|0;a:{b:{if(l>>>0>=101){k=ob(l);if(!k){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break a}a=P()|0;break b}vb(n,k)}h=k;b=c;while(1){if((b|0)==(d|0)){c:{d:{e:while(1){f:{x[5120]=0;h=T(134,a|0,j+120|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if(l?h:1){x[5120]=0;b=T(134,a|0,j+120|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break c}if(!b){break d}x[f>>2]=x[f>>2]|2;break d}x[5120]=0;o=Q(135,a|0)|0;b=x[5120];x[5120]=0;g:{if((b|0)!=1){if(g){break g}x[5120]=0;o=T(136,e|0,o|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break g}}a=P()|0;break b}s=q+1|0;t=0;h=k;b=c;while(1){if((b|0)==(d|0)){q=s;if(!t){continue e}x[5120]=0;Q(137,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){h=k;b=c;if(l+m>>>0<2){continue e}while(1){if((b|0)==(d|0)){continue e}if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}if(!((i|0)==(q|0)|y[h|0]!=2)){v[h|0]=0;m=m-1|0}h=h+1|0;b=b+12|0;continue}}a=P()|0;break b}h:{if(y[h|0]!=1){break h}if(y[b+11|0]>>>7|0){i=x[b>>2]}else{i=b}r=y[i+q|0];i:{if(g){break i}x[5120]=0;r=T(136,e|0,r<<24>>24)|0;i=x[5120];x[5120]=0;if((i|0)!=1){break i}a=P()|0;break b}j:{if((o&255)==(r&255)){t=1;if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}if((i|0)!=(s|0)){break h}v[h|0]=2;m=m+1|0;break j}v[h|0]=0}l=l-1|0}h=h+1|0;b=b+12|0;continue}}break}a=P()|0;break b}k:{l:{while(1){if((c|0)==(d|0)){break l}if(y[k|0]!=2){k=k+1|0;c=c+12|0;continue}break}d=c;break k}x[f>>2]=x[f>>2]|4}eb(n);Wa=j+128|0;return d|0}a=P()|0}else{if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}m:{if(i){v[h|0]=1;break m}v[h|0]=2;m=m+1|0;l=l-1|0}h=h+1|0;b=b+12|0;continue}break}}eb(n);R(a|0)}p()}function md(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0;j=Wa-128|0;Wa=j;x[j+120>>2]=b;x[j+4>>2]=132;n=qb(j+8|0,0,j+4|0);k=j+16|0;l=(d-c|0)/12|0;a:{b:{if(l>>>0>=101){k=ob(l);if(!k){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break a}a=P()|0;break b}vb(n,k)}h=k;b=c;while(1){if((b|0)==(d|0)){c:{d:{e:while(1){f:{x[5120]=0;h=T(164,a|0,j+120|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break f}if(l?h:1){x[5120]=0;b=T(164,a|0,j+120|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break c}if(!b){break d}x[f>>2]=x[f>>2]|2;break d}x[5120]=0;o=Q(165,a|0)|0;b=x[5120];x[5120]=0;g:{if((b|0)!=1){if(g){break g}x[5120]=0;o=T(166,e|0,o|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break g}}a=P()|0;break b}s=q+1|0;t=0;h=k;b=c;while(1){if((b|0)==(d|0)){q=s;if(!t){continue e}x[5120]=0;Q(167,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){h=k;b=c;if(l+m>>>0<2){continue e}while(1){if((b|0)==(d|0)){continue e}if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}if(!((i|0)==(q|0)|y[h|0]!=2)){v[h|0]=0;m=m-1|0}h=h+1|0;b=b+12|0;continue}}a=P()|0;break b}h:{if(y[h|0]!=1){break h}if(y[b+11|0]>>>7|0){i=x[b>>2]}else{i=b}r=x[i+(q<<2)>>2];i:{if(g){break i}x[5120]=0;r=T(166,e|0,r|0)|0;i=x[5120];x[5120]=0;if((i|0)!=1){break i}a=P()|0;break b}j:{if((o|0)==(r|0)){t=1;if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}if((i|0)!=(s|0)){break h}v[h|0]=2;m=m+1|0;break j}v[h|0]=0}l=l-1|0}h=h+1|0;b=b+12|0;continue}}break}a=P()|0;break b}k:{l:{while(1){if((c|0)==(d|0)){break l}if(y[k|0]!=2){k=k+1|0;c=c+12|0;continue}break}d=c;break k}x[f>>2]=x[f>>2]|4}eb(n);Wa=j+128|0;return d|0}a=P()|0}else{if(y[b+11|0]>>>7|0){i=x[b+4>>2]}else{i=y[b+11|0]&127}m:{if(i){v[h|0]=1;break m}v[h|0]=2;m=m+1|0;l=l-1|0}h=h+1|0;b=b+12|0;continue}break}}eb(n);R(a|0)}p()}function Pl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=Xc(145,c,x[a+188>>2],e,h);d=Ya;h=x[5120];x[5120]=0;f:{if((h|0)==1){break f}x[f>>2]=c;x[f+4>>2]=d;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Kl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=Xc(149,c,x[a+188>>2],e,h);d=Ya;h=x[5120];x[5120]=0;f:{if((h|0)==1){break f}x[f>>2]=c;x[f+4>>2]=d;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Nk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;a=Wa-624|0;Wa=a;x[a+608>>2]=c;x[a+616>>2]=b;x[a+16>>2]=198;b=qb(a+200|0,a+208|0,a+16|0);x[5120]=0;h=x[e+28>>2];x[a+192>>2]=h;x[h+4>>2]=x[h+4>>2]+1;h=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{if((h|0)!=1){x[5120]=0;h=Q(159,a+192|0)|0;i=x[5120];x[5120]=0;if((i|0)==1){break j}v[a+191|0]=0;e=x[e+4>>2];x[5120]=0;c=na(209,a+616|0,c|0,d|0,a+192|0,e|0,f|0,a+191|0,h|0,b|0,a+196|0,a+608|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break e}if(!c){break f}c=y[2675]|y[2676]<<8|(y[2677]<<16|y[2678]<<24);v[a+183|0]=c;v[a+184|0]=c>>>8;v[a+185|0]=c>>>16;v[a+186|0]=c>>>24;c=y[2672]|y[2673]<<8|(y[2674]<<16|y[2675]<<24);x[a+176>>2]=y[2668]|y[2669]<<8|(y[2670]<<16|y[2671]<<24);x[a+180>>2]=c;x[5120]=0;W(172,h|0,a+176|0,a+186|0,a+128|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break i}x[a+4>>2]=132;d=qb(a+8|0,0,a+4|0);e=a+16|0;if((x[a+196>>2]-x[b>>2]|0)<393){break g}vb(d,ob((x[a+196>>2]-x[b>>2]>>2)+2|0));if(x[d>>2]){break h}x[5120]=0;X(133);c=x[5120];x[5120]=0;if((c|0)==1){break d}break a}c=P()|0;break b}c=P()|0;break c}c=P()|0;break c}e=x[d>>2]}if(y[a+191|0]){v[e|0]=45;e=e+1|0}c=x[b>>2];while(1){if(A[a+196>>2]<=c>>>0){v[e|0]=0;x[a>>2]=g;if((ig(a+16|0,a)|0)!=1){x[5120]=0;aa(200,1338);c=x[5120];x[5120]=0;if((c|0)!=1){break a}break d}eb(d)}else{h=a+128|0;v[e|0]=y[(a+176|0)+(Td(h,h+40|0,c)-h>>2)|0];e=e+1|0;c=c+4|0;continue}break}}x[5120]=0;c=T(164,a+616|0,a+608|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break e}if(c){x[f>>2]=x[f>>2]|2}e=x[a+616>>2];c=x[a+192>>2];d=x[c+4>>2]-1|0;x[c+4>>2]=d;if((d|0)==-1){Za[x[x[c>>2]+8>>2]](c)}eb(b);Wa=a+624|0;return e|0}c=P()|0;break c}c=P()|0;eb(d)}a=x[a+192>>2];d=x[a+4>>2]-1|0;x[a+4>>2]=d;if((d|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}eb(b);R(c|0);p()}p()}function Uk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;a=Wa-288|0;Wa=a;x[a+272>>2]=c;x[a+280>>2]=b;x[a+16>>2]=198;b=qb(a+152|0,a+160|0,a+16|0);x[5120]=0;h=x[e+28>>2];x[a+144>>2]=h;x[h+4>>2]=x[h+4>>2]+1;h=x[5120];x[5120]=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{if((h|0)!=1){x[5120]=0;h=Q(61,a+144|0)|0;i=x[5120];x[5120]=0;if((i|0)==1){break j}v[a+143|0]=0;e=x[e+4>>2];x[5120]=0;c=na(199,a+280|0,c|0,d|0,a+144|0,e|0,f|0,a+143|0,h|0,b|0,a+148|0,a+260|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break e}if(!c){break f}c=y[2675]|y[2676]<<8|(y[2677]<<16|y[2678]<<24);v[a+135|0]=c;v[a+136|0]=c>>>8;v[a+137|0]=c>>>16;v[a+138|0]=c>>>24;c=y[2672]|y[2673]<<8|(y[2674]<<16|y[2675]<<24);x[a+128>>2]=y[2668]|y[2669]<<8|(y[2670]<<16|y[2671]<<24);x[a+132>>2]=c;x[5120]=0;W(152,h|0,a+128|0,a+138|0,a+118|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break i}x[a+4>>2]=132;d=qb(a+8|0,0,a+4|0);e=a+16|0;if((x[a+148>>2]-x[b>>2]|0)<99){break g}vb(d,ob((x[a+148>>2]-x[b>>2]|0)+2|0));if(x[d>>2]){break h}x[5120]=0;X(133);c=x[5120];x[5120]=0;if((c|0)==1){break d}break a}c=P()|0;break b}c=P()|0;break c}c=P()|0;break c}e=x[d>>2]}if(y[a+143|0]){v[e|0]=45;e=e+1|0}c=x[b>>2];while(1){if(A[a+148>>2]<=c>>>0){v[e|0]=0;x[a>>2]=g;if((ig(a+16|0,a)|0)!=1){x[5120]=0;aa(200,1338);c=x[5120];x[5120]=0;if((c|0)!=1){break a}break d}eb(d)}else{h=a+118|0;v[e|0]=y[(a+(Wd(h,h+10|0,c)-a|0)|0)+10|0];e=e+1|0;c=c+1|0;continue}break}}x[5120]=0;c=T(134,a+280|0,a+272|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break e}if(c){x[f>>2]=x[f>>2]|2}e=x[a+280>>2];c=x[a+144>>2];d=x[c+4>>2]-1|0;x[c+4>>2]=d;if((d|0)==-1){Za[x[x[c>>2]+8>>2]](c)}eb(b);Wa=a+288|0;return e|0}c=P()|0;break c}c=P()|0;eb(d)}a=x[a+144>>2];d=x[a+4>>2]-1|0;x[a+4>>2]=d;if((d|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}eb(b);R(c|0);p()}p()}function Ql(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(141,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Ol(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(146,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}w[f>>1]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Nl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(147,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function Ll(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;a=Wa-352|0;Wa=a;x[a+336>>2]=c;x[a+344>>2]=b;h=Ob(d);i=Ac(d,a+224|0);zc(a+208|0,d,a+332|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(164,a+344|0,a+336|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(165,a+344|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=hc(d,h,c,a+188|0,a+8|0,x[a+332>>2],a+208|0,a+16|0,a+12|0,i);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(167,a+344|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(148,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(164,a+344|0,a+336|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+344>>2];cb(b);cb(a+208|0);Wa=a+352|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function jm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=Xc(145,c,x[a+188>>2],e,h);d=Ya;h=x[5120];x[5120]=0;f:{if((h|0)==1){break f}x[f>>2]=c;x[f+4>>2]=d;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function cm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=Xc(149,c,x[a+188>>2],e,h);d=Ya;h=x[5120];x[5120]=0;f:{if((h|0)==1){break f}x[f>>2]=c;x[f+4>>2]=d;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function lm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(141,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function hm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(146,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}w[f>>1]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function em(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(147,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function dm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a=Wa-272|0;Wa=a;x[a+256>>2]=c;x[a+264>>2]=b;h=Ob(d);Bc(a+208|0,d,a+255|0);b=fb(a+192|0);if(y[b+11|0]>>>7|0){c=(x[b+8>>2]&2147483647)-1|0}else{c=10}x[5120]=0;S(139,b|0,c|0);c=x[5120];x[5120]=0;a:{b:{c:{if((c|0)!=1){if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=c;x[a+12>>2]=a+16;x[a+8>>2]=0;while(1){d:{x[5120]=0;d=T(134,a+264|0,a+256|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}g=x[a+188>>2];if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if((g|0)==(d+c|0)){if(y[b+11|0]>>>7|0){c=x[b+4>>2]}else{c=y[b+11|0]&127}if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}x[5120]=0;S(139,b|0,d<<1);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=y[b+11|0]>>>7|0?(x[b+8>>2]&2147483647)-1|0:10;x[5120]=0;S(139,b|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break b}d=c;if(y[b+11|0]>>>7|0){c=x[b>>2]}else{c=b}x[a+188>>2]=d+c}x[5120]=0;d=Q(135,a+264|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break d}x[5120]=0;d=ic(d,h,c,a+188|0,a+8|0,v[a+255|0],a+208|0,a+16|0,a+12|0,9152);g=x[5120];x[5120]=0;if((g|0)==1){break d}if(d){break c}x[5120]=0;Q(137,a+264|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}}break}break b}break b}if(y[a+219|0]>>>7|0){d=x[a+212>>2]}else{d=y[a+219|0]&127}e:{if(!d){break e}d=x[a+12>>2];if((d-(a+16|0)|0)>159){break e}x[a+12>>2]=d+4;x[d>>2]=x[a+8>>2]}x[5120]=0;c=W(148,c|0,x[a+188>>2],e|0,h|0)|0;d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[f>>2]=c;x[5120]=0;wb(a+208|0,a+16|0,x[a+12>>2],e);c=x[5120];x[5120]=0;if((c|0)==1){break f}x[5120]=0;c=T(134,a+264|0,a+256|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if(c){x[e>>2]=x[e>>2]|2}c=x[a+264>>2];cb(b);cb(a+208|0);Wa=a+272|0;break a}}c=P()|0;cb(b);cb(a+208|0);R(c|0);p()}return c|0}function xl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=Wa-208|0;Wa=f;x[f+200>>2]=37;x[f+204>>2]=0;g=kd(f+200|1,2753,x[c+4>>2]);x[f+156>>2]=f+160;a=sb();a:{if(g){j=x[c+8>>2];C[f+40>>3]=e;x[f+32>>2]=j;a=Cb(f+160|0,30,a,f+200|0,f+32|0);break a}C[f+48>>3]=e;a=Cb(f+160|0,30,a,f+200|0,f+48|0)}x[f+80>>2]=132;j=qb(f+144|0,0,f+80|0);i=f+160|0;h=i;b:{c:{d:{e:{if((a|0)>=30){f:{if(g){x[5120]=0;a=Z(156)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}x[f>>2]=x[c+8>>2];x[5120]=0;C[f+8>>3]=e;a=W(179,f+156|0,a|0,f+200|0,f|0)|0;h=x[5120];x[5120]=0;if((h|0)!=1){break f}break d}x[5120]=0;a=Z(156)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}C[f+16>>3]=e;x[5120]=0;a=W(179,f+156|0,a|0,f+200|0,f+16|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}}if((a|0)==-1){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break e}vb(j,x[f+156>>2]);h=x[f+156>>2]}k=a+h|0;l=Ib(h,k,c);x[f+68>>2]=132;h=qb(f+72|0,0,f+68|0);g:{h:{if(x[f+156>>2]==(f+160|0)){a=f+80|0;break h}a=ob(a<<1);if(!a){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break e}b=P()|0;break g}vb(h,a);i=x[f+156>>2]}x[5120]=0;g=x[c+28>>2];x[f+56>>2]=g;x[g+4>>2]=x[g+4>>2]+1;g=x[5120];x[5120]=0;i:{j:{if((g|0)!=1){x[5120]=0;$(180,i|0,l|0,k|0,a|0,f+68|0,f- -64|0,f+56|0);g=x[5120];x[5120]=0;if((g|0)==1){break j}g=x[f+56>>2];i=x[g+4>>2]-1|0;x[g+4>>2]=i;if((i|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;a=ga(181,b|0,a|0,x[f+68>>2],x[f+64>>2],c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break i}eb(h);eb(j);Wa=f+208|0;break b}b=P()|0;break g}b=P()|0;a=x[f+56>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break g}b=P()|0}eb(h);break c}p()}b=P()|0}eb(j);R(b|0);p()}return a|0}function ml(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;f=Wa-384|0;Wa=f;x[f+376>>2]=37;x[f+380>>2]=0;g=kd(f+376|1,2753,x[c+4>>2]);x[f+332>>2]=f+336;a=sb();a:{if(g){j=x[c+8>>2];C[f+40>>3]=e;x[f+32>>2]=j;a=Cb(f+336|0,30,a,f+376|0,f+32|0);break a}C[f+48>>3]=e;a=Cb(f+336|0,30,a,f+376|0,f+48|0)}x[f+80>>2]=132;j=qb(f+320|0,0,f+80|0);i=f+336|0;h=i;b:{c:{d:{e:{if((a|0)>=30){f:{if(g){x[5120]=0;a=Z(156)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}x[f>>2]=x[c+8>>2];x[5120]=0;C[f+8>>3]=e;a=W(179,f+332|0,a|0,f+376|0,f|0)|0;h=x[5120];x[5120]=0;if((h|0)!=1){break f}break d}x[5120]=0;a=Z(156)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}C[f+16>>3]=e;x[5120]=0;a=W(179,f+332|0,a|0,f+376|0,f+16|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break d}}if((a|0)==-1){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)==1){break d}break e}vb(j,x[f+332>>2]);h=x[f+332>>2]}k=a+h|0;l=Ib(h,k,c);x[f+68>>2]=132;h=qb(f+72|0,0,f+68|0);g:{h:{if(x[f+332>>2]==(f+336|0)){a=f+80|0;break h}a=ob(a<<3);if(!a){x[5120]=0;X(133);a=x[5120];x[5120]=0;if((a|0)!=1){break e}b=P()|0;break g}vb(h,a);i=x[f+332>>2]}x[5120]=0;g=x[c+28>>2];x[f+56>>2]=g;x[g+4>>2]=x[g+4>>2]+1;g=x[5120];x[5120]=0;i:{j:{if((g|0)!=1){x[5120]=0;$(191,i|0,l|0,k|0,a|0,f+68|0,f- -64|0,f+56|0);g=x[5120];x[5120]=0;if((g|0)==1){break j}g=x[f+56>>2];i=x[g+4>>2]-1|0;x[g+4>>2]=i;if((i|0)==-1){Za[x[x[g>>2]+8>>2]](g)}x[5120]=0;a=ga(192,b|0,a|0,x[f+68>>2],x[f+64>>2],c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break i}eb(h);eb(j);Wa=f+384|0;break b}b=P()|0;break g}b=P()|0;a=x[f+56>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break g}b=P()|0}eb(h);break c}p()}b=P()|0}eb(j);R(b|0);p()}return a|0}function hn(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;d=Wa-16|0;Wa=d;a:{b:{if(!x[a+64>>2]){f=-1;break b}f=x[a+92>>2]&8;if(!f){x[a+28>>2]=0;x[a+20>>2]=0;x[a+24>>2]=0;c:{if(y[a+98|0]){b=x[a+32>>2];c=b+x[a+52>>2]|0;x[a+16>>2]=c;break c}b=x[a+56>>2];c=b+x[a+60>>2]|0;x[a+16>>2]=c}x[a+12>>2]=c;x[a+8>>2]=b;x[a+92>>2]=8}if(!x[a+12>>2]){b=d+16|0;x[a+16>>2]=b;x[a+12>>2]=b;x[a+8>>2]=d+15}if(f){b=x[a+16>>2];c=x[a+8>>2];x[d+4>>2]=4;x[d+8>>2]=(b-c|0)/2;b=Wa-16|0;Wa=b;Wa=b+16|0;b=d+4|0;c=d+8|0;e=x[(A[b>>2]<A[c>>2]?b:c)>>2]}f=-1;d:{if(x[a+12>>2]==x[a+16>>2]){sc(x[a+8>>2],x[a+16>>2]-e|0,e);if(y[a+98|0]){b=x[a+8>>2];b=ve(b+e|0,x[a+16>>2]-(b+e|0)|0,x[a+64>>2]);if(!b){break d}g=b;b=x[a+8>>2];c=b+e|0;x[a+16>>2]=g+c;x[a+12>>2]=c;x[a+8>>2]=b;f=y[x[a+12>>2]];break d}b=x[a+36>>2];c=x[a+40>>2];e:{if((b|0)==(c|0)){g=b;break e}sc(x[a+32>>2],b,c-b|0);b=x[a+36>>2];g=x[a+40>>2]}g=g-b|0;b=x[a+32>>2];c=g+b|0;x[a+36>>2]=c;b=b+((b|0)==(a+44|0)?8:x[a+52>>2])|0;x[a+40>>2]=b;x[d+8>>2]=x[a+60>>2]-e;x[d+4>>2]=b-c;b=Wa-16|0;Wa=b;Wa=b+16|0;b=d+4|0;c=d+8|0;b=x[(A[b>>2]<A[c>>2]?b:c)>>2];c=x[a+76>>2];x[a+80>>2]=x[a+72>>2];x[a+84>>2]=c;c=ve(x[a+36>>2],b,x[a+64>>2]);if(!c){break d}b=x[a+68>>2];if(!b){break a}c=c+x[a+36>>2]|0;x[a+40>>2]=c;g=c;c=x[a+8>>2];f:{if((Za[x[x[b>>2]+16>>2]](b,a+72|0,x[a+32>>2],g,a+36|0,c+e|0,c+x[a+60>>2]|0,d+8|0)|0)==3){b=x[a+32>>2];x[a+16>>2]=x[a+40>>2];x[a+12>>2]=b;break f}if(x[d+8>>2]==(x[a+8>>2]+e|0)){break d}b=x[a+8>>2];x[a+16>>2]=x[d+8>>2];x[a+12>>2]=b+e}x[a+8>>2]=b;f=y[x[a+12>>2]];break d}f=y[x[a+12>>2]]}if(x[a+8>>2]!=(d+15|0)){break b}x[a+16>>2]=0;x[a+12>>2]=0;x[a+8>>2]=0}Wa=d+16|0;return f|0}Pc();p()}function ac(a,b,c,d,e,f,g,h){var i=0,j=0,k=0;i=Wa-32|0;Wa=i;x[i+16>>2]=c;x[i+24>>2]=b;c=i+8|0;b=x[d+28>>2];x[c>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;j=Q(61,c|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[i+8>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}x[e>>2]=0;b=0;a:{while(1){if(b|(g|0)==(h|0)){break a}b:{if(Qb(i+24|0,i+16|0)){break b}c:{if((Za[x[x[j>>2]+36>>2]](j,v[g|0],0)|0)==37){b=g+1|0;if((h|0)==(b|0)){break b}k=0;c=Za[x[x[j>>2]+36>>2]](j,v[b|0],0)|0;d:{if(!((c|0)==69|(c&255)==48)){b=g;break d}if((g+2|0)==(h|0)){break b}k=c;c=Za[x[x[j>>2]+36>>2]](j,v[g+2|0],0)|0}x[i+24>>2]=Za[x[x[a>>2]+36>>2]](a,x[i+24>>2],x[i+16>>2],d,e,f,c,k);g=b+2|0;break c}b=v[g|0];if((b|0)>=0){b=x[x[j+8>>2]+((b&255)<<2)>>2]&1}else{b=0}if(b){while(1){e:{g=g+1|0;if((h|0)==(g|0)){g=h;break e}b=v[g|0];if((b|0)>=0){b=x[x[j+8>>2]+((b&255)<<2)>>2]&1}else{b=0}if(b){continue}}break}while(1){if(Qb(i+24|0,i+16|0)){break c}b=x[i+24>>2];c=x[b+12>>2];f:{if((c|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break f}b=y[c|0]}b=b<<24>>24;if((b|0)>=0){b=x[x[j+8>>2]+((b&255)<<2)>>2]&1}else{b=0}if(!b){break c}Gc(i+24|0);continue}}b=x[i+24>>2];c=x[b+12>>2];g:{if((c|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break g}b=y[c|0]}if((Za[x[x[j>>2]+12>>2]](j,b<<24>>24)|0)==(Za[x[x[j>>2]+12>>2]](j,v[g|0])|0)){g=g+1|0;Gc(i+24|0);break c}x[e>>2]=4}b=x[e>>2];continue}break}x[e>>2]=4}if(Qb(i+24|0,i+16|0)){x[e>>2]=x[e>>2]|2}Wa=i+32|0;return x[i+24>>2]}c=P()|0;a=x[i+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function Vk(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:{g=x[b+4>>2];b:{c:{if(!g){f=b+4|0;c=f;break c}h=x[c>>2];while(1){c=g;g=x[c+16>>2];if((g|0)>(h|0)){f=c;g=x[c>>2];if(g){continue}break c}if((g|0)>=(h|0)){g=c;b=0;break b}g=x[c+4>>2];if(g){continue}break}f=c+4|0}g=rb(60);x[5120]=0;Y(48,g+16|0,d|0,e|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}x[g+8>>2]=c;x[g>>2]=0;x[g+4>>2]=0;x[f>>2]=g;c=g;d=x[x[b>>2]>>2];if(d){x[b>>2]=d;c=x[f>>2]}h=x[b+4>>2];d=(h|0)==(c|0);v[c+12|0]=d;d:{if(d){break d}while(1){d=x[c+8>>2];if(y[d+12|0]){break d}e:{e=x[d+8>>2];f=x[e>>2];if((f|0)==(d|0)){f=x[e+4>>2];if(!(!f|y[f+12|0])){break e}f:{if(x[d>>2]==(c|0)){c=d;break f}c=x[d+4>>2];f=x[c>>2];x[d+4>>2]=f;if(f){x[f+8>>2]=d;e=x[d+8>>2]}x[c+8>>2]=e;e=x[d+8>>2];x[((x[e>>2]!=(d|0))<<2)+e>>2]=c;x[c>>2]=d;x[d+8>>2]=c;e=x[c+8>>2];d=x[e>>2]}v[c+12|0]=1;v[e+12|0]=0;c=x[d+4>>2];x[e>>2]=c;if(c){x[c+8>>2]=e}x[d+8>>2]=x[e+8>>2];c=x[e+8>>2];x[((x[c>>2]!=(e|0))<<2)+c>>2]=d;x[d+4>>2]=e;x[e+8>>2]=d;break d}if(!(y[f+12|0]|!f)){break e}g:{if(x[d>>2]!=(c|0)){c=d;break g}f=x[c+4>>2];x[d>>2]=f;if(f){x[f+8>>2]=d;e=x[d+8>>2]}x[c+8>>2]=e;e=x[d+8>>2];x[((x[e>>2]!=(d|0))<<2)+e>>2]=c;x[c+4>>2]=d;x[d+8>>2]=c;e=x[c+8>>2]}v[c+12|0]=1;v[e+12|0]=0;c=x[e+4>>2];d=x[c>>2];x[e+4>>2]=d;if(d){x[d+8>>2]=e}x[c+8>>2]=x[e+8>>2];d=x[e+8>>2];x[((x[d>>2]!=(e|0))<<2)+d>>2]=c;x[c>>2]=e;x[e+8>>2]=c;break d}v[d+12|0]=1;v[e+12|0]=(e|0)==(h|0);v[f+12|0]=1;c=e;if((h|0)!=(c|0)){continue}break}}x[b+8>>2]=x[b+8>>2]+1;b=1}v[a+4|0]=b;x[a>>2]=g;return}a=P()|0;db(g);R(a|0);p()}function ql(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;i=Wa-16|0;Wa=i;m=me(g);g=Vd(g);Za[x[x[g>>2]+20>>2]](i,g);a:{if(y[i+11|0]>>>7|0){k=x[i+4>>2]}else{k=y[i+11|0]&127}b:{if(!k){x[5120]=0;W(172,m|0,a|0,c|0,d|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break b}g=(c-a<<2)+d|0;x[f>>2]=g;break a}x[f>>2]=d;c:{d:{k=a;h=y[k|0];switch(h-43|0){case 0:case 2:break d;default:break c}}x[5120]=0;k=T(188,m|0,h<<24>>24)|0;h=x[5120];x[5120]=0;if((h|0)==1){break b}h=x[f>>2];x[f>>2]=h+4;x[h>>2]=k;k=a+1|0}if(!(y[k|0]!=48|(c-k|0)<2|(y[k+1|0]|32)!=120)){x[5120]=0;h=T(188,m|0,48)|0;j=x[5120];x[5120]=0;if((j|0)==1){break b}j=x[f>>2];x[f>>2]=j+4;x[j>>2]=h;h=v[k+1|0];x[5120]=0;h=T(188,m|0,h|0)|0;j=x[5120];x[5120]=0;if((j|0)==1){break b}j=x[f>>2];x[f>>2]=j+4;x[j>>2]=h;k=k+2|0}j=0;x[5120]=0;dc(k,c);h=x[5120];x[5120]=0;if((h|0)==1){break b}x[5120]=0;o=Q(169,g|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break b}h=0;g=k;while(1){e:{if(c>>>0<=g>>>0){g=x[f>>2];x[5120]=0;Lc((k-a<<2)+d|0,g);g=x[5120];x[5120]=0;if((g|0)==1){break e}g=x[f>>2];break a}if(y[i+11|0]>>>7|0){l=x[i>>2]}else{l=i}n=!y[l+h|0];if(y[i+11|0]>>>7|0){l=x[i>>2]}else{l=i}if(!(n|v[l+h|0]!=(j|0))){j=x[f>>2];x[f>>2]=j+4;x[j>>2]=o;if(y[i+11|0]>>>7|0){l=x[i+4>>2]}else{l=y[i+11|0]&127}h=(l-1>>>0>h>>>0)+h|0;j=0}n=v[g|0];x[5120]=0;n=T(188,m|0,n|0)|0;l=x[5120];x[5120]=0;if((l|0)!=1){l=x[f>>2];x[f>>2]=l+4;x[l>>2]=n;g=g+1|0;j=j+1|0;continue}}break}}a=P()|0;cb(i);R(a|0);p()}x[e>>2]=(b|0)==(c|0)?g:(b-a<<2)+d|0;cb(i);Wa=i+16|0}function Bl(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;i=Wa-16|0;Wa=i;m=oe(g);g=Yd(g);Za[x[x[g>>2]+20>>2]](i,g);a:{if(y[i+11|0]>>>7|0){k=x[i+4>>2]}else{k=y[i+11|0]&127}b:{if(!k){x[5120]=0;W(152,m|0,a|0,c|0,d|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break b}g=(c-a|0)+d|0;x[f>>2]=g;break a}x[f>>2]=d;c:{d:{k=a;h=y[k|0];switch(h-43|0){case 0:case 2:break d;default:break c}}x[5120]=0;k=T(176,m|0,h<<24>>24)|0;h=x[5120];x[5120]=0;if((h|0)==1){break b}h=x[f>>2];x[f>>2]=h+1;v[h|0]=k;k=a+1|0}if(!(y[k|0]!=48|(c-k|0)<2|(y[k+1|0]|32)!=120)){x[5120]=0;h=T(176,m|0,48)|0;j=x[5120];x[5120]=0;if((j|0)==1){break b}j=x[f>>2];x[f>>2]=j+1;v[j|0]=h;h=v[k+1|0];x[5120]=0;h=T(176,m|0,h|0)|0;j=x[5120];x[5120]=0;if((j|0)==1){break b}j=x[f>>2];x[f>>2]=j+1;v[j|0]=h;k=k+2|0}j=0;x[5120]=0;dc(k,c);h=x[5120];x[5120]=0;if((h|0)==1){break b}x[5120]=0;o=Q(143,g|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break b}h=0;g=k;while(1){e:{if(c>>>0<=g>>>0){g=x[f>>2];x[5120]=0;dc((k-a|0)+d|0,g);g=x[5120];x[5120]=0;if((g|0)==1){break e}g=x[f>>2];break a}if(y[i+11|0]>>>7|0){l=x[i>>2]}else{l=i}n=!y[l+h|0];if(y[i+11|0]>>>7|0){l=x[i>>2]}else{l=i}if(!(n|v[l+h|0]!=(j|0))){j=x[f>>2];x[f>>2]=j+1;v[j|0]=o;if(y[i+11|0]>>>7|0){l=x[i+4>>2]}else{l=y[i+11|0]&127}h=(l-1>>>0>h>>>0)+h|0;j=0}n=v[g|0];x[5120]=0;n=T(176,m|0,n|0)|0;l=x[5120];x[5120]=0;if((l|0)!=1){l=x[f>>2];x[f>>2]=l+1;v[l|0]=n;g=g+1|0;j=j+1|0;continue}}break}}a=P()|0;cb(i);R(a|0);p()}x[e>>2]=(b|0)==(c|0)?g:(b-a|0)+d|0;cb(i);Wa=i+16|0}function Pk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;a=Wa-160|0;Wa=a;x[a+144>>2]=c;x[a+152>>2]=b;x[a+20>>2]=198;h=qb(a+24|0,a+32|0,a+20|0);x[5120]=0;b=x[e+28>>2];x[a+16>>2]=b;x[b+4>>2]=x[b+4>>2]+1;b=x[5120];x[5120]=0;a:{b:{c:{d:{if((b|0)!=1){x[5120]=0;i=Q(61,a+16|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break b}v[a+15|0]=0;b=x[e+4>>2];x[5120]=0;b=na(199,a+152|0,c|0,d|0,a+16|0,b|0,f|0,a+15|0,i|0,h|0,a+20|0,a+132|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}if(!b){break c}b=Wa-16|0;Wa=b;e:{if(y[g+11|0]>>>7|0){c=x[g>>2];v[b+15|0]=0;v[c|0]=y[b+15|0];x[g+4>>2]=0;break e}v[b+14|0]=0;v[g|0]=y[b+14|0];v[g+11|0]=y[g+11|0]&128;v[g+11|0]=y[g+11|0]&127}Wa=b+16|0;if(!y[a+15|0]){break d}x[5120]=0;b=T(176,i|0,45)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}x[5120]=0;S(45,g|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){break d}break b}c=P()|0;break a}x[5120]=0;b=T(176,i|0,48)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}c=x[h>>2];d=x[a+20>>2];e=d-1|0;b=b&255;while(1){if(!((b|0)!=y[c|0]|c>>>0>=e>>>0)){c=c+1|0;continue}break}x[5120]=0;Y(207,g|0,c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break c}break b}x[5120]=0;b=T(134,a+152|0,a+144|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}if(b){x[f>>2]=x[f>>2]|2}d=x[a+152>>2];b=x[a+16>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}eb(h);Wa=a+160|0;return d|0}c=P()|0;a=x[a+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}eb(h);R(c|0);p()}function Ik(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;a=Wa-448|0;Wa=a;x[a+432>>2]=c;x[a+440>>2]=b;x[a+20>>2]=198;h=qb(a+24|0,a+32|0,a+20|0);x[5120]=0;b=x[e+28>>2];x[a+16>>2]=b;x[b+4>>2]=x[b+4>>2]+1;b=x[5120];x[5120]=0;a:{b:{c:{d:{if((b|0)!=1){x[5120]=0;i=Q(159,a+16|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break b}v[a+15|0]=0;b=x[e+4>>2];x[5120]=0;b=na(209,a+440|0,c|0,d|0,a+16|0,b|0,f|0,a+15|0,i|0,h|0,a+20|0,a+432|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}if(!b){break c}b=Wa-16|0;Wa=b;e:{if(y[g+11|0]>>>7|0){c=x[g>>2];x[b+12>>2]=0;x[c>>2]=x[b+12>>2];x[g+4>>2]=0;break e}x[b+8>>2]=0;x[g>>2]=x[b+8>>2];v[g+11|0]=y[g+11|0]&128;v[g+11|0]=y[g+11|0]&127}Wa=b+16|0;if(!y[a+15|0]){break d}x[5120]=0;b=T(188,i|0,45)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}x[5120]=0;S(213,g|0,b|0);b=x[5120];x[5120]=0;if((b|0)!=1){break d}break b}c=P()|0;break a}x[5120]=0;b=T(188,i|0,48)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}c=x[h>>2];d=x[a+20>>2];e=d-4|0;while(1){if(!((b|0)!=x[c>>2]|c>>>0>=e>>>0)){c=c+4|0;continue}break}x[5120]=0;Y(216,g|0,c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break c}break b}x[5120]=0;b=T(164,a+440|0,a+432|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break b}if(b){x[f>>2]=x[f>>2]|2}d=x[a+440>>2];b=x[a+16>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}eb(h);Wa=a+448|0;return d|0}c=P()|0;a=x[a+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}eb(h);R(c|0);p()}function $b(a,b,c,d,e,f,g,h){var i=0,j=0,k=0;i=Wa-32|0;Wa=i;x[i+16>>2]=c;x[i+24>>2]=b;c=i+8|0;b=x[d+28>>2];x[c>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;c=Q(159,c|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[i+8>>2];j=x[b+4>>2]-1|0;x[b+4>>2]=j;if((j|0)==-1){Za[x[x[b>>2]+8>>2]](b)}x[e>>2]=0;b=0;a:{while(1){if(b|(g|0)==(h|0)){break a}b:{if(Pb(i+24|0,i+16|0)){break b}c:{if((Za[x[x[c>>2]+52>>2]](c,x[g>>2],0)|0)==37){b=g+4|0;if((h|0)==(b|0)){break b}k=0;j=Za[x[x[c>>2]+52>>2]](c,x[b>>2],0)|0;d:{if(!((j|0)==69|(j&255)==48)){b=g;break d}if((g+8|0)==(h|0)){break b}k=j;j=Za[x[x[c>>2]+52>>2]](c,x[g+8>>2],0)|0}x[i+24>>2]=Za[x[x[a>>2]+36>>2]](a,x[i+24>>2],x[i+16>>2],d,e,f,j,k);g=b+8|0;break c}if(Za[x[x[c>>2]+12>>2]](c,1,x[g>>2])|0){while(1){e:{g=g+4|0;if((h|0)==(g|0)){g=h;break e}if(Za[x[x[c>>2]+12>>2]](c,1,x[g>>2])|0){continue}}break}while(1){if(Pb(i+24|0,i+16|0)){break c}b=x[i+24>>2];j=x[b+12>>2];f:{if((j|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break f}b=x[j>>2]}if(!(Za[x[x[c>>2]+12>>2]](c,1,b)|0)){break c}Fc(i+24|0);continue}}b=x[i+24>>2];j=x[b+12>>2];g:{if((j|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break g}b=x[j>>2]}if((Za[x[x[c>>2]+28>>2]](c,b)|0)==(Za[x[x[c>>2]+28>>2]](c,x[g>>2])|0)){g=g+4|0;Fc(i+24|0);break c}x[e>>2]=4}b=x[e>>2];continue}break}x[e>>2]=4}if(Pb(i+24|0,i+16|0)){x[e>>2]=x[e>>2]|2}Wa=i+32|0;return x[i+24>>2]}c=P()|0;a=x[i+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function df(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;a=Wa-16|0;Wa=a;x[a+12>>2]=c;x[a+8>>2]=f;x[a+12>>2]=c;x[a+8>>2]=f;a:{b:{c:{while(1){d:{c=x[a+12>>2];if(c>>>0>=d>>>0){break d}j=x[a+8>>2];if(j>>>0>=g>>>0){break d}b=2;f=y[c|0];e:{if(f<<24>>24>=0){w[j>>1]=f;b=c+1|0;break e}if(f>>>0<194){break b}if(f>>>0<=223){if((d-c|0)<2){break c}i=y[c+1|0];if((i&192)!=128){break a}w[j>>1]=i&63|f<<6&1984;b=c+2|0;break e}if(f>>>0<=239){if((d-c|0)<3){break c}k=y[c+2|0];i=y[c+1|0];f:{g:{if((f|0)!=237){if((f|0)!=224){break g}if((i&224)==160){break f}break a}if((i&224)==128){break f}break a}if((i&192)!=128){break a}}if((k&192)!=128){break a}w[j>>1]=k&63|((i&63)<<6|f<<12);b=c+3|0;break e}if(f>>>0>244){break b}b=1;if((d-c|0)<4){break a}k=y[c+2|0];i=y[c+1|0];h:{i:{switch(f-240|0){case 0:if((i+112&255)>>>0>=48){break b}break h;case 4:if((i&240)!=128){break b}break h;default:break i}}if((i&192)!=128){break b}}if((k&192)!=128){break b}c=y[c+3|0];if((c&192)!=128){break b}if((g-j|0)<4){break a}b=2;c=c&63;l=k<<6;f=f&7;if((c|(l&4032|(i<<12&258048|f<<18)))>>>0>1114111){break a}b=i<<2;w[j>>1]=(k>>>4&3|(b&192|f<<8|b&60))+16320|55296;x[a+8>>2]=j+2;w[j+2>>1]=c|l&960|56320;b=x[a+12>>2]+4|0}x[a+12>>2]=b;x[a+8>>2]=x[a+8>>2]+2;continue}break}b=c>>>0<d>>>0;break a}b=1;break a}b=2}x[e>>2]=x[a+12>>2];x[h>>2]=x[a+8>>2];Wa=a+16|0;return b|0}function ef(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;a=Wa-16|0;Wa=a;x[a+12>>2]=c;x[a+8>>2]=f;x[a+12>>2]=c;x[a+8>>2]=f;c=x[a+12>>2];a:{b:{while(1){if(c>>>0>=d>>>0){f=0;break a}f=2;c:{b=z[c>>1];d:{if(b>>>0<=127){f=1;c=x[a+8>>2];if((g-c|0)<=0){break a}x[a+8>>2]=c+1;v[c|0]=b;break d}if(b>>>0<=2047){c=x[a+8>>2];if((g-c|0)<2){break b}x[a+8>>2]=c+1;v[c|0]=b>>>6|192;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128;break d}if(b>>>0<=55295){c=x[a+8>>2];if((g-c|0)<3){break b}x[a+8>>2]=c+1;v[c|0]=b>>>12|224;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b>>>6&63|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128;break d}if(b>>>0<=56319){f=1;if((d-c|0)<4){break a}i=z[c+2>>1];if((i&64512)!=56320){break c}if((g-x[a+8>>2]|0)<4){break a}f=b&960;if((i&1023|(b<<10&64512|f<<10))>>>0>1048575){break c}x[a+12>>2]=c+2;c=x[a+8>>2];x[a+8>>2]=c+1;j=c;c=(f>>>6|0)+1|0;v[j|0]=c>>>2|240;f=x[a+8>>2];x[a+8>>2]=f+1;v[f|0]=c<<4&48|b>>>2&15|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=i>>>6&15|b<<4&48|128;b=x[a+8>>2];x[a+8>>2]=b+1;v[b|0]=i&63|128;break d}if(b>>>0<57344){break a}c=x[a+8>>2];if((g-c|0)<3){break b}x[a+8>>2]=c+1;v[c|0]=b>>>12|224;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b>>>6&63|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128}c=x[a+12>>2]+2|0;x[a+12>>2]=c;continue}break}f=2;break a}f=1}x[e>>2]=x[a+12>>2];x[h>>2]=x[a+8>>2];Wa=a+16|0;return f|0}function en(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;e=Wa-16|0;Wa=e;a:{b:{if(!x[a+64>>2]){break b}if(!(y[a+92|0]&16)){x[a+16>>2]=0;x[a+12>>2]=0;x[a+8>>2]=0;c=x[a+52>>2];c:{if(c>>>0>=9){if(y[a+98|0]){f=c;c=x[a+32>>2];x[a+28>>2]=(f+c|0)-1;x[a+20>>2]=c;x[a+24>>2]=c;break c}c=x[a+56>>2];x[a+28>>2]=(c+x[a+60>>2]|0)-1;x[a+20>>2]=c;x[a+24>>2]=c;break c}x[a+28>>2]=0;x[a+20>>2]=0;x[a+24>>2]=0}x[a+92>>2]=16}g=x[a+20>>2];i=x[a+28>>2];if((b|0)!=-1){if(!x[a+24>>2]){x[a+28>>2]=e+16;c=e+15|0;x[a+20>>2]=c;x[a+24>>2]=c}v[x[a+24>>2]]=b<<24>>24;x[a+24>>2]=x[a+24>>2]+1}if(x[a+24>>2]!=x[a+20>>2]){d:{if(y[a+98|0]){d=x[a+20>>2];c=x[a+24>>2]-d|0;if((Uc(d,c,x[a+64>>2])|0)!=(c|0)){break b}break d}x[e+8>>2]=x[a+32>>2];f=a+72|0;while(1){c=x[a+68>>2];if(c){d=x[a+32>>2];c=Za[x[x[c>>2]+12>>2]](c,f,x[a+20>>2],x[a+24>>2],e+4|0,d,d+x[a+52>>2]|0,e+8|0)|0;if(x[a+20>>2]==x[e+4>>2]){break b}if((c|0)==3){d=x[a+20>>2];c=x[a+24>>2]-d|0;if((Uc(d,c,x[a+64>>2])|0)!=(c|0)){break b}break d}if(c>>>0>1){break b}h=x[a+32>>2];d=x[e+8>>2]-h|0;if((Uc(h,d,x[a+64>>2])|0)!=(d|0)){break b}if((c|0)!=1){break d}c=x[e+4>>2];x[a+28>>2]=x[a+24>>2];x[a+20>>2]=c;x[a+24>>2]=c;x[a+24>>2]=x[a+24>>2]+(x[a+28>>2]-x[a+20>>2]|0);continue}break}Pc();p()}x[a+28>>2]=i;x[a+20>>2]=g;x[a+24>>2]=g}a=(b|0)!=-1?b:0;break a}a=-1}Wa=e+16|0;return a|0}function Ah(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=Wa+-64|0;Wa=f;a:{if(tb(b,19e3,0)){x[c>>2]=0;d=1;break a}b:{if(y[a+8|0]&24){e=1}else{if(!b){break b}e=Lb(b,18732);if(!e){break b}e=(y[e+8|0]&24)!=0}g=tb(a,b,e)}if(g){d=1;a=x[c>>2];if(!a){break a}x[c>>2]=x[a>>2];break a}c:{if(!b){break c}e=Lb(b,18780);if(!e){break a}b=x[c>>2];if(b){x[c>>2]=x[b>>2]}g=x[e+8>>2];b=x[a+8>>2];if(g&(b^-1)&7|b&(g^-1)&96){break a}d=1;if(tb(x[a+12>>2],x[e+12>>2],0)){break a}if(tb(x[a+12>>2],18988,0)){a=x[e+12>>2];if(!a){break a}d=!Lb(a,18832);break a}g=x[a+12>>2];if(!g){break c}d=0;b=Lb(g,18780);if(b){if(!(v[a+8|0]&1)){break a}a=x[e+12>>2];c=0;d:{e:{while(1){d=0;if(!a){break d}a=Lb(a,18780);if(!a|x[a+8>>2]&(x[b+8>>2]^-1)){break e}d=1;if(tb(x[b+12>>2],x[a+12>>2],0)){break d}if(!(v[b+8|0]&1)){break e}d=x[b+12>>2];if(!d){break e}b=Lb(d,18780);if(b){a=x[a+12>>2];continue}break}b=Lb(d,18892);if(!b){break e}c=Ae(b,x[a+12>>2])}d=c}break a}b=Lb(g,18892);if(b){if(!(v[a+8|0]&1)){break a}d=Ae(b,x[e+12>>2]);break a}b=Lb(g,18684);if(!b){break a}a=x[e+12>>2];if(!a){break a}a=Lb(a,18684);if(!a){break a}d=f+8|0;Mb(d|4,0,52);x[f+56>>2]=1;x[f+20>>2]=-1;x[f+16>>2]=b;x[f+8>>2]=a;Za[x[x[a>>2]+28>>2]](a,d,x[c>>2],1);a=x[f+32>>2];if(!(!x[c>>2]|(a|0)!=1)){x[c>>2]=x[f+24>>2]}d=(a|0)==1;break a}d=0}Wa=f- -64|0;return d|0}function Rl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-32|0;Wa=g;x[g+24>>2]=b;a:{b:{if(!(x[d+4>>2]&1)){x[g>>2]=-1;b=Za[x[x[a>>2]+16>>2]](a,b,c,d,e,g)|0;c:{switch(x[g>>2]){case 1:v[f|0]=1;break a;case 0:break b;default:break c}}v[f|0]=1;x[e>>2]=4;break a}a=x[d+28>>2];x[g>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;h=Q(159,g|0)|0;a=x[5120];x[5120]=0;d:{e:{f:{g:{if((a|0)!=1){a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=x[d+28>>2];x[g>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;b=Q(160,g|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break g}a=x[g>>2];d=x[a+4>>2]-1|0;x[a+4>>2]=d;if((d|0)==-1){Za[x[x[a>>2]+8>>2]](a)}x[5120]=0;S(161,g|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){b=P()|0;break d}x[5120]=0;S(162,g|12,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break f}x[5120]=0;d=g+24|0;a=ta(163,d|0,c|0,g|0,d|0,h|0,e|0,1)|0;b=x[5120];x[5120]=0;if((b|0)==1){break e}v[f|0]=(a|0)==(g|0);b=x[g+24>>2];while(1){d=gb(d-12|0);if((g|0)!=(d|0)){continue}break}break a}b=P()|0;a=x[g>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break d}b=P()|0;a=x[g>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break d}b=P()|0;gb(g);break d}b=P()|0;while(1){d=gb(d-12|0);if((g|0)!=(d|0)){continue}break}}R(b|0);p()}v[f|0]=0}Wa=g+32|0;return b|0}function om(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-32|0;Wa=g;x[g+24>>2]=b;a:{b:{if(!(x[d+4>>2]&1)){x[g>>2]=-1;b=Za[x[x[a>>2]+16>>2]](a,b,c,d,e,g)|0;c:{switch(x[g>>2]){case 1:v[f|0]=1;break a;case 0:break b;default:break c}}v[f|0]=1;x[e>>2]=4;break a}a=x[d+28>>2];x[g>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;h=Q(61,g|0)|0;a=x[5120];x[5120]=0;d:{e:{f:{g:{if((a|0)!=1){a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=x[d+28>>2];x[g>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;b=Q(128,g|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break g}a=x[g>>2];d=x[a+4>>2]-1|0;x[a+4>>2]=d;if((d|0)==-1){Za[x[x[a>>2]+8>>2]](a)}x[5120]=0;S(129,g|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){b=P()|0;break d}x[5120]=0;S(130,g|12,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break f}x[5120]=0;d=g+24|0;a=ta(131,d|0,c|0,g|0,d|0,h|0,e|0,1)|0;b=x[5120];x[5120]=0;if((b|0)==1){break e}v[f|0]=(a|0)==(g|0);b=x[g+24>>2];while(1){d=cb(d-12|0);if((g|0)!=(d|0)){continue}break}break a}b=P()|0;a=x[g>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break d}b=P()|0;a=x[g>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}break d}b=P()|0;cb(g);break d}b=P()|0;while(1){d=cb(d-12|0);if((g|0)!=(d|0)){continue}break}}R(b|0);p()}v[f|0]=0}Wa=g+32|0;return b|0}function af(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0;a=Wa-16|0;Wa=a;x[a+12>>2]=c;x[a+8>>2]=f;x[a+12>>2]=c;x[a+8>>2]=f;a:{b:{while(1){c:{i=x[a+12>>2];if(i>>>0>=d>>>0){break c}l=x[a+8>>2];if(l>>>0>=g>>>0){break c}f=v[i|0];c=f&255;d:{if((f|0)>=0){if(c>>>0<=1114111){f=1;break d}b=2;break a}b=2;if(f>>>0<4294967234){break a}if(f>>>0<=4294967263){if((d-i|0)<2){break b}j=y[i+1|0];if((j&192)!=128){break a}f=2;c=j&63|c<<6&1984;break d}if(f>>>0<=4294967279){if((d-i|0)<3){break b}k=y[i+2|0];j=y[i+1|0];e:{f:{if((c|0)!=237){if((c|0)!=224){break f}if((j&224)==160){break e}break a}if((j&224)==128){break e}break a}if((j&192)!=128){break a}}if((k&192)!=128){break a}f=3;c=k&63|(c<<12&61440|(j&63)<<6);break d}if(f>>>0>4294967284){break a}if((d-i|0)<4){break b}k=y[i+2|0];j=y[i+1|0];g:{h:{switch(c-240|0){case 0:if((j+112&255)>>>0<48){break g}break a;case 4:if((j&240)==128){break g}break a;default:break h}}if((j&192)!=128){break a}}if((k&192)!=128){break a}m=y[i+3|0];if((m&192)!=128){break a}f=4;c=m&63|(k<<6&4032|(c<<18&1835008|(j&63)<<12));if(c>>>0>1114111){break a}}x[l>>2]=c;x[a+12>>2]=f+i;x[a+8>>2]=x[a+8>>2]+4;continue}break}b=d>>>0>i>>>0;break a}b=1}x[e>>2]=x[a+12>>2];x[h>>2]=x[a+8>>2];Wa=a+16|0;return b|0}function an(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;e=Wa-16|0;Wa=e;a:{if(!x[a+64>>2]){break a}b:{d=x[a+68>>2];if(d){c=x[a+92>>2];if(c&16){if(x[a+24>>2]!=x[a+20>>2]){b=-1;if((Za[x[x[a>>2]+52>>2]](a,-1)|0)==-1){break a}}d=a+72|0;while(1){b=x[a+68>>2];c=x[a+32>>2];c=Za[x[x[b>>2]+20>>2]](b,d,c,c+x[a+52>>2]|0,e+12|0)|0;f=x[a+32>>2];b=x[e+12>>2]-f|0;if((Uc(f,b,x[a+64>>2])|0)!=(b|0)){break b}c:{switch(c-1|0){case 1:break b;case 0:continue;default:break c}}break}b=0;if(!Hc(x[a+64>>2])){break a}break b}if(!(c&8)){break a}b=x[a+84>>2];x[e>>2]=x[a+80>>2];x[e+4>>2]=b;d:{e:{f:{if(y[a+98|0]){b=x[a+16>>2]-x[a+12>>2]|0;d=b>>31;break f}c=Za[x[x[d>>2]+24>>2]](d)|0;b=x[a+40>>2]-x[a+36>>2]|0;d=b>>31;if((c|0)>0){c=D(c,x[a+16>>2]-x[a+12>>2]|0);d=d+(c>>31)|0;f=b;b=b+c|0;d=f>>>0>b>>>0?d+1|0:d;break f}if(x[a+12>>2]!=x[a+16>>2]){break e}}c=0;break d}c=x[a+68>>2];c=Za[x[x[c>>2]+32>>2]](c,e,x[a+32>>2],x[a+36>>2],x[a+12>>2]-x[a+8>>2]|0)|0;c=x[a+36>>2]-(c+x[a+32>>2]|0)|0;d=d+(c>>31)|0;f=b;b=b+c|0;d=f>>>0>b>>>0?d+1|0:d;c=1}if(Vc(x[a+64>>2],0-b|0,0-(d+((b|0)!=0)|0)|0,1)){break b}if(c){b=x[e+4>>2];x[a+72>>2]=x[e>>2];x[a+76>>2]=b}b=x[a+32>>2];x[a+40>>2]=b;x[a+36>>2]=b;b=0;x[a+16>>2]=0;x[a+12>>2]=0;x[a+8>>2]=0;x[a+92>>2]=0;break a}Pc();p()}b=-1}Wa=e+16|0;return b|0}function ug(a,b){var c=0,d=0,e=0,f=0,g=0;a:{b:{c:{d:{e:{c=x[a+4>>2];f:{if((c|0)!=x[a+104>>2]){x[a+4>>2]=c+1;c=y[c|0];break f}c=hb(a)}switch(c-43|0){case 0:case 2:break e;default:break d}}f=(c|0)==45;g=!b;c=x[a+4>>2];g:{if((c|0)!=x[a+104>>2]){x[a+4>>2]=c+1;c=y[c|0];break g}c=hb(a)}b=c-58|0;if(g|b>>>0>4294967285){break c}if(x[a+116>>2]<0){break b}x[a+4>>2]=x[a+4>>2]-1;break b}b=c-58|0}if(b>>>0<4294967286){break b}b=c-48|0;if(b>>>0<10){while(1){d=D(d,10)+c|0;d=d-48|0;e=(d|0)<214748364;b=x[a+4>>2];h:{if((b|0)!=x[a+104>>2]){x[a+4>>2]=b+1;c=y[b|0];break h}c=hb(a)}b=c-48|0;if(e&b>>>0<=9){continue}break}e=d>>31}i:{if(b>>>0>=10){break i}while(1){d=Gn(d,e,10,0);b=d+c|0;c=Ya;c=b>>>0<d>>>0?c+1|0:c;d=b-48|0;e=c-(b>>>0<48)|0;b=x[a+4>>2];j:{if((b|0)!=x[a+104>>2]){x[a+4>>2]=b+1;c=y[b|0];break j}c=hb(a)}b=c-48|0;if(b>>>0>9){break i}if(d>>>0<2061584302&(e|0)<=21474836|(e|0)<21474836){continue}break}}if(b>>>0<10){while(1){b=x[a+4>>2];k:{if((b|0)!=x[a+104>>2]){x[a+4>>2]=b+1;b=y[b|0];break k}b=hb(a)}if(b-48>>>0<10){continue}break}}b=x[a+116>>2];if((b|0)>0|(b|0)>=0){x[a+4>>2]=x[a+4>>2]-1}a=d;d=f?0-a|0:a;e=f?0-(((a|0)!=0)+e|0)|0:e;break a}e=-2147483648;if(x[a+116>>2]<0){break a}x[a+4>>2]=x[a+4>>2]-1;Ya=-2147483648;return 0}Ya=e;return d}function Zi(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0;j=Wa-16|0;Wa=j;i=c;while(1){a:{if((d|0)==(i|0)){i=d;break a}if(!x[i>>2]){break a}i=i+4|0;continue}break}x[h>>2]=f;x[e>>2]=c;while(1){b:{c:{if(!((c|0)==(d|0)|(f|0)==(g|0))){k=x[b+4>>2];x[j+8>>2]=x[b>>2];x[j+12>>2]=k;m=1;l=Wa-16|0;Wa=l;x[l+12>>2]=x[a+8>>2];n=Rb(l+8|0,l+12|0);x[5120]=0;k=la(277,f|0,e|0,i-c>>2,g-f|0,b|0)|0;o=x[5120];x[5120]=0;d:{if((o|0)!=1){xb(n);Wa=l+16|0;break d}a=P()|0;xb(n);R(a|0);p()}e:{f:{g:{h:{switch(k+1|0){case 0:x[h>>2]=f;while(1){i:{if(x[e>>2]==(c|0)){break i}b=Od(f,x[c>>2],j+8|0,x[a+8>>2]);if((b|0)==-1){break i}f=b+x[h>>2]|0;x[h>>2]=f;c=c+4|0;continue}break};x[e>>2]=c;break g;case 1:break c;default:break h}}f=k+x[h>>2]|0;x[h>>2]=f;if((f|0)==(g|0)){break e}if((d|0)==(i|0)){c=x[e>>2];i=d;continue}i=Od(j+4|0,0,b,x[a+8>>2]);if((i|0)!=-1){break f}}m=2;break c}c=j+4|0;if(g-x[h>>2]>>>0<i>>>0){break c}while(1){if(i){f=y[c|0];k=x[h>>2];x[h>>2]=k+1;v[k|0]=f;i=i-1|0;c=c+1|0;continue}break}c=x[e>>2]+4|0;x[e>>2]=c;i=c;while(1){if((d|0)==(i|0)){i=d;break b}if(!x[i>>2]){break b}i=i+4|0;continue}}c=x[e>>2]}m=(c|0)!=(d|0)}Wa=j+16|0;return m|0}f=x[h>>2];continue}}function vk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;e=x[a+8>>2];c=x[a+4>>2];if((e-c|0)/40>>>0>=b>>>0){if(b){b=D(b,40)-40|0;b=(b-((b>>>0)%40|0)|0)+40|0;c=Mb(c,0,b)+b|0}x[a+4>>2]=c;return}a:{b:{c:{g=x[a>>2];f=(c-g|0)/40|0;d=f+b|0;if(d>>>0<107374183){e=(e-g|0)/40|0;h=e<<1;e=e>>>0>=53687091?107374182:d>>>0<h>>>0?h:d;if(e){if(e>>>0>=107374183){break c}i=rb(D(e,40))}d=D(f,40)+i|0;b=D(b,40)-40|0;f=(b-((b>>>0)%40|0)|0)+40|0;b=Mb(d,0,f);f=b+f|0;e=D(e,40)+i|0;if((c|0)==(g|0)){break b}while(1){d=d-40|0;c=c-40|0;x[d>>2]=x[c>>2];x[d+12>>2]=x[c+12>>2];b=x[c+8>>2];x[d+4>>2]=x[c+4>>2];x[d+8>>2]=b;x[c+12>>2]=0;x[c+4>>2]=0;x[c+8>>2]=0;x[d+24>>2]=x[c+24>>2];b=x[c+20>>2];x[d+16>>2]=x[c+16>>2];x[d+20>>2]=b;x[c+24>>2]=0;x[c+16>>2]=0;x[c+20>>2]=0;x[d+36>>2]=x[c+36>>2];b=x[c+32>>2];x[d+28>>2]=x[c+28>>2];x[d+32>>2]=b;x[c+28>>2]=0;x[c+32>>2]=0;x[c+36>>2]=0;if((c|0)!=(g|0)){continue}break}x[a+8>>2]=e;c=x[a+4>>2];x[a+4>>2]=f;b=x[a>>2];x[a>>2]=d;if((b|0)==(c|0)){break a}while(1){if(v[c-1|0]<0){db(x[c-12>>2])}if(v[c-13|0]<0){db(x[c-24>>2])}if(v[c-25|0]<0){db(x[c-36>>2])}c=c-40|0;if((b|0)!=(c|0)){continue}break}c=b;break a}oc();p()}Mc();p()}x[a+8>>2]=e;x[a+4>>2]=f;x[a>>2]=b}if(c){db(c)}}function _d(a,b,c,d,e){var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=Wa-16|0;Wa=l;a:{b:{c:{if((c|0)<=36){f=y[a|0];if(f){break c}g=a;break b}x[4995]=28;d=0;e=0;break a}g=a;d:{while(1){f=f<<24>>24;if(!((f|0)==32|f-9>>>0<5)){break d}f=y[g+1|0];g=g+1|0;if(f){continue}break}break b}e:{f=y[g|0];switch(f-43|0){case 0:case 2:break e;default:break b}}j=(f|0)==45?-1:0;g=g+1|0}f:{if(!((c|16)!=16|y[g|0]!=48)){n=1;if((y[g+1|0]&223)==88){g=g+2|0;m=16;break f}g=g+1|0;m=c?c:8;break f}m=c?c:10}c=0;while(1){g:{f=-48;i=v[g|0];h:{if((i-48&255)>>>0<10){break h}f=-87;if((i-97&255)>>>0<26){break h}f=-55;if((i-65&255)>>>0>25){break g}}i=f+i|0;if((i|0)>=(m|0)){break g}Ab(l,m,0,0,0,k,h,0,0);f=1;i:{if(x[l+8>>2]|x[l+12>>2]){break i}o=Gn(k,h,m,0);p=Ya;if((p|0)==-1&(i^-1)>>>0<o>>>0){break i}h=p;k=i+o|0;h=k>>>0<i>>>0?h+1|0:h;n=1;f=c}g=g+1|0;c=f;continue}break}if(b){x[b>>2]=n?g:a}j:{k:{if(c){x[4995]=68;a=d&1;j=a?0:j;k=d;h=e;break k}if((e|0)==(h|0)&d>>>0>k>>>0|e>>>0>h>>>0){break j}a=d&1}if(!(a|j)){x[4995]=68;a=d;d=a-1|0;e=e-!a|0;break a}if((e|0)==(h|0)&d>>>0>=k>>>0|e>>>0>h>>>0){break j}x[4995]=68;break a}a=j^k;d=a-j|0;b=j>>31;e=(b^h)-((a>>>0<j>>>0)+b|0)|0}Wa=l+16|0;Ya=e;return d}function zh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;if(tb(a,x[b+8>>2],e)){if(!(x[b+28>>2]==1|x[b+4>>2]!=(c|0))){x[b+28>>2]=d}return}a:{if(tb(a,x[b>>2],e)){if(!(x[b+16>>2]!=(c|0)&x[b+20>>2]!=(c|0))){if((d|0)!=1){break a}x[b+32>>2]=1;return}x[b+32>>2]=d;if(x[b+44>>2]!=4){f=a+16|0;h=f+(x[a+12>>2]<<3)|0;d=0;b:{c:{while(1){d:{if(f>>>0>=h>>>0){break d}w[b+52>>1]=0;Bd(f,b,c,c,1,e);if(y[b+54|0]){break d}e:{if(!y[b+53|0]){break e}if(y[b+52|0]){d=1;if(x[b+24>>2]==1){break c}g=1;if(y[a+8|0]&2){break e}break c}g=1;if(!(v[a+8|0]&1)){break c}}f=f+8|0;continue}break}a=4;if(!g){break b}}a=3}x[b+44>>2]=a;if(d&1){break a}}x[b+20>>2]=c;x[b+40>>2]=x[b+40>>2]+1;if(x[b+36>>2]!=1|x[b+24>>2]!=2){break a}v[b+54|0]=1;return}g=x[a+12>>2];h=a+16|0;Zc(h,b,c,d,e);f=a+24|0;g=h+(g<<3)|0;if(f>>>0>=g>>>0){break a}a=x[a+8>>2];if(!(!(a&2)&x[b+36>>2]!=1)){while(1){if(y[b+54|0]){break a}Zc(f,b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break}break a}if(!(a&1)){while(1){if(y[b+54|0]|x[b+36>>2]==1){break a}Zc(f,b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break a}}while(1){if(y[b+54|0]|x[b+36>>2]==1&x[b+24>>2]==1){break a}Zc(f,b,c,d,e);f=f+8|0;if(g>>>0>f>>>0){continue}break}}}function Yi(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0;j=Wa-16|0;Wa=j;i=c;while(1){a:{if((d|0)==(i|0)){i=d;break a}if(!y[i|0]){break a}i=i+1|0;continue}break}x[h>>2]=f;x[e>>2]=c;while(1){b:{c:{d:{if((c|0)==(d|0)|(f|0)==(g|0)){break d}l=x[b+4>>2];x[j+8>>2]=x[b>>2];x[j+12>>2]=l;k=Wa-16|0;Wa=k;x[k+12>>2]=x[a+8>>2];m=Rb(k+8|0,k+12|0);x[5120]=0;l=gg(f,e,i-c|0,g-f>>2,b);n=x[5120];x[5120]=0;e:{if((n|0)!=1){xb(m);Wa=k+16|0;break e}a=P()|0;xb(m);R(a|0);p()}f:{g:{h:{i:{if((l|0)==-1){while(1){j:{x[h>>2]=f;if(x[e>>2]==(c|0)){break j}g=1;k:{l:{m:{b=ff(f,c,i-c|0,j+8|0,x[a+8>>2]);switch(b+2|0){case 2:break k;case 1:break m;case 0:break g;default:break l}}x[e>>2]=c;break i}g=b}c=c+g|0;f=x[h>>2]+4|0;continue}break}x[e>>2]=c;break d}f=x[h>>2]+(l<<2)|0;x[h>>2]=f;if((f|0)==(g|0)){break f}c=x[e>>2];if((d|0)==(i|0)){i=d;continue}if(!ff(f,c,1,b,x[a+8>>2])){break h}}a=2;break c}x[h>>2]=x[h>>2]+4;c=x[e>>2]+1|0;x[e>>2]=c;i=c;while(1){if((d|0)==(i|0)){i=d;break b}if(!y[i|0]){break b}i=i+1|0;continue}}x[e>>2]=c;a=1;break c}c=x[e>>2]}a=(c|0)!=(d|0)}Wa=j+16|0;return a|0}f=x[h>>2];continue}}function ld(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0;m=Wa-16|0;Wa=m;x[m+12>>2]=a;a:{b:{if((a|0)==(f|0)){if(!y[b|0]){break b}a=0;v[b|0]=0;b=x[e>>2];x[e>>2]=b+1;v[b|0]=46;if(y[h+11|0]>>>7|0){b=x[h+4>>2]}else{b=y[h+11|0]&127}if(!b){break a}b=x[j>>2];if((b-i|0)>159){break a}c=x[k>>2];x[j>>2]=b+4;x[b>>2]=c;break a}if(y[h+11|0]>>>7|0){f=x[h+4>>2]}else{f=y[h+11|0]&127}if(!(!f|(a|0)!=(g|0))){if(!y[b|0]){break b}a=0;b=x[j>>2];if((b-i|0)>159){break a}a=x[k>>2];x[j>>2]=b+4;x[b>>2]=a;a=0;x[k>>2]=0;break a}a=-1;f=Td(l,l+128|0,m+12|0)-l|0;if((f|0)>124){break a}g=y[(f>>2)+9152|0];c:{d:{a=f&-5;if((a|0)!=88){if((a|0)!=96){break d}b=x[e>>2];if((b|0)!=(d|0)){a=-1;if((y[b-1|0]&95)!=(y[c|0]&127)){break a}}x[e>>2]=b+1;v[b|0]=g;a=0;break a}v[c|0]=80;break c}a=g&95;if((a|0)!=y[c|0]){break c}v[c|0]=a|128;if(!y[b|0]){break c}v[b|0]=0;if(y[h+11|0]>>>7|0){a=x[h+4>>2]}else{a=y[h+11|0]&127}if(!a){break c}a=x[j>>2];if((a-i|0)>159){break c}b=x[k>>2];x[j>>2]=a+4;x[a>>2]=b}a=x[e>>2];x[e>>2]=a+1;v[a|0]=g;a=0;if((f|0)>84){break a}x[k>>2]=x[k>>2]+1;break a}a=-1}Wa=m+16|0;return a|0}function nd(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0;m=Wa-16|0;Wa=m;v[m+15|0]=a;a:{b:{if((a|0)==(f|0)){if(!y[b|0]){break b}a=0;v[b|0]=0;b=x[e>>2];x[e>>2]=b+1;v[b|0]=46;if(y[h+11|0]>>>7|0){b=x[h+4>>2]}else{b=y[h+11|0]&127}if(!b){break a}b=x[j>>2];if((b-i|0)>159){break a}c=x[k>>2];x[j>>2]=b+4;x[b>>2]=c;break a}if(y[h+11|0]>>>7|0){f=x[h+4>>2]}else{f=y[h+11|0]&127}if(!(!f|(a|0)!=(g|0))){if(!y[b|0]){break b}a=0;b=x[j>>2];if((b-i|0)>159){break a}a=x[k>>2];x[j>>2]=b+4;x[b>>2]=a;a=0;x[k>>2]=0;break a}a=-1;f=Wd(l,l+32|0,m+15|0)-l|0;if((f|0)>31){break a}g=y[f+9152|0];c:{d:{switch((f&-2)-22|0){case 2:b=x[e>>2];if((b|0)!=(d|0)&(y[b-1|0]&95)!=(y[c|0]&127)){break a}x[e>>2]=b+1;v[b|0]=g;a=0;break a;case 0:v[c|0]=80;break c;default:break d}}a=g&95;if((a|0)!=y[c|0]){break c}v[c|0]=a|128;if(!y[b|0]){break c}v[b|0]=0;if(y[h+11|0]>>>7|0){a=x[h+4>>2]}else{a=y[h+11|0]&127}if(!a){break c}a=x[j>>2];if((a-i|0)>159){break c}b=x[k>>2];x[j>>2]=a+4;x[a>>2]=b}a=x[e>>2];x[e>>2]=a+1;v[a|0]=g;a=0;if((f|0)>21){break a}x[k>>2]=x[k>>2]+1;break a}a=-1}Wa=m+16|0;return a|0}function Fg(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;if(b>>>0>8){f=b>>>0<=4?4:b;g=a?a:1;a:{while(1){h=Wa-16|0;Wa=h;x[h+12>>2]=0;b:{c:{if((f|0)==8){a=ob(g);break c}if(f&3|f>>>0<4){break b}a=f>>>2|0;if(a-1&a|-64-f>>>0<g>>>0){break b}d=16;a=f>>>0<=16?16:f;b=a>>>0<=16?16:a;d:{if(!(b-1&b)){a=b;break d}while(1){a=d;d=a<<1;if(a>>>0<b>>>0){continue}break}}e:{if(-64-a>>>0<=g>>>0){x[4995]=48;b=0;break e}d=g>>>0<11?16:g+11&-8;c=ob((d+a|0)+12|0);b=0;if(!c){break e}b=c-8|0;f:{if(!(c&a-1)){a=b;break f}i=c-4|0;j=x[i>>2];e=a;a=((a+c|0)-1&0-a)-8|0;a=(a-b>>>0<=15?e:0)+a|0;c=a-b|0;e=(j&-8)-c|0;if(!(j&3)){b=x[b>>2];x[a+4>>2]=e;x[a>>2]=b+c;break f}x[a+4>>2]=e|x[a+4>>2]&1|2;e=a+e|0;x[e+4>>2]=x[e+4>>2]|1;x[i>>2]=c|x[i>>2]&1|2;e=b+c|0;x[e+4>>2]=x[e+4>>2]|1;cd(b,c)}b=x[a+4>>2];g:{if(!(b&3)){break g}c=b&-8;if(c>>>0<=d+16>>>0){break g}x[a+4>>2]=d|b&1|2;b=a+d|0;d=c-d|0;x[b+4>>2]=d|3;c=a+c|0;x[c+4>>2]=x[c+4>>2]|1;cd(b,d)}b=a+8|0}a=b}if(!a){break b}x[h+12>>2]=a}Wa=h+16|0;a=x[h+12>>2];if(a){break a}a=x[5702];if(a){Za[a|0]();continue}break}a=ba(4)|0;x[a>>2]=19476;x[a>>2]=19436;ca(a|0,19552,32);p()}return a}return rb(a)}function ub(a,b,c){var d=0,e=0,f=0;if(c>>>0>=512){Pa(a|0,b|0,c|0);return a}e=a+c|0;a:{if(!((a^b)&3)){b:{if(!(a&3)){c=a;break b}if(!c){c=a;break b}c=a;while(1){v[c|0]=y[b|0];b=b+1|0;c=c+1|0;if(!(c&3)){break b}if(c>>>0<e>>>0){continue}break}}d=e&-4;c:{if(d>>>0<64){break c}f=d+-64|0;if(f>>>0<c>>>0){break c}while(1){x[c>>2]=x[b>>2];x[c+4>>2]=x[b+4>>2];x[c+8>>2]=x[b+8>>2];x[c+12>>2]=x[b+12>>2];x[c+16>>2]=x[b+16>>2];x[c+20>>2]=x[b+20>>2];x[c+24>>2]=x[b+24>>2];x[c+28>>2]=x[b+28>>2];x[c+32>>2]=x[b+32>>2];x[c+36>>2]=x[b+36>>2];x[c+40>>2]=x[b+40>>2];x[c+44>>2]=x[b+44>>2];x[c+48>>2]=x[b+48>>2];x[c+52>>2]=x[b+52>>2];x[c+56>>2]=x[b+56>>2];x[c+60>>2]=x[b+60>>2];b=b- -64|0;c=c- -64|0;if(f>>>0>=c>>>0){continue}break}}if(c>>>0>=d>>>0){break a}while(1){x[c>>2]=x[b>>2];b=b+4|0;c=c+4|0;if(d>>>0>c>>>0){continue}break}break a}if(e>>>0<4){c=a;break a}d=e-4|0;if(d>>>0<a>>>0){c=a;break a}c=a;while(1){v[c|0]=y[b|0];v[c+1|0]=y[b+1|0];v[c+2|0]=y[b+2|0];v[c+3|0]=y[b+3|0];b=b+4|0;c=c+4|0;if(d>>>0>=c>>>0){continue}break}}if(c>>>0<e>>>0){while(1){v[c|0]=y[b|0];b=b+1|0;c=c+1|0;if((e|0)!=(c|0)){continue}break}}return a}function Um(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0;if((c|0)!=1){j=Wa-1040|0;Wa=j;r=x[4995];a:{b:{c:{b=j+16|0;m=z[((c>>>0<=149?c:0)<<1)+17920>>1]+16088|0;d=x[x[5164]+20>>2];if(d){k=x[d+4>>2];d=x[d>>2];f=x[d>>2]+1794895138|0;i=pc(x[d+8>>2],f);h=pc(x[d+12>>2],f);e=pc(x[d+16>>2],f);d:{if(k>>>2>>>0<=i>>>0){break d}l=k-(i<<2)|0;if((e|h)&3|(l>>>0<=h>>>0|e>>>0>=l>>>0)){break d}s=e>>>2|0;t=h>>>2|0;h=0;while(1){l=i>>>1|0;n=l+h|0;o=n<<1;e=d+(o+t<<2)|0;q=pc(x[e>>2],f);e=pc(x[e+4>>2],f);if(e>>>0>=k>>>0|k-e>>>0<=q>>>0|y[d+(e+q|0)|0]){break d}e=Nc(m,d+e|0);if(!e){h=d+(s+o<<2)|0;i=pc(x[h>>2],f);f=pc(x[h+4>>2],f);if(f>>>0>=k>>>0|i>>>0>=k-f>>>0){break d}g=y[d+(f+i|0)|0]?0:d+f|0;break d}if((i|0)==1){break d}e=(e|0)<0;i=e?l:i-l|0;h=e?h:n;continue}}}g=g?g:m;d=_b(g);e:{if(d>>>0>=1024){ub(b,g,1023);v[b+1023|0]=0;g=68;break e}ub(b,g,d+1|0);g=0}switch(g+1|0){case 1:break a;case 0:break c;default:break b}}g=x[4995]}b=2753;if((g|0)==28){break a}oa();p()}if(!y[b|0]){x[j>>2]=c;b=j+16|0;be(b,1024,1889,j)}x[4995]=r;Tb(a,b);Wa=j+1040|0;return}Tb(a,1302)}function cl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;f=Wa-32|0;Wa=f;v[e+8|0]=0;d=x[x[a>>2]-12>>2]+a|0;a:{if(!x[d+16>>2]){if(x[d+72>>2]){Tg(x[(x[x[a>>2]-12>>2]+a|0)+72>>2])}v[e+8|0]=!x[(x[x[a>>2]-12>>2]+a|0)+16>>2];break a}ne(d,4)}Wa=f+32|0;b:{c:{if(y[e+8|0]){d:{if(v[b+11|0]<0){v[x[b>>2]]=0;x[b+4>>2]=0;break d}v[b+11|0]=0;v[b|0]=0}f=c&255;e:{f:{while(1){c=x[(x[x[a>>2]-12>>2]+a|0)+24>>2];d=x[c+12>>2];g:{if((d|0)==x[c+16>>2]){d=x[x[c>>2]+40>>2];x[5120]=0;c=Q(d|0,c|0)|0;d=x[5120];x[5120]=0;if((d|0)!=1){if((c|0)!=-1){break g}c=g?2:6;break e}break f}x[c+12>>2]=d+1;c=y[d|0]}if((f|0)==(c&255)){c=0;break e}x[5120]=0;S(45,b|0,c<<24>>24);c=x[5120];x[5120]=0;if((c|0)==1){break f}g=g+1|0;if(x[b+4>>2]!=2147483631|v[b+11|0]>=0){continue}break}c=4;break e}ha(V(0)|0)|0;c=1;b=x[a>>2]-12|0;d=x[b>>2]+a|0;x[d+16>>2]=x[d+16>>2]|1;if(v[(x[b>>2]+a|0)+20|0]&1){x[5120]=0;X(46);a=x[5120];x[5120]=0;if((a|0)!=1){break b}a=P()|0;x[5120]=0;X(47);b=x[5120];x[5120]=0;if((b|0)==1){break c}R(a|0);p()}qa()}b=x[x[a>>2]-12>>2]+a|0;ie(b,x[b+16>>2]|c)}Wa=e+16|0;return a|0}V(0)|0;lb()}p()}function se(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=Wa-32|0;Wa=f;a:{g=x[a+4>>2];d=x[a>>2];i=(g-d|0)/12|0;c=i+1|0;if(c>>>0<357913942){h=a+8|0;e=x[h>>2];x[f+24>>2]=h;h=0;e=(e-d|0)/12|0;j=e<<1;e=e>>>0>=178956970?357913941:c>>>0<j>>>0?j:c;if(e){if(e>>>0>=357913942){break a}h=rb(D(e,12))}x[f+8>>2]=h;c=D(i,12)+h|0;x[f+16>>2]=c;h=D(e,12)+h|0;x[f+20>>2]=h;x[f+12>>2]=c;b:{c:{if(v[b+11|0]>=0){e=x[b+4>>2];x[c>>2]=x[b>>2];x[c+4>>2]=e;x[c+8>>2]=x[b+8>>2];break c}d=x[b+4>>2];b=x[b>>2];x[5120]=0;U(4,c|0,b|0,d|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}d=x[a>>2];g=x[a+4>>2]}e=c+12|0;if((d|0)==(g|0)){b=d}else{while(1){g=g-12|0;b=x[g+4>>2];c=c-12|0;x[c>>2]=x[g>>2];x[c+4>>2]=b;x[c+8>>2]=x[g+8>>2];x[g>>2]=0;x[g+4>>2]=0;x[g+8>>2]=0;if((d|0)!=(g|0)){continue}break}d=x[a+4>>2];b=x[a>>2]}x[a>>2]=c;x[f+12>>2]=b;x[a+4>>2]=e;c=x[a+8>>2];x[a+8>>2]=h;x[f+8>>2]=b;x[f+20>>2]=c;if((b|0)!=(d|0)){while(1){a=d-12|0;x[f+16>>2]=a;if(v[d-1|0]<0){db(x[a>>2])}d=a;if((a|0)!=(b|0)){continue}break}d=b}if(d){db(d)}Wa=f+32|0;return}a=P()|0;Tf(f+8|0);R(a|0);p()}oc();p()}Mc();p()}function Ak(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=Wa-16|0;Wa=k;a:{if(a){a=Bf(c);b:{if(b){Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);break b}Za[x[x[a>>2]+40>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+28>>2]](k,a)}Vb(i,k);gb(k);x[e>>2]=Za[x[x[a>>2]+12>>2]](a);x[f>>2]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(g,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Vb(h,k);gb(k);a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=Af(c);c:{if(b){Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);break c}Za[x[x[a>>2]+40>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+28>>2]](k,a)}Vb(i,k);gb(k);x[e>>2]=Za[x[x[a>>2]+12>>2]](a);x[f>>2]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(g,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Vb(h,k);gb(k);a=Za[x[x[a>>2]+36>>2]](a)|0}x[j>>2]=a;Wa=k+16|0}function Fk(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=Wa-16|0;Wa=k;a:{if(a){a=Ff(c);b:{if(b){Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);break b}Za[x[x[a>>2]+40>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+28>>2]](k,a)}Fb(i,k);cb(k);v[e|0]=Za[x[x[a>>2]+12>>2]](a);v[f|0]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(g,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Fb(h,k);cb(k);a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=Ef(c);c:{if(b){Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);break c}Za[x[x[a>>2]+40>>2]](k,a);b=x[k>>2];v[d|0]=b;v[d+1|0]=b>>>8;v[d+2|0]=b>>>16;v[d+3|0]=b>>>24;Za[x[x[a>>2]+28>>2]](k,a)}Fb(i,k);cb(k);v[e|0]=Za[x[x[a>>2]+12>>2]](a);v[f|0]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(g,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Fb(h,k);cb(k);a=Za[x[x[a>>2]+36>>2]](a)|0}x[j>>2]=a;Wa=k+16|0}function ee(a,b,c,d){var e=0,f=0,g=0,h=0;g=Wa-32|0;Wa=g;e=d&2147483647;h=e;f=e-1006698496|0;e=e-1140785152|0;a:{if((f|0)==(e|0)&0|e>>>0>f>>>0){e=c<<4|b>>>28;c=d<<4|c>>>28;b=b&268435455;if((b|0)==134217728&(a|0)!=0|b>>>0>134217728){f=c+1073741824|0;e=e+1|0;f=e?f:f+1|0;break a}f=c+1073741824|0;if(a|(b|0)!=134217728){break a}a=e&1;e=a+e|0;f=a>>>0>e>>>0?f+1|0:f;break a}if(!(!c&(h|0)==2147418112?!(a|b):h>>>0<2147418112)){a=d<<4|c>>>28;e=c<<4|b>>>28;f=a&524287|2146959360;break a}e=0;f=2146435072;if(h>>>0>1140785151){break a}f=0;h=h>>>16|0;if(h>>>0<15249){break a}e=d&65535|65536;Eb(g+16|0,a,b,c,e,h-15233|0);rc(g,a,b,c,e,15361-h|0);b=x[g+8>>2];e=b<<4;b=x[g+12>>2]<<4|b>>>28;c=x[g>>2];f=x[g+4>>2];h=f;e=f>>>28|e;f=b;a=h&268435455;b=c|(x[g+16>>2]|x[g+24>>2]|(x[g+20>>2]|x[g+28>>2]))!=0;if((a|0)==134217728&(b|0)!=0|a>>>0>134217728){e=e+1|0;f=e?f:f+1|0;break a}if(b|(a|0)!=134217728){break a}a=e;e=e+(e&1)|0;f=a>>>0>e>>>0?f+1|0:f}Wa=g+32|0;l(0,e|0);l(1,d&-2147483648|f);return+n()}function nb(a){var b=0,c=0,d=0,e=0;b=Wa-32|0;Wa=b;x[b+12>>2]=0;x[b+8>>2]=268;d=x[b+12>>2];x[b>>2]=x[b+8>>2];x[b+4>>2]=d;d=x[b+4>>2];c=b+16|0;x[c+4>>2]=x[b>>2];x[c+8>>2]=d;x[c>>2]=a;d=Wa-16|0;Wa=d;if(x[a>>2]!=-1){a:{e=d+8|0;x[e>>2]=c;x[d>>2]=e;while(1){if(x[a>>2]==1){continue}break}b:{c:{if(!x[a>>2]){x[a>>2]=1;x[5120]=0;c=x[5120];x[5120]=0;d:{if((c|0)==1){break d}x[5120]=0;aa(274,d|0);c=x[5120];x[5120]=0;if((c|0)==1){break d}x[5120]=0;c=x[5120];x[5120]=0;if((c|0)==1){break d}x[a>>2]=-1;x[5120]=0;c=x[5120];x[5120]=0;if((c|0)==1){break d}x[5120]=0;c=x[5120];x[5120]=0;if((c|0)!=1){break a}}ha(V(0)|0)|0;x[5120]=0;b=x[5120];x[5120]=0;e:{if((b|0)==1){break e}x[a>>2]=0;x[5120]=0;a=x[5120];x[5120]=0;if((a|0)==1){break e}x[5120]=0;a=x[5120];x[5120]=0;if((a|0)==1){break e}x[5120]=0;X(46);a=x[5120];x[5120]=0;if((a|0)!=1){break b}}a=P()|0;x[5120]=0;X(47);b=x[5120];x[5120]=0;if((b|0)==1){break c}R(a|0);p()}break a}V(0)|0;lb()}p()}}Wa=d+16|0;Wa=b+32|0;return x[a+4>>2]-1|0}function bf(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;a=Wa-16|0;Wa=a;x[a+12>>2]=c;x[a+8>>2]=f;x[a+12>>2]=c;x[a+8>>2]=f;b=x[a+12>>2];a:{while(1){if(b>>>0>=d>>>0){c=0;break a}c=2;b=x[b>>2];if(b>>>0>1114111|(b&-2048)==55296){break a}b:{c:{if(b>>>0<=127){c=1;f=x[a+8>>2];if((g-f|0)<=0){break a}x[a+8>>2]=f+1;v[f|0]=b;break c}if(b>>>0<=2047){c=x[a+8>>2];if((g-c|0)<2){break b}x[a+8>>2]=c+1;v[c|0]=b>>>6|192;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128;break c}c=x[a+8>>2];f=g-c|0;if(b>>>0<=65535){if((f|0)<3){break b}x[a+8>>2]=c+1;v[c|0]=b>>>12|224;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b>>>6&63|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128;break c}if((f|0)<4){break b}x[a+8>>2]=c+1;v[c|0]=b>>>18|240;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b>>>12&63|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b>>>6&63|128;c=x[a+8>>2];x[a+8>>2]=c+1;v[c|0]=b&63|128}b=x[a+12>>2]+4|0;x[a+12>>2]=b;continue}break}c=1}x[e>>2]=x[a+12>>2];x[h>>2]=x[a+8>>2];Wa=a+16|0;return c|0}function $e(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;a=c;a:{if((d-a|0)<3){break a}}while(1){b:{if(e>>>0<=h>>>0|a>>>0>=d>>>0){break b}b=v[a|0];g=b&255;c:{if((b|0)>=0){b=1;break c}if(b>>>0<4294967234){break b}if(b>>>0<=4294967263){if((y[a+1|0]&192)!=128|(d-a|0)<2){break b}b=2;break c}d:{e:{if(b>>>0<=4294967279){if((d-a|0)<3){break b}f=y[a+2|0];b=y[a+1|0];if((g|0)==237){break e}if((g|0)==224){if((b&224)==160){break d}break b}if((b&192)!=128){break b}break d}if((d-a|0)<4|b>>>0>4294967284){break b}i=y[a+2|0];f=y[a+1|0];f:{g:{switch(g-240|0){case 0:if((f+112&255)>>>0<48){break f}break b;case 4:if((f&240)==128){break f}break b;default:break g}}if((f&192)!=128){break b}}if((i&192)!=128){break b}j=y[a+3|0];if((j&192)!=128){break b}b=4;if((j&63|(i<<6&4032|(g<<18&1835008|(f&63)<<12)))>>>0>1114111){break b}break c}if((b&224)!=128){break b}}if((f&192)!=128){break b}b=3}h=h+1|0;a=a+b|0;continue}break}return a-c|0}function mn(a){a=a|0;var b=0,c=0,d=0,e=0;d=Wa-16|0;Wa=d;x[a>>2]=4048;nf(a+4|0);x[a+24>>2]=0;x[a+28>>2]=0;x[a+16>>2]=0;x[a+20>>2]=0;x[a+8>>2]=0;x[a+12>>2]=0;x[a+40>>2]=0;x[a+32>>2]=0;x[a+36>>2]=0;x[a>>2]=4160;Mb(a+52|0,0,47);c=d+8|0;b=x[a+4>>2];x[c>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=T(71,c|0,20964)|0;e=x[5120];x[5120]=0;if((e|0)==1){V(0)|0;lb();p()}c=x[c>>2];e=x[c+4>>2]-1|0;x[c+4>>2]=e;if((e|0)==-1){Za[x[x[c>>2]+8>>2]](c)}a:{b:{c:{if(b){b=x[a+4>>2];x[d>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=Q(70,d|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break c}x[a+68>>2]=b;b=x[d>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}b=x[a+68>>2];v[a+98|0]=Za[x[x[b>>2]+28>>2]](b)}b=x[x[a>>2]+12>>2];x[5120]=0;Y(b|0,a|0,0,4096)|0;b=x[5120];x[5120]=0;if((b|0)!=1){break b}c=P()|0;break a}c=P()|0;b=x[d>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}break a}Wa=d+16|0;return a|0}Tc(a);R(c|0);p()}function cf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;a=c;a:{if((d-a|0)<3){break a}}while(1){b:{if(e>>>0<=g>>>0|a>>>0>=d>>>0){break b}b=y[a|0];f=a+1|0;c:{if(b<<24>>24>=0){break c}if(b>>>0<194){break b}if(b>>>0<=223){if((y[a+1|0]&192)!=128|(d-a|0)<2){break b}f=a+2|0;break c}d:{e:{if(b>>>0<=239){if((d-a|0)<3){break b}h=y[a+2|0];f=y[a+1|0];if((b|0)==237){break e}if((b|0)==224){if((f&224)==160){break d}break b}if((f&192)!=128){break b}break d}if((d-a|0)<4|b>>>0>244|e-g>>>0<2){break b}h=y[a+2|0];f=y[a+1|0];f:{g:{switch(b-240|0){case 0:if((f+112&255)>>>0<48){break f}break b;case 4:if((f&240)==128){break f}break b;default:break g}}if((f&192)!=128){break b}}if((h&192)!=128){break b}i=y[a+3|0];if((i&192)!=128|(i&63|(h<<6&4032|(b<<18&1835008|(f&63)<<12)))>>>0>1114111){break b}g=g+1|0;f=a+4|0;break c}if((f&224)!=128){break b}}if((h&192)!=128){break b}f=a+3|0}a=f;g=g+1|0;continue}break}return a-c|0}function Dj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=x[a+4>>2]-x[a>>2]>>2;if(c>>>0<b>>>0){h=Wa-32|0;Wa=h;a:{b:{f=b-c|0;c:{if(f>>>0<=x[a+8>>2]-x[a+4>>2]>>2>>>0){tf(a,f);break c}g=a+16|0;e=h+8|0;b=Wa-16|0;Wa=b;d=(x[a+4>>2]-x[a>>2]>>2)+f|0;x[b+12>>2]=d;d:{c=Se();if(d>>>0<=c>>>0){d=x[a+8>>2]-x[a>>2]>>2;if(d>>>0<c>>>1>>>0){x[b+8>>2]=d<<1;c=Wa-16|0;Wa=c;Wa=c+16|0;c=b+12|0;d=b+8|0;c=x[(A[d>>2]<A[c>>2]?c:d)>>2]}Wa=b+16|0;b=c;break d}oc();p()}i=x[a+4>>2]-x[a>>2]>>2;c=0;d=Wa-16|0;Wa=d;x[d+12>>2]=0;x[e+12>>2]=0;x[e+16>>2]=g;e:{if(!b){x[e>>2]=0;b=0;break e}Re(d,x[e+16>>2],b);c=x[d>>2];x[e>>2]=c;b=x[d+4>>2]}g=(i<<2)+c|0;x[e+4>>2]=g;x[e+8>>2]=g;x[e+12>>2]=(b<<2)+c;Wa=d+16|0;x[5120]=0;S(271,e|0,f|0);b=x[5120];x[5120]=0;if((b|0)==1){break b}x[5120]=0;S(272,a|0,e|0);a=x[5120];x[5120]=0;if((a|0)==1){break b}Pe(e)}Wa=h+32|0;break a}a=P()|0;Pe(e);R(a|0);p()}return}if(b>>>0<c>>>0){Qe(a,x[a>>2]+(b<<2)|0)}}function hb(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=x[a+112>>2];d=x[a+116>>2];g=(b|d)!=0;f=b;c=x[a+4>>2];h=x[a+44>>2];b=c-h|0;i=b;e=b+x[a+120>>2]|0;b=x[a+124>>2]+(b>>31)|0;a:{b=e>>>0<i>>>0?b+1|0:b;if(!(((b|0)>=(d|0)&e>>>0>=f>>>0|(b|0)>(d|0))&g)){d=Wa-16|0;Wa=d;c=-1;b:{if(xd(a)){break b}if((Za[x[a+32>>2]](a,d+15|0,1)|0)!=1){break b}c=y[d+15|0]}Wa=d+16|0;d=c;if((c|0)>=0){break a}h=x[a+44>>2];c=x[a+4>>2]}x[a+112>>2]=-1;x[a+116>>2]=-1;x[a+104>>2]=c;d=h-c|0;c=d+e|0;b=(d>>31)+b|0;x[a+120>>2]=c;x[a+124>>2]=c>>>0<d>>>0?b+1|0:b;return-1}c=e+1|0;b=c?b:b+1|0;g=x[a+4>>2];h=x[a+8>>2];f=x[a+116>>2];i=f;e=x[a+112>>2];c:{if(!(f|e)){break c}f=e-c|0;e=i-(b+(c>>>0>e>>>0)|0)|0;j=h-g|0;i=j>>31;if((e|0)>=(i|0)&f>>>0>=j>>>0|(e|0)>(i|0)){break c}h=f+g|0}x[a+104>>2]=h;e=x[a+44>>2];f=e-g|0;c=f+c|0;b=(f>>31)+b|0;x[a+120>>2]=c;x[a+124>>2]=c>>>0<f>>>0?b+1|0:b;if(e>>>0>=g>>>0){v[g-1|0]=d}return d}function Rh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=Wa-32|0;Wa=e;i=e+8|0;j=e+21|0;d=j;g=e+32|0;if(!((d|0)==(g|0)|(b|0)>=0)){v[d|0]=45;d=d+1|0;b=0-b|0}c=g;f=c-d|0;a:{if((f|0)<=9){k=f;f=D(32-G(b|1)|0,1233)>>12;h=61;if((k|0)<(f+(A[(f<<2)+18224>>2]<=b>>>0)|0)){break a}}b:{if(b>>>0<=999999){if(b>>>0<=9999){if(b>>>0<=99){if(b>>>0<=9){v[d|0]=b+48;c=d+1|0;break b}c=lc(d,b);break b}if(b>>>0<=999){c=(b>>>0)/100|0;v[d|0]=c+48;c=lc(d+1|0,b-D(c,100)|0);break b}c=Gd(d,b);break b}if(b>>>0<=99999){c=(b>>>0)/1e4|0;v[d|0]=c+48;c=Gd(d+1|0,b-D(c,1e4)|0);break b}c=Fd(d,b);break b}if(b>>>0<=99999999){if(b>>>0<=9999999){c=(b>>>0)/1e6|0;v[d|0]=c+48;c=Fd(d+1|0,b-D(c,1e6)|0);break b}c=Ed(d,b);break b}if(b>>>0<=999999999){c=(b>>>0)/1e8|0;v[d|0]=c+48;c=Ed(d+1|0,b-D(c,1e8)|0);break b}c=(b>>>0)/1e8|0;c=Ed(lc(d,c),b-D(c,1e8)|0)}h=0}x[i+4>>2]=h;x[i>>2]=c;dg(a,j,x[e+8>>2]);Wa=g}function tg(a,b,c,d){var e=0,f=0,g=0,h=0;g=Wa-32|0;Wa=g;f=d&2147483647;e=f-1065418752|0;h=f-1082064896|0;a:{if((e|0)==(h|0)&0|e>>>0<h>>>0){f=(d&33554431)<<7|c>>>25;e=0;h=e;c=c&33554431;if(!(!e&(c|0)==16777216?!(a|b):!e&c>>>0<16777216)){e=f+1073741825|0;break a}e=f+1073741824|0;if(c^16777216|a|(b|h)){break a}e=(f&1)+e|0;break a}if(!(!c&(f|0)==2147418112?!(a|b):f>>>0<2147418112)){e=((d&33554431)<<7|c>>>25)&4194303|2143289344;break a}e=2139095040;if(f>>>0>1082064895){break a}e=0;f=f>>>16|0;if(f>>>0<16145){break a}e=d&65535|65536;Eb(g+16|0,a,b,c,e,f-16129|0);rc(g,a,b,c,e,16257-f|0);a=x[g+8>>2];e=(x[g+12>>2]&33554431)<<7|a>>>25;c=x[g>>2]|(x[g+16>>2]|x[g+24>>2]|(x[g+20>>2]|x[g+28>>2]))!=0;f=x[g+4>>2];b=0;a=a&33554431;if(!(!b&(a|0)==16777216?!(c|f):!b&a>>>0<16777216)){e=e+1|0;break a}if(a^16777216|c|(b|f)){break a}e=(e&1)+e|0}Wa=g+32|0;return l(2,d&-2147483648|e),q()}function Wk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=Wa-416|0;Wa=h;d=h+416|0;x[h+12>>2]=d;c=Wa-144|0;Wa=c;x[c+28>>2]=c+132;i=c+32|0;Lf(a+8|0,i,c+28|0,e,f,g);x[c+16>>2]=0;x[c+20>>2]=0;x[c+12>>2]=i;e=h+16|0;i=x[h+12>>2]-e>>2;f=Wa-16|0;Wa=f;x[f+12>>2]=x[a+8>>2];g=Rb(f+8|0,f+12|0);x[5120]=0;a=$d(e,c+12|0,i,c+16|0);i=x[5120];x[5120]=0;a:{if((i|0)!=1){xb(g);Wa=f+16|0;break a}a=P()|0;xb(g);R(a|0);p()}if((a|0)==-1){Kf(1808);p()}x[h+12>>2]=e+(a<<2);Wa=c+144|0;g=Wa-16|0;Wa=g;a=Wa-32|0;Wa=a;le(a+24|0,e,x[h+12>>2]);h=x[a+28>>2];c=Wa-16|0;Wa=c;f=x[a+24>>2];x[c+4>>2]=f;x[c+8>>2]=b;while(1){if((f|0)!=(h|0)){Ng(c+8|0,x[f>>2]);f=f+4|0;x[c+4>>2]=f;continue}break}x[a+16>>2]=x[c+4>>2];x[a+20>>2]=x[c+8>>2];Wa=c+16|0;x[a+12>>2]=e+(x[a+16>>2]-e|0);x[a+8>>2]=x[a+20>>2];x[g+8>>2]=x[a+12>>2];x[g+12>>2]=x[a+8>>2];Wa=a+32|0;Wa=g+16|0;Wa=d;return x[g+12>>2]}function fj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=_c(b,0,10);a:{b=x[4981];b:{if(!b){break b}c=19924;while(1){e=x[b+16>>2]<(d|0);c=e?c:b;b=x[(e?b+4|0:b)>>2];if(b){continue}break}if((c|0)==19924){break b}if(x[c+16>>2]<=(d|0)){break a}}b=rb(32);x[a>>2]=b;x[a+4>>2]=17;x[a+8>>2]=-2147483616;v[b+16|0]=y[2703];a=y[2699]|y[2700]<<8|(y[2701]<<16|y[2702]<<24);c=y[2695]|y[2696]<<8|(y[2697]<<16|y[2698]<<24);v[b+8|0]=c;v[b+9|0]=c>>>8;v[b+10|0]=c>>>16;v[b+11|0]=c>>>24;v[b+12|0]=a;v[b+13|0]=a>>>8;v[b+14|0]=a>>>16;v[b+15|0]=a>>>24;a=y[2691]|y[2692]<<8|(y[2693]<<16|y[2694]<<24);c=y[2687]|y[2688]<<8|(y[2689]<<16|y[2690]<<24);v[b|0]=c;v[b+1|0]=c>>>8;v[b+2|0]=c>>>16;v[b+3|0]=c>>>24;v[b+4|0]=a;v[b+5|0]=a>>>8;v[b+6|0]=a>>>16;v[b+7|0]=a>>>24;v[b+17|0]=0;return}if(v[c+59|0]>=0){b=c+48|0;c=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=c;x[a+8>>2]=x[b+8>>2];return}mc(a,x[c+48>>2],x[c+52>>2])}function Jk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=_c(b,0,10);a:{b=x[4981];b:{if(!b){break b}c=19924;while(1){e=x[b+16>>2]<(d|0);c=e?c:b;b=x[(e?b+4|0:b)>>2];if(b){continue}break}if((c|0)==19924){break b}if(x[c+16>>2]<=(d|0)){break a}}b=rb(32);x[a>>2]=b;x[a+4>>2]=17;x[a+8>>2]=-2147483616;v[b+16|0]=y[2703];a=y[2699]|y[2700]<<8|(y[2701]<<16|y[2702]<<24);c=y[2695]|y[2696]<<8|(y[2697]<<16|y[2698]<<24);v[b+8|0]=c;v[b+9|0]=c>>>8;v[b+10|0]=c>>>16;v[b+11|0]=c>>>24;v[b+12|0]=a;v[b+13|0]=a>>>8;v[b+14|0]=a>>>16;v[b+15|0]=a>>>24;a=y[2691]|y[2692]<<8|(y[2693]<<16|y[2694]<<24);c=y[2687]|y[2688]<<8|(y[2689]<<16|y[2690]<<24);v[b|0]=c;v[b+1|0]=c>>>8;v[b+2|0]=c>>>16;v[b+3|0]=c>>>24;v[b+4|0]=a;v[b+5|0]=a>>>8;v[b+6|0]=a>>>16;v[b+7|0]=a>>>24;v[b+17|0]=0;return}if(v[c+47|0]>=0){b=c+36|0;c=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=c;x[a+8>>2]=x[b+8>>2];return}mc(a,x[c+36>>2],x[c+40>>2])}function Hk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;e=Wa-16|0;Wa=e;if(y[a+11|0]>>>7|0){g=x[a+4>>2]}else{g=y[a+11|0]&127}d=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:1;h=c-b>>2;a:{if(!h){break a}b:{if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}j=f>>>0<=b>>>0;if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}if(y[a+11|0]>>>7|0){i=x[a+4>>2]}else{i=y[a+11|0]&127}if(!(j&f+(i<<2)>>>0>=b>>>0)){if(d-g>>>0<h>>>0){Ge(a,d,(g+h|0)-d|0,g,g)}if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}d=f+(g<<2)|0;while(1){if((b|0)==(c|0)){break b}x[d>>2]=x[b>>2];b=b+4|0;d=d+4|0;continue}}d=Wa-16|0;Wa=d;cg(e,b,c);Wa=d+16|0;b=e;c:{if(y[b+11|0]>>>7|0){c=x[b>>2];break c}c=b}if(y[b+11|0]>>>7|0){b=x[e+4>>2]}else{b=y[e+11|0]&127}x[5120]=0;Y(217,a|0,c|0,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){gb(e);break a}a=P()|0;gb(e);R(a|0);p()}x[e>>2]=0;x[d>>2]=x[e>>2];nc(a,g+h|0)}Wa=e+16|0;return a|0}function Lk(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=Wa-16|0;Wa=k;a:{if(a){a=Bf(b);Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[c|0]=b;v[c+1|0]=b>>>8;v[c+2|0]=b>>>16;v[c+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);Vb(i,k);gb(k);Za[x[x[a>>2]+28>>2]](k,a);Vb(h,k);gb(k);x[d>>2]=Za[x[x[a>>2]+12>>2]](a);x[e>>2]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(f,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Vb(g,k);gb(k);a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=Af(b);Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[c|0]=b;v[c+1|0]=b>>>8;v[c+2|0]=b>>>16;v[c+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);Vb(i,k);gb(k);Za[x[x[a>>2]+28>>2]](k,a);Vb(h,k);gb(k);x[d>>2]=Za[x[x[a>>2]+12>>2]](a);x[e>>2]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(f,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Vb(g,k);gb(k);a=Za[x[x[a>>2]+36>>2]](a)|0}x[j>>2]=a;Wa=k+16|0}function Sk(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=Wa-16|0;Wa=k;a:{if(a){a=Ff(b);Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[c|0]=b;v[c+1|0]=b>>>8;v[c+2|0]=b>>>16;v[c+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);Fb(i,k);cb(k);Za[x[x[a>>2]+28>>2]](k,a);Fb(h,k);cb(k);v[d|0]=Za[x[x[a>>2]+12>>2]](a);v[e|0]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(f,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Fb(g,k);cb(k);a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=Ef(b);Za[x[x[a>>2]+44>>2]](k,a);b=x[k>>2];v[c|0]=b;v[c+1|0]=b>>>8;v[c+2|0]=b>>>16;v[c+3|0]=b>>>24;Za[x[x[a>>2]+32>>2]](k,a);Fb(i,k);cb(k);Za[x[x[a>>2]+28>>2]](k,a);Fb(h,k);cb(k);v[d|0]=Za[x[x[a>>2]+12>>2]](a);v[e|0]=Za[x[x[a>>2]+16>>2]](a);Za[x[x[a>>2]+20>>2]](k,a);Fb(f,k);cb(k);Za[x[x[a>>2]+24>>2]](k,a);Fb(g,k);cb(k);a=Za[x[x[a>>2]+36>>2]](a)|0}x[j>>2]=a;Wa=k+16|0}function Hn(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{if(b){if(!c){break j}break i}a=(a>>>0)/(c>>>0)|0;Ya=0;break a}if(!a){break h}break g}if(!(c-1&c)){break f}f=(G(c)+33|0)-G(b)|0;g=0-f|0;break d}a=(b>>>0)/0|0;Ya=0;break a}d=32-G(b)|0;if(d>>>0<31){break e}break c}if((c|0)==1){break b}f=Fn(c);c=f&31;if((f&63)>>>0>=32){a=b>>>c|0}else{d=b>>>c|0;a=((1<<c)-1&b)<<32-c|a>>>c}Ya=d;break a}f=d+1|0;g=63-d|0}d=f&63;e=d&31;if(d>>>0>=32){d=0;h=b>>>e|0}else{d=b>>>e|0;h=((1<<e)-1&b)<<32-e|a>>>e}g=g&63;e=g&31;if(g>>>0>=32){b=a<<e;a=0}else{b=(1<<e)-1&a>>>32-e|b<<e;a=a<<e}if(f){g=c-1|0;l=(g|0)==-1?-1:0;while(1){i=d<<1|h>>>31;d=h<<1|b>>>31;e=l-(i+(d>>>0>g>>>0)|0)>>31;j=c&e;h=d-j|0;d=i-(d>>>0<j>>>0)|0;b=b<<1|a>>>31;a=k|a<<1;k=e&1;f=f-1|0;if(f){continue}break}}Ya=b<<1|a>>>31;a=k|a<<1;break a}a=0;b=0}Ya=b}return a}function Ok(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=Wa-16|0;Wa=d;if(y[a+11|0]>>>7|0){g=x[a+4>>2]}else{g=y[a+11|0]&127}e=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;h=c-b|0;a:{if(!h){break a}b:{if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}j=f>>>0<=b>>>0;if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}if(y[a+11|0]>>>7|0){i=x[a+4>>2]}else{i=y[a+11|0]&127}if(!(j&f+i>>>0>=b>>>0)){if(e-g>>>0<h>>>0){Kd(a,e,(g+h|0)-e|0,g,g)}if(y[a+11|0]>>>7|0){f=x[a>>2]}else{f=a}e=f+g|0;while(1){if((b|0)==(c|0)){break b}v[e|0]=y[b|0];b=b+1|0;e=e+1|0;continue}}e=Wa-16|0;Wa=e;Mg(d,b,c);Wa=e+16|0;b=d;if(y[d+11|0]>>>7|0){b=x[b>>2]}if(y[d+11|0]>>>7|0){c=x[d+4>>2]}else{c=y[d+11|0]&127}x[5120]=0;Y(208,a|0,b|0,c|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){cb(d);break a}a=P()|0;cb(d);R(a|0);p()}v[d+15|0]=0;v[e|0]=y[d+15|0];nc(a,g+h|0)}Wa=d+16|0;return a|0}function pd(a,b,c,d){var e=0,f=0,g=0;e=Wa-160|0;Wa=e;f=-1;x[e+148>>2]=b?b-1|0:0;a=b?a:e+158|0;x[e+144>>2]=a;e=Mb(e,0,144);x[e+76>>2]=-1;x[e+36>>2]=127;x[e+80>>2]=-1;x[e+44>>2]=e+159;x[e+84>>2]=e+144;a:{if((b|0)<0){x[4995]=61;break a}v[a|0]=0;f=0;b=Wa-208|0;Wa=b;x[b+204>>2]=d;a=b+160|0;Mb(a,0,40);x[b+200>>2]=x[b+204>>2];b:{if((ng(0,c,b+200|0,b+80|0,a)|0)<0){c=-1;break b}g=x[e+76>>2]>=0;d=x[e>>2];if(x[e+72>>2]<=0){x[e>>2]=d&-33}c:{d:{e:{if(!x[e+48>>2]){x[e+48>>2]=80;x[e+28>>2]=0;x[e+16>>2]=0;x[e+20>>2]=0;f=x[e+44>>2];x[e+44>>2]=b;break e}if(x[e+16>>2]){break d}}a=-1;if(ue(e)){break c}}a=ng(e,c,b+200|0,b+80|0,b+160|0)}c=a;if(f){Za[x[e+36>>2]](e,0,0)|0;x[e+48>>2]=0;x[e+44>>2]=f;x[e+28>>2]=0;a=x[e+20>>2];x[e+16>>2]=0;x[e+20>>2]=0;c=a?c:-1}a=x[e>>2];x[e>>2]=a|d&32;c=a&32?-1:c;if(!g){break b}}Wa=b+208|0;f=c}Wa=e+160|0;return f}function ic(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0;k=Wa-16|0;Wa=k;v[k+15|0]=a;a:{b:{c:{if(x[d>>2]!=(c|0)){break c}l=43;m=a&255;if((m|0)!=y[j+24|0]){l=45;if(y[j+25|0]!=(m|0)){break c}}x[d>>2]=c+1;v[c|0]=l;break b}if(y[g+11|0]>>>7|0){g=x[g+4>>2]}else{g=y[g+11|0]&127}if(!(!g|(a|0)!=(f|0))){a=0;b=x[i>>2];if((b-h|0)>159){break a}a=x[e>>2];x[i>>2]=b+4;x[b>>2]=a;break b}a=-1;f=Wd(j,j+26|0,k+15|0)-j|0;if((f|0)>23){break a}d:{e:{switch(b-8|0){case 0:case 2:if((b|0)>(f|0)){break d}break a;case 1:break d;default:break e}}if((b|0)!=16|(f|0)<22){break d}b=x[d>>2];if((b|0)==(c|0)|(b-c|0)>2|y[b-1|0]!=48){break a}a=0;x[e>>2]=0;x[d>>2]=b+1;v[b|0]=y[f+9152|0];break a}a=x[d>>2];x[d>>2]=a+1;v[a|0]=y[f+9152|0];x[e>>2]=x[e>>2]+1;a=0;break a}a=0;x[e>>2]=0}Wa=k+16|0;return a|0}function hc(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0;k=Wa-16|0;Wa=k;x[k+12>>2]=a;a:{b:{c:{if(x[d>>2]!=(c|0)){break c}l=43;if(x[j+96>>2]!=(a|0)){l=45;if(x[j+100>>2]!=(a|0)){break c}}x[d>>2]=c+1;v[c|0]=l;break b}if(y[g+11|0]>>>7|0){g=x[g+4>>2]}else{g=y[g+11|0]&127}if(!(!g|(a|0)!=(f|0))){a=0;b=x[i>>2];if((b-h|0)>159){break a}a=x[e>>2];x[i>>2]=b+4;x[b>>2]=a;break b}a=-1;g=Td(j,j+104|0,k+12|0)-j|0;if((g|0)>92){break a}f=g>>2;d:{e:{switch(b-8|0){case 0:case 2:if((b|0)>(f|0)){break d}break a;case 1:break d;default:break e}}if((b|0)!=16|(g|0)<88){break d}b=x[d>>2];if((b|0)==(c|0)|(b-c|0)>2|y[b-1|0]!=48){break a}a=0;x[e>>2]=0;x[d>>2]=b+1;v[b|0]=y[f+9152|0];break a}a=x[d>>2];x[d>>2]=a+1;v[a|0]=y[f+9152|0];x[e>>2]=x[e>>2]+1;a=0;break a}a=0;x[e>>2]=0}Wa=k+16|0;return a|0}function Wl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;h=Wa-32|0;Wa=h;a:{b:{c:{if((b|0)!=(c|0)){j=x[4995];x[4995]=0;g=Wa-16|0;Wa=g;sb();e=Wa-16|0;Wa=e;f=Wa-16|0;Wa=f;Zd(f,b,h+28|0,2);k=x[f>>2];i=x[f+4>>2];b=x[f+12>>2];x[e+8>>2]=x[f+8>>2];x[e+12>>2]=b;x[e>>2]=k;x[e+4>>2]=i;Wa=f+16|0;i=x[e>>2];f=x[e+4>>2];b=x[e+12>>2];x[g+8>>2]=x[e+8>>2];x[g+12>>2]=b;x[g>>2]=i;x[g+4>>2]=f;Wa=e+16|0;f=x[g>>2];e=x[g+4>>2];b=x[g+12>>2];x[h+16>>2]=x[g+8>>2];x[h+20>>2]=b;x[h+8>>2]=f;x[h+12>>2]=e;Wa=g+16|0;g=x[h+16>>2];i=x[h+20>>2];e=x[h+8>>2];f=x[h+12>>2];b=x[4995];if(!b){break c}if(x[h+28>>2]!=(c|0)){break b}l=e;m=f;n=g;o=i;if((b|0)!=68){break a}break b}x[d>>2]=4;break a}x[4995]=j;if(x[h+28>>2]==(c|0)){break a}}x[d>>2]=4;e=l;f=m;g=n;i=o}x[a>>2]=e;x[a+4>>2]=f;x[a+8>>2]=g;x[a+12>>2]=i;Wa=h+32|0}function bh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;a:{b:{c:{c=x[a>>2];e=(x[a+4>>2]-c|0)/12|0;d=e+1|0;if(d>>>0<357913942){c=(x[a+8>>2]-c|0)/12|0;g=c<<1;d=c>>>0>=178956970?357913941:d>>>0<g>>>0?g:d;if(d){if(d>>>0>=357913942){break c}f=rb(D(d,12))}c=D(e,12)+f|0;e=x[b+4>>2];x[c>>2]=x[b>>2];x[c+4>>2]=e;x[c+8>>2]=x[b+8>>2];x[b>>2]=0;x[b+4>>2]=0;x[b+8>>2]=0;d=D(d,12)+f|0;f=c+12|0;b=x[a+4>>2];e=x[a>>2];if((b|0)==(e|0)){break b}while(1){b=b-12|0;g=x[b+4>>2];c=c-12|0;x[c>>2]=x[b>>2];x[c+4>>2]=g;x[c+8>>2]=x[b+8>>2];x[b>>2]=0;x[b+4>>2]=0;x[b+8>>2]=0;if((b|0)!=(e|0)){continue}break}x[a+8>>2]=d;b=x[a+4>>2];x[a+4>>2]=f;d=x[a>>2];x[a>>2]=c;if((b|0)==(d|0)){break a}while(1){a=b-12|0;if(v[b-1|0]<0){db(x[a>>2])}b=a;if((d|0)!=(b|0)){continue}break}b=d;break a}oc();p()}Mc();p()}x[a+8>>2]=d;x[a+4>>2]=f;x[a>>2]=c}if(b){db(b)}}function ci(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;e=Wa-32|0;Wa=e;x[e+16>>2]=x[a+4>>2];x[e+8>>2]=x[a>>2];x[e>>2]=x[b+4>>2];d=x[e+16>>2];g=x[e>>2];h=Wa-16|0;Wa=h;f=Wa-32|0;Wa=f;c=Wa-32|0;Wa=c;x[c+16>>2]=x[e+8>>2];x[c+24>>2]=d;x[c+8>>2]=g;d=Wa-16|0;Wa=d;g=x[c+16>>2];i=x[c+24>>2];k=x[c+8>>2]+(g-i|0)|0;j=g;g=i-g|0;j=sc(k,j,g);x[d+12>>2]=i;x[d+8>>2]=g+j;x[c>>2]=x[d+12>>2];x[c+4>>2]=x[d+8>>2];Wa=d+16|0;d=x[c+8>>2];x[c>>2]=(k-d|0)+d;x[f+24>>2]=x[c+16>>2];x[f+28>>2]=x[c>>2];Wa=c+32|0;x[f+16>>2]=x[f+24>>2];x[f+8>>2]=x[f+28>>2];x[h+8>>2]=x[f+16>>2];x[h+12>>2]=x[f+8>>2];Wa=f+32|0;Wa=h+16|0;x[e+24>>2]=x[h+12>>2];x[b+4>>2]=x[e+24>>2];c=x[a>>2];x[a>>2]=x[b+4>>2];x[b+4>>2]=c;c=x[a+4>>2];x[a+4>>2]=x[b+8>>2];x[b+8>>2]=c;c=x[a+8>>2];x[a+8>>2]=x[b+12>>2];x[b+12>>2]=c;x[b>>2]=x[b+4>>2];Wa=e+32|0}function sl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=Wa-48|0;Wa=f;x[f+40>>2]=b;a:{if(!(x[c+4>>2]&1)){c=Za[x[x[a>>2]+24>>2]](a,b,c,d,e)|0;break a}b=f+24|0;a=x[c+28>>2];x[b>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;a=Q(160,b|0)|0;b=x[5120];x[5120]=0;b:{if((b|0)!=1){b=x[f+24>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}c:{if(e){Za[x[x[a>>2]+24>>2]](f+24|0,a);break c}Za[x[x[a>>2]+28>>2]](f+24|0,a)}x[f+16>>2]=Jb(f+24|0);while(1){x[f+8>>2]=ec(f+24|0);if(x[f+16>>2]==x[f+8>>2]){c=x[f+40>>2];gb(f+24|0);break a}a=x[x[f+16>>2]>>2];x[5120]=0;T(186,f+40|0,a|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){x[f+16>>2]=x[f+16>>2]+4;continue}break}c=P()|0;gb(f+24|0);break b}c=P()|0;a=x[f+24>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}R(c|0);p()}Wa=f+48|0;return c|0}function El(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=Wa-48|0;Wa=f;x[f+40>>2]=b;a:{if(!(x[c+4>>2]&1)){c=Za[x[x[a>>2]+24>>2]](a,b,c,d,e)|0;break a}b=f+24|0;a=x[c+28>>2];x[b>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;a=Q(128,b|0)|0;b=x[5120];x[5120]=0;b:{if((b|0)!=1){b=x[f+24>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}c:{if(e){Za[x[x[a>>2]+24>>2]](f+24|0,a);break c}Za[x[x[a>>2]+28>>2]](f+24|0,a)}x[f+16>>2]=Jb(f+24|0);while(1){x[f+8>>2]=gc(f+24|0);if(x[f+16>>2]==x[f+8>>2]){c=x[f+40>>2];cb(f+24|0);break a}a=v[x[f+16>>2]];x[5120]=0;T(174,f+40|0,a|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){x[f+16>>2]=x[f+16>>2]+1;continue}break}c=P()|0;cb(f+24|0);break b}c=P()|0;a=x[f+24>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}}R(c|0);p()}Wa=f+48|0;return c|0}function kh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=Wa-32|0;Wa=f;d=x[a+28>>2];x[f+16>>2]=d;g=x[a+20>>2];x[f+28>>2]=c;x[f+24>>2]=b;b=g-d|0;x[f+20>>2]=b;g=b+c|0;i=2;a:{b:{b=f+16|0;d=va(x[a+60>>2],b|0,2,f+12|0)|0;if(d){x[4995]=d;d=-1}else{d=0}c:{d:{if(d){d=b;break d}while(1){e=x[f+12>>2];if((e|0)==(g|0)){break c}if((e|0)<0){d=b;break b}h=x[b+4>>2];j=h>>>0<e>>>0;d=(j<<3)+b|0;h=e-(j?h:0)|0;x[d>>2]=h+x[d>>2];b=(j?12:4)+b|0;x[b>>2]=x[b>>2]-h;g=g-e|0;b=d;i=i-j|0;e=va(x[a+60>>2],b|0,i|0,f+12|0)|0;if(e){x[4995]=e;e=-1}else{e=0}if(!e){continue}break}}if((g|0)!=-1){break b}}b=x[a+44>>2];x[a+28>>2]=b;x[a+20>>2]=b;x[a+16>>2]=b+x[a+48>>2];a=c;break a}x[a+28>>2]=0;x[a+16>>2]=0;x[a+20>>2]=0;x[a>>2]=x[a>>2]|32;a=0;if((i|0)==2){break a}a=c-x[d+4>>2]|0}Wa=f+32|0;return a|0}function Tg(a){var b=0,c=0,d=0;c=Wa-16|0;Wa=c;b=x[x[a>>2]-12>>2];x[5120]=0;b=x[(a+b|0)+24>>2];d=x[5120];x[5120]=0;a:{b:{c:{d:{e:{if((d|0)!=1){if(!b){break b}x[5120]=0;T(63,c+8|0,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break d}if(!y[c+8|0]){break e}b=x[x[a>>2]-12>>2];x[5120]=0;b=x[(a+b|0)+24>>2];d=x[5120];x[5120]=0;f:{if((d|0)==1){break f}x[5120]=0;b=Q(64,b|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break f}if((b|0)!=-1){break e}b=x[x[a>>2]-12>>2];x[5120]=0;S(65,a+b|0,1);b=x[5120];x[5120]=0;if((b|0)!=1){break e}}b=V(0)|0;Rg(c+8|0);break c}b=V(0)|0;break c}Rg(c+8|0);break b}b=V(0)|0}ha(b|0)|0;b=x[x[a>>2]-12>>2];x[5120]=0;aa(66,a+b|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}qa()}Wa=c+16|0;return}a=P()|0;x[5120]=0;X(47);c=x[5120];x[5120]=0;if((c|0)!=1){R(a|0);p()}V(0)|0;lb();p()}function gg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;f=Wa-1040|0;Wa=f;g=x[b>>2];x[f+12>>2]=g;j=a?a:f+16|0;d=a?d:256;a:{b:{c:{if(!g|!d){break c}while(1){h=c>>>2|0;if(h>>>0<d>>>0&c>>>0<=131){break b}h=$d(j,f+12|0,d>>>0>h>>>0?h:d,e);if((h|0)==-1){i=-1;d=0;g=x[f+12>>2];break c}k=(f+16|0)!=(j|0)?h:0;d=d-k|0;j=(k<<2)+j|0;c=c+g|0;g=x[f+12>>2];c=g?c-g|0:0;i=h+i|0;if(!g){break c}if(d){continue}break}}if(!g){break a}}if(!d|!c){break a}h=i;while(1){d:{i=Oc(j,g,c,e);e:{if(i+2>>>0<=2){f:{switch(i+1|0){case 1:x[f+12>>2]=0;break e;case 0:break a;default:break f}}x[e>>2]=0;break e}g=x[f+12>>2]+i|0;x[f+12>>2]=g;h=h+1|0;d=d-1|0;if(d){break d}}i=h;break a}j=j+4|0;c=c-i|0;i=h;if(c){continue}break}}if(a){x[b>>2]=x[f+12>>2]}Wa=f+1040|0;return i|0}function Pd(a,b){var c=0,d=0,e=0,f=0,g=0;x[a>>2]=x[b>>2];if((a|0)!=(b|0)){d=b+4|0;c=a+4|0;f=y[b+15|0];e=f<<24>>24;a:{if(v[a+15|0]>=0){if((e|0)>=0){e=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=e;x[c+8>>2]=x[d+8>>2];break a}$c(c,x[b+4>>2],x[b+8>>2]);break a}g=c;c=(e|0)<0;ad(g,c?x[b+4>>2]:d,c?x[b+8>>2]:f)}d=b+16|0;c=a+16|0;f=y[b+27|0];e=f<<24>>24;b:{if(v[a+27|0]>=0){if((e|0)>=0){e=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=e;x[c+8>>2]=x[d+8>>2];break b}$c(c,x[b+16>>2],x[b+20>>2]);break b}g=c;c=(e|0)<0;ad(g,c?x[b+16>>2]:d,c?x[b+20>>2]:f)}d=b+28|0;c=a+28|0;f=y[b+39|0];e=f<<24>>24;if(v[a+39|0]>=0){if((e|0)>=0){a=x[d+4>>2];x[c>>2]=x[d>>2];x[c+4>>2]=a;x[c+8>>2]=x[d+8>>2];return}$c(c,x[b+28>>2],x[b+32>>2]);return}a=(e|0)<0;ad(c,a?x[b+28>>2]:d,a?x[b+32>>2]:f)}}function sc(a,b,c){var d=0,e=0;a:{if((a|0)==(b|0)){break a}e=a+c|0;if(b-e>>>0<=0-(c<<1)>>>0){return ub(a,b,c)}d=(a^b)&3;b:{c:{if(a>>>0<b>>>0){if(d){d=a;break b}if(!(a&3)){d=a;break c}d=a;while(1){if(!c){break a}v[d|0]=y[b|0];b=b+1|0;c=c-1|0;d=d+1|0;if(d&3){continue}break}break c}d:{if(d){break d}if(e&3){while(1){if(!c){break a}c=c-1|0;d=c+a|0;v[d|0]=y[b+c|0];if(d&3){continue}break}}if(c>>>0<=3){break d}while(1){c=c-4|0;x[c+a>>2]=x[b+c>>2];if(c>>>0>3){continue}break}}if(!c){break a}while(1){c=c-1|0;v[c+a|0]=y[b+c|0];if(c){continue}break}break a}if(c>>>0<=3){break b}while(1){x[d>>2]=x[b>>2];b=b+4|0;d=d+4|0;c=c-4|0;if(c>>>0>3){continue}break}}if(!c){break a}while(1){v[d|0]=y[b|0];d=d+1|0;b=b+1|0;c=c-1|0;if(c){continue}break}}return a}function gf(){Sa(18988,1803);Ra(19012,1554,1,1,0);ea(19024,1399,1,-128,127);ea(19048,1392,1,-128,127);ea(19036,1390,1,0,255);ea(19060,1220,2,-32768,32767);ea(19072,1211,2,0,65535);ea(19084,1235,4,-2147483648,2147483647);ea(19096,1226,4,0,-1);ea(19108,1643,4,-2147483648,2147483647);ea(19120,1634,4,0,-1);xe(19132,1262,-2147483648,2147483647);xe(19144,1261,0,-1);za(19156,1251,4);za(19168,1771,8);ya(2828,1674);ya(3368,2482);pa(3440,4,1648);pa(3516,2,1686);pa(3592,4,1701);Qa(3264,1568);_(3632,0,2413);_(3672,0,2515);_(3712,1,2443);_(3752,2,2045);_(3792,3,2076);_(3832,4,2116);_(3872,5,2145);_(3912,4,2552);_(3952,5,2582);_(3672,0,2247);_(3712,1,2214);_(3752,2,2313);_(3792,3,2279);_(3832,4,2380);_(3872,5,2346);_(3992,6,2183);_(4032,7,2636)}function Dk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;x[a>>2]=x[b>>2];x[a+4>>2]=x[c>>2];b=a+8|0;a:{if(v[c+15|0]>=0){e=c+4|0;d=x[e+4>>2];x[b>>2]=x[e>>2];x[b+4>>2]=d;x[b+8>>2]=x[c+12>>2];break a}mc(b,x[c+4>>2],x[c+8>>2])}e=a+20|0;b:{c:{d:{e:{if(v[c+27|0]>=0){d=c+16|0;f=x[d+4>>2];x[e>>2]=x[d>>2];x[e+4>>2]=f;x[e+8>>2]=x[c+24>>2];break e}d=x[c+20>>2];f=x[c+16>>2];x[5120]=0;U(4,e|0,f|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break d}}d=a+32|0;if(v[c+39|0]<0){break c}b=c+28|0;e=x[b+4>>2];x[d>>2]=x[b>>2];x[d+4>>2]=e;x[d+8>>2]=x[c+36>>2];return a|0}c=P()|0;break b}f=x[c+32>>2];c=x[c+28>>2];x[5120]=0;U(4,d|0,c|0,f|0);c=x[5120];x[5120]=0;if((c|0)!=1){return a|0}c=P()|0;if(v[a+31|0]>=0){break b}db(x[e>>2])}if(v[a+19|0]<0){db(x[b>>2])}R(c|0);p()}function Rg(a){var b=0,c=0;b=x[a+4>>2];c=x[x[b>>2]-12>>2];x[5120]=0;b=x[(b+c|0)+24>>2];c=x[5120];x[5120]=0;a:{if((c|0)==1){break a}b:{if(!b){break b}b=x[a+4>>2];c=x[x[b>>2]-12>>2];x[5120]=0;b=x[(b+c|0)+16>>2];c=x[5120];x[5120]=0;if((c|0)==1){break a}if(b){break b}b=x[a+4>>2];if(!(x[(x[x[b>>2]-12>>2]+b|0)+4>>2]&8192)){break b}if((Na()|0)>0){break b}b=x[a+4>>2];c=x[x[b>>2]-12>>2];x[5120]=0;b=x[(b+c|0)+24>>2];c=x[5120];x[5120]=0;c:{if((c|0)==1){break c}x[5120]=0;b=Q(64,b|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break c}if((b|0)!=-1){break b}a=x[a+4>>2];b=x[x[a>>2]-12>>2];x[5120]=0;S(65,a+b|0,1);a=x[5120];x[5120]=0;if((a|0)!=1){break b}}ha(V(0)|0)|0;x[5120]=0;X(47);a=x[5120];x[5120]=0;if((a|0)==1){break a}}return}V(0)|0;lb();p()}function lg(a,b,c){a:{switch(b-9|0){case 0:b=x[c>>2];x[c>>2]=b+4;x[a>>2]=x[b>>2];return;case 6:b=x[c>>2];x[c>>2]=b+4;b=w[b>>1];x[a>>2]=b;x[a+4>>2]=b>>31;return;case 7:b=x[c>>2];x[c>>2]=b+4;x[a>>2]=z[b>>1];x[a+4>>2]=0;return;case 8:b=x[c>>2];x[c>>2]=b+4;b=v[b|0];x[a>>2]=b;x[a+4>>2]=b>>31;return;case 9:b=x[c>>2];x[c>>2]=b+4;x[a>>2]=y[b|0];x[a+4>>2]=0;return;case 16:b=x[c>>2]+7&-8;x[c>>2]=b+8;C[a>>3]=C[b>>3];return;case 17:jg(a,c);default:return;case 1:case 4:case 14:b=x[c>>2];x[c>>2]=b+4;b=x[b>>2];x[a>>2]=b;x[a+4>>2]=b>>31;return;case 2:case 5:case 11:case 15:b=x[c>>2];x[c>>2]=b+4;x[a>>2]=x[b>>2];x[a+4>>2]=0;return;case 3:case 10:case 12:case 13:break a}}b=x[c>>2]+7&-8;x[c>>2]=b+8;c=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=c}function Ud(a,b,c,d,e){var f=0,g=0;f=Wa-16|0;Wa=f;g=f+8|0;b=x[b+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=Q(159,g|0)|0;g=x[5120];x[5120]=0;a:{if((g|0)==1){break a}x[5120]=0;W(172,b|0,9152,9184,c|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[5120]=0;b=Q(160,f+8|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break a}x[5120]=0;c=Q(173,b|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break a}x[d>>2]=c;x[5120]=0;c=Q(169,b|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}x[e>>2]=c;x[5120]=0;S(170,a|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}a=x[f+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}Wa=f+16|0;return}c=P()|0;a=x[f+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function cn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;f=Wa-16|0;Wa=f;g=x[b+68>>2];if(g){g=Za[x[x[g>>2]+24>>2]](g)|0;a:{b:{if(!(!x[b+64>>2]|(c|d)!=0&(g|0)<=0)){if(!(Za[x[x[b>>2]+24>>2]](b)|0)){break b}}x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0;break a}if(e>>>0>=3){x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0;break a}h=x[b+64>>2];d=Gn(g,g>>31,c,d);c=(g|0)>0;if(Vc(h,c?d:0,c?Ya:0,e)){x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0;break a}c=x[b+64>>2];c:{if(x[c+76>>2]<0){c=te(c);d=Ya;break c}c=te(c);d=Ya}x[a+8>>2]=c;x[a+12>>2]=d;x[a>>2]=0;x[a+4>>2]=0;c=x[b+72>>2];b=x[b+76>>2];x[f>>2]=c;x[f+4>>2]=b;x[f+8>>2]=c;x[f+12>>2]=b;b=x[f+4>>2];x[a>>2]=x[f>>2];x[a+4>>2]=b}Wa=f+16|0;return}Pc();p()}function Xd(a,b,c,d,e){var f=0,g=0;f=Wa-16|0;Wa=f;g=f+8|0;b=x[b+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=Q(61,g|0)|0;g=x[5120];x[5120]=0;a:{if((g|0)==1){break a}x[5120]=0;W(152,b|0,9152,9184,c|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}x[5120]=0;b=Q(128,f+8|0)|0;c=x[5120];x[5120]=0;if((c|0)==1){break a}x[5120]=0;c=Q(153,b|0)|0;g=x[5120];x[5120]=0;if((g|0)==1){break a}v[d|0]=c;x[5120]=0;c=Q(143,b|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}v[e|0]=c;x[5120]=0;S(144,a|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}a=x[f+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}Wa=f+16|0;return}c=P()|0;a=x[f+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function yg(a,b,c,d,e,f){var g=0;g=Wa-80|0;Wa=g;a:{if((f|0)>=16384){mb(g+32|0,b,c,d,e,0,0,0,2147352576);d=x[g+40>>2];e=x[g+44>>2];b=x[g+32>>2];c=x[g+36>>2];if(f>>>0<32767){f=f-16383|0;break a}mb(g+16|0,b,c,d,e,0,0,0,2147352576);f=((f|0)>=49149?49149:f)-32766|0;d=x[g+24>>2];e=x[g+28>>2];b=x[g+16>>2];c=x[g+20>>2];break a}if((f|0)>-16383){break a}mb(g- -64|0,b,c,d,e,0,0,0,7471104);d=x[g+72>>2];e=x[g+76>>2];b=x[g+64>>2];c=x[g+68>>2];if(f>>>0>4294934644){f=f+16269|0;break a}mb(g+48|0,b,c,d,e,0,0,0,7471104);f=((f|0)<=-48920?-48920:f)+32538|0;d=x[g+56>>2];e=x[g+60>>2];b=x[g+48>>2];c=x[g+52>>2]}mb(g,b,c,d,e,0,0,0,f+16383<<16);b=x[g+12>>2];x[a+8>>2]=x[g+8>>2];x[a+12>>2]=b;b=x[g+4>>2];x[a>>2]=x[g>>2];x[a+4>>2]=b;Wa=g+80|0}function Lb(a,b){var c=0,d=0,e=0;c=Wa+-64|0;Wa=c;d=x[a>>2];e=x[d-4>>2];d=x[d-8>>2];x[c+32>>2]=0;x[c+36>>2]=0;x[c+40>>2]=0;x[c+44>>2]=0;x[c+48>>2]=0;x[c+52>>2]=0;v[c+55|0]=0;v[c+56|0]=0;v[c+57|0]=0;v[c+58|0]=0;v[c+59|0]=0;v[c+60|0]=0;v[c+61|0]=0;v[c+62|0]=0;x[c+24>>2]=0;x[c+28>>2]=0;x[c+20>>2]=0;x[c+16>>2]=18636;x[c+12>>2]=a;x[c+8>>2]=b;a=a+d|0;d=0;a:{if(tb(e,b,0)){x[c+56>>2]=1;Za[x[x[e>>2]+20>>2]](e,c+8|0,a,a,1,0);d=x[c+32>>2]==1?a:0;break a}Za[x[x[e>>2]+24>>2]](e,c+8|0,a,1,0);b:{switch(x[c+44>>2]){case 0:d=x[c+48>>2]==1?x[c+36>>2]==1?x[c+40>>2]==1?x[c+28>>2]:0:0:0;break a;case 1:break b;default:break a}}if(x[c+32>>2]!=1){if(x[c+48>>2]|x[c+36>>2]!=1|x[c+40>>2]!=1){break a}}d=x[c+24>>2]}Wa=c- -64|0;return d}function Cj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;x[b>>2]=x[c>>2];a=b+4|0;a:{if(v[c+15|0]>=0){e=c+4|0;d=x[e+4>>2];x[a>>2]=x[e>>2];x[a+4>>2]=d;x[a+8>>2]=x[c+12>>2];break a}mc(a,x[c+4>>2],x[c+8>>2])}e=b+16|0;b:{c:{d:{e:{if(v[c+27|0]>=0){d=c+16|0;f=x[d+4>>2];x[e>>2]=x[d>>2];x[e+4>>2]=f;x[e+8>>2]=x[c+24>>2];break e}d=x[c+20>>2];f=x[c+16>>2];x[5120]=0;U(4,e|0,f|0,d|0);d=x[5120];x[5120]=0;if((d|0)==1){break d}}d=b+28|0;if(v[c+39|0]<0){break c}a=c+28|0;b=x[a+4>>2];x[d>>2]=x[a>>2];x[d+4>>2]=b;x[d+8>>2]=x[c+36>>2];return}c=P()|0;break b}f=x[c+32>>2];c=x[c+28>>2];x[5120]=0;U(4,d|0,c|0,f|0);c=x[5120];x[5120]=0;if((c|0)!=1){return}c=P()|0;if(v[b+27|0]>=0){break b}db(x[e>>2])}if(v[b+15|0]<0){db(x[a>>2])}R(c|0);p()}function Mb(a,b,c){var d=0,e=0,f=0,g=0;a:{if(!c){break a}v[a|0]=b;d=a+c|0;v[d-1|0]=b;if(c>>>0<3){break a}v[a+2|0]=b;v[a+1|0]=b;v[d-3|0]=b;v[d-2|0]=b;if(c>>>0<7){break a}v[a+3|0]=b;v[d-4|0]=b;if(c>>>0<9){break a}d=0-a&3;e=d+a|0;b=D(b&255,16843009);x[e>>2]=b;d=c-d&-4;c=d+e|0;x[c-4>>2]=b;if(d>>>0<9){break a}x[e+8>>2]=b;x[e+4>>2]=b;x[c-8>>2]=b;x[c-12>>2]=b;if(d>>>0<25){break a}x[e+24>>2]=b;x[e+20>>2]=b;x[e+16>>2]=b;x[e+12>>2]=b;x[c-16>>2]=b;x[c-20>>2]=b;x[c-24>>2]=b;x[c-28>>2]=b;g=e&4|24;c=d-g|0;if(c>>>0<32){break a}d=Gn(b,0,1,1);f=Ya;b=e+g|0;while(1){x[b+24>>2]=d;x[b+28>>2]=f;x[b+16>>2]=d;x[b+20>>2]=f;x[b+8>>2]=d;x[b+12>>2]=f;x[b>>2]=d;x[b+4>>2]=f;b=b+32|0;c=c-32|0;if(c>>>0>31){continue}break}}return a}function Xb(a,b,c,d,e){var f=0,g=0,h=0,i=0;h=Wa-16|0;Wa=h;x[h+8>>2]=b;b=0;g=6;a:{b:{if(Qb(a,h+8|0)){break b}g=4;f=x[a>>2];i=x[f+12>>2];c:{if((i|0)==x[f+16>>2]){f=Za[x[x[f>>2]+36>>2]](f)|0;break c}f=y[i|0]}f=f<<24>>24;if((f|0)>=0){i=(x[x[d+8>>2]+((f&255)<<2)>>2]&64)!=0}else{i=0}if(!i){break b}b=Za[x[x[d>>2]+36>>2]](d,f,0)|0;while(1){d:{Gc(a);b=b-48|0;if(Qb(a,h+8|0)|(e|0)<2){break d}g=x[a>>2];f=x[g+12>>2];e:{if((f|0)==x[g+16>>2]){g=Za[x[x[g>>2]+36>>2]](g)|0;break e}g=y[f|0]}g=g<<24>>24;if((g|0)>=0){f=(x[x[d+8>>2]+((g&255)<<2)>>2]&64)!=0}else{f=0}if(!f){break a}e=e-1|0;b=(Za[x[x[d>>2]+36>>2]](d,g,0)|0)+D(b,10)|0;continue}break}g=2;if(!Qb(a,h+8|0)){break a}}x[c>>2]=x[c>>2]|g}Wa=h+16|0;return b}function qg(a,b){var c=0,d=0,e=0;a:{if(y[b|0]){break a}b=ce(2027);if(y[b|0]?b:0){break a}b=ce(D(a,12)+5488|0);if(y[b|0]?b:0){break a}b=ce(2034);if(y[b|0]?b:0){break a}b=2679}b:{while(1){d=y[b+c|0];if(!(!d|(d|0)==47)){d=23;c=c+1|0;if((c|0)!=23){continue}break b}break}d=c}e=2679;c:{d:{c=y[b|0];e:{f:{if(!(y[b+d|0]|(c|0)==46)){e=b;if((c|0)!=67){break f}}if(!y[e+1|0]){break e}}if(!Nc(e,2679)){break e}if(Nc(e,2002)){break d}}if(!a){c=5396;if(y[e+1|0]==46){break c}}return 0}c=x[5173];if(c){while(1){if(!Nc(e,c+8|0)){break c}c=x[c+32>>2];if(c){continue}break}}c=ob(36);if(c){b=x[1350];x[c>>2]=x[1349];x[c+4>>2]=b;b=c+8|0;ub(b,e,d);v[b+d|0]=0;x[c+32>>2]=x[5173];x[5173]=c}c=a|c?c:5396}return c}function dn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=c;x[a+16>>2]=0;x[a+12>>2]=0;x[a+8>>2]=0;x[a+28>>2]=0;x[a+20>>2]=0;x[a+24>>2]=0;a:{if(!y[a+96|0]){break a}d=x[a+32>>2];if(!d){break a}db(d)}b:{if(!y[a+97|0]){break b}d=x[a+56>>2];if(!d){break b}db(d)}x[a+52>>2]=c;c:{d:{e:{if(c>>>0>=9){d=y[a+98|0];if(!(!b|!d)){v[a+96|0]=0;x[a+32>>2]=b;break d}c=rb(c);v[a+96|0]=1;x[a+32>>2]=c;break e}v[a+96|0]=0;x[a+52>>2]=8;x[a+32>>2]=a+44;d=y[a+98|0]}if(d){break d}x[e+8>>2]=8;c=Wa-16|0;Wa=c;Wa=c+16|0;c=e+8|0;d=e+12|0;d=x[(x[d>>2]<x[c>>2]?c:d)>>2];x[a+60>>2]=d;if(b){c=0;if(d>>>0>7){break c}}b=rb(d);c=1;break c}b=0;x[a+60>>2]=0;c=0}v[a+97|0]=c;x[a+56>>2]=b;Wa=e+16|0;return a|0}function sb(){var a=0,b=0,c=0;if(y[20916]){return x[5228]}b=Wa-32|0;Wa=b;a:{b:{while(1){c=qg(a,1<<a&2147483647?2043:2753);x[(b+8|0)+(a<<2)>>2]=c;if((c|0)==-1){break b}a=a+1|0;if((a|0)!=6){continue}break}a=5432;if(!rd(b+8|0,5432)){break a}a=5456;if(!rd(b+8|0,5456)){break a}a=0;if(!y[20744]){while(1){x[(a<<2)+20696>>2]=qg(a,2753);a=a+1|0;if((a|0)!=6){continue}break}v[20744]=1;x[5180]=x[5174]}a=20696;if(!rd(b+8|0,20696)){break a}a=20720;if(!rd(b+8|0,20720)){break a}a=ob(24);if(!a){break b}c=x[b+12>>2];x[a>>2]=x[b+8>>2];x[a+4>>2]=c;c=x[b+28>>2];x[a+16>>2]=x[b+24>>2];x[a+20>>2]=c;c=x[b+20>>2];x[a+8>>2]=x[b+16>>2];x[a+12>>2]=c;break a}a=0}Wa=b+32|0;v[20916]=1;x[5228]=a;return a|0}function He(a,b,c,d,e,f,g,h){var i=0,j=0,k=0;i=Wa-16|0;Wa=i;if((b^-1)+1073741807>>>0>=c>>>0){if(y[a+11|0]>>>7|0){k=x[a>>2]}else{k=a}if(b>>>0<536870887){x[i+12>>2]=b<<1;x[i>>2]=b+c;c=Wa-16|0;Wa=c;Wa=c+16|0;c=i+12|0;c=x[(A[i>>2]<A[c>>2]?c:i)>>2];if(c>>>0>=2){j=c+4&-4;c=j-1|0;c=(c|0)==2?j:c}else{c=1}c=c+1|0}else{c=1073741807}vc(i,c);c=x[i>>2];if(e){jc(c,k,e)}if(g){jc(c+(e<<2)|0,h,g)}j=e+f|0;h=d-j|0;if((d|0)!=(j|0)){d=e<<2;jc((d+c|0)+(g<<2)|0,(d+k|0)+(f<<2)|0,h)}b=b+1|0;if((b|0)!=2){ed(k,b)}x[a>>2]=c;x[a+8>>2]=x[a+8>>2]&-2147483648|x[i+4>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;b=a;a=h+(e+g|0)|0;x[b+4>>2]=a;x[i+12>>2]=0;x[c+(a<<2)>>2]=x[i+12>>2];Wa=i+16|0;return}yb();p()}function Mf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;b=Wa-16|0;Wa=b;x[a>>2]=0;x[a+4>>2]=0;x[a+8>>2]=0;g=d<<2;h=g+e|0;i=x[h>>2]+1|0;if(y[c+11|0]>>>7|0){d=x[c+4>>2]}else{d=y[c+11|0]&127}if(d>>>0<=i>>>0){Ne();p()}j=x[h>>2];if(y[c+11|0]>>>7|0){d=x[c>>2]}else{d=c}a:{if(y[d+i|0]==34){h=g+4|0;d=h+f|0;i=bc(c,34,j);x[d>>2]=i;f=f+g|0;g=bc(c,34,i+1|0);x[f+8>>2]=g;d=x[d>>2];d=Hd(b,c,d+1|0,g+(d^-1)|0,c);f=x[f+8>>2];g=x[d+4>>2];x[a>>2]=x[d>>2];x[a+4>>2]=g;x[a+8>>2]=x[d+8>>2];x[e+h>>2]=bc(c,44,f);break a}d=bc(c,44,j+1|0);x[h+4>>2]=d;e=x[h>>2];c=Hd(b,c,e+1|0,d+(e^-1)|0,c);d=x[c+4>>2];x[a>>2]=x[c>>2];x[a+4>>2]=d;x[a+8>>2]=x[c+8>>2]}Wa=b+16|0}function bd(a,b,c,d,e,f,g,h){var i=0,j=0,k=0;i=Wa-16|0;Wa=i;if((b^-1)+2147483631>>>0>=c>>>0){if(y[a+11|0]>>>7|0){k=x[a>>2]}else{k=a}if(b>>>0<1073741799){x[i+12>>2]=b<<1;x[i>>2]=b+c;c=Wa-16|0;Wa=c;Wa=c+16|0;c=i+12|0;c=x[(A[i>>2]<A[c>>2]?c:i)>>2];if(c>>>0>=11){j=c+16&-16;c=j-1|0;c=(c|0)==11?j:c}else{c=10}c=c+1|0}else{c=2147483631}Ec(i,c);c=x[i>>2];if(e){Hb(c,k,e)}if(g){Hb(c+e|0,h,g)}j=e+f|0;h=d-j|0;if((d|0)!=(j|0)){Hb((c+e|0)+g|0,(e+k|0)+f|0,h)}b=b+1|0;if((b|0)!=11){td(k,b)}x[a>>2]=c;x[a+8>>2]=x[a+8>>2]&-2147483648|x[i+4>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;b=a;a=h+(e+g|0)|0;x[b+4>>2]=a;v[i+12|0]=0;v[a+c|0]=y[i+12|0];Wa=i+16|0;return}yb();p()}function Oc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;h=Wa-16|0;Wa=h;f=d?d:20680;d=x[f>>2];a:{b:{c:{if(!b){if(d){break c}break a}e=-2;if(!c){break a}i=a?a:h+12|0;d:{if(d){a=c;break d}a=y[b|0];d=a<<24>>24;if((d|0)>=0){x[i>>2]=a;e=(d|0)!=0;break a}if(!x[x[5164]>>2]){x[i>>2]=d&57343;e=1;break a}a=a-194|0;if(a>>>0>50){break c}d=x[(a<<2)+5168>>2];a=c-1|0;if(!a){break b}b=b+1|0}g=y[b|0];j=g>>>3|0;if((j-16|(d>>26)+j)>>>0>7){break c}while(1){a=a-1|0;d=g-128|d<<6;if((d|0)>=0){x[f>>2]=0;x[i>>2]=d;e=c-a|0;break a}if(!a){break b}b=b+1|0;g=y[b|0];if((g&192)==128){continue}break}}x[f>>2]=0;x[4995]=25;e=-1;break a}x[f>>2]=d}Wa=h+16|0;return e|0}function _m(a,b){a=a|0;b=b|0;var c=0;Za[x[x[a>>2]+24>>2]](a)|0;b=Lg(b);x[a+68>>2]=b;c=y[a+98|0];b=Za[x[x[b>>2]+28>>2]](b)|0;v[a+98|0]=b;if((b|0)!=(c|0)){x[a+16>>2]=0;x[a+12>>2]=0;x[a+8>>2]=0;x[a+28>>2]=0;x[a+20>>2]=0;x[a+24>>2]=0;b=y[a+96|0];if(y[a+98|0]){a:{if(!b){break a}b=x[a+32>>2];if(!b){break a}db(b)}v[a+96|0]=y[a+97|0];x[a+52>>2]=x[a+60>>2];b=x[a+56>>2];x[a+56>>2]=0;x[a+60>>2]=0;x[a+32>>2]=b;v[a+97|0]=0;return}b:{if(b){break b}b=x[a+32>>2];if((b|0)==(a+44|0)){break b}v[a+97|0]=0;x[a+56>>2]=b;b=x[a+52>>2];x[a+60>>2]=b;b=rb(b);v[a+96|0]=1;x[a+32>>2]=b;return}b=x[a+52>>2];x[a+60>>2]=b;b=rb(b);v[a+97|0]=1;x[a+56>>2]=b}}function jn(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=Wa-32|0;Wa=c;d=x[b>>2];if(d>>>0<2147483632){a:{b:{if(d>>>0>=11){e=(d|15)+1|0;f=rb(e);x[c+8>>2]=e|-2147483648;x[c>>2]=f;x[c+4>>2]=d;e=d+f|0;break b}v[c+11|0]=d;e=c+d|0;f=c;if(!d){break a}}ub(f,b+4|0,d)}v[e|0]=0;x[5120]=0;S(a|0,c+16|0,c|0);a=x[5120];x[5120]=0;c:{d:{if((a|0)!=1){x[5120]=0;b=Q(13,12)|0;a=x[5120];x[5120]=0;if((a|0)==1){break d}x[b>>2]=x[c+16>>2];x[b+4>>2]=x[c+20>>2];x[b+8>>2]=x[c+24>>2];x[c+24>>2]=0;x[c+16>>2]=0;x[c+20>>2]=0;if(v[c+11|0]<0){db(x[c>>2])}Wa=c+32|0;return b|0}a=P()|0;break c}a=P()|0;pe(c+16|0)}if(v[c+11|0]<0){db(x[c>>2])}R(a|0);p()}yb();p()}function pl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=Wa-256|0;Wa=g;x[g+248>>2]=37;x[g+252>>2]=0;h=g+248|0;fc(h|1,1559,1,x[c+4>>2]);i=sb();x[g>>2]=e;x[g+4>>2]=f;a=g+224|0;e=Cb(a,24,i,h,g)+a|0;h=Ib(a,e,c);i=g+16|0;f=x[c+28>>2];x[i>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;$(187,a|0,h|0,e|0,g+32|0,g+28|0,g+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[g+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=xc(b,g+32|0,x[g+28>>2],x[g+24>>2],c,d);Wa=g+256|0;break a}c=P()|0;a=x[g+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function nl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=Wa-256|0;Wa=g;x[g+248>>2]=37;x[g+252>>2]=0;h=g+248|0;fc(h|1,1559,0,x[c+4>>2]);i=sb();x[g>>2]=e;x[g+4>>2]=f;a=g+224|0;e=Cb(a,24,i,h,g)+a|0;h=Ib(a,e,c);i=g+16|0;f=x[c+28>>2];x[i>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;$(187,a|0,h|0,e|0,g+32|0,g+28|0,g+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[g+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=xc(b,g+32|0,x[g+28>>2],x[g+24>>2],c,d);Wa=g+256|0;break a}c=P()|0;a=x[g+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function yl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=Wa-112|0;Wa=g;x[g+104>>2]=37;x[g+108>>2]=0;h=g+104|0;fc(h|1,1559,0,x[c+4>>2]);i=sb();x[g>>2]=e;x[g+4>>2]=f;a=g+80|0;e=Cb(a,24,i,h,g)+a|0;h=Ib(a,e,c);i=g+16|0;f=x[c+28>>2];x[i>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;$(175,a|0,h|0,e|0,g+32|0,g+28|0,g+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[g+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=yc(b,g+32|0,x[g+28>>2],x[g+24>>2],c,d);Wa=g+112|0;break a}c=P()|0;a=x[g+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function Al(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=Wa-112|0;Wa=g;x[g+104>>2]=37;x[g+108>>2]=0;h=g+104|0;fc(h|1,1559,1,x[c+4>>2]);i=sb();x[g>>2]=e;x[g+4>>2]=f;a=g+80|0;e=Cb(a,24,i,h,g)+a|0;h=Ib(a,e,c);i=g+16|0;f=x[c+28>>2];x[i>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;$(175,a|0,h|0,e|0,g+32|0,g+28|0,g+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[g+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=yc(b,g+32|0,x[g+28>>2],x[g+24>>2],c,d);Wa=g+112|0;break a}c=P()|0;a=x[g+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function Wb(a,b,c,d,e){var f=0,g=0,h=0,i=0;g=Wa-16|0;Wa=g;x[g+8>>2]=b;b=0;h=6;a:{b:{if(Pb(a,g+8|0)){break b}h=4;f=x[a>>2];i=x[f+12>>2];c:{if((i|0)==x[f+16>>2]){f=Za[x[x[f>>2]+36>>2]](f)|0;break c}f=x[i>>2]}if(!(Za[x[x[d>>2]+12>>2]](d,64,f)|0)){break b}b=Za[x[x[d>>2]+52>>2]](d,f,0)|0;while(1){d:{Fc(a);b=b-48|0;if(Pb(a,g+8|0)|(e|0)<2){break d}f=x[a>>2];h=x[f+12>>2];e:{if((h|0)==x[f+16>>2]){f=Za[x[x[f>>2]+36>>2]](f)|0;break e}f=x[h>>2]}if(!(Za[x[x[d>>2]+12>>2]](d,64,f)|0)){break a}e=e-1|0;b=(Za[x[x[d>>2]+52>>2]](d,f,0)|0)+D(b,10)|0;continue}break}h=2;if(!Pb(a,g+8|0)){break a}}x[c>>2]=x[c>>2]|h}Wa=g+16|0;return b}function wh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;if(tb(a,x[b+8>>2],f)){Cd(b,c,d,e);return}g=y[b+53|0];j=x[a+12>>2];v[b+53|0]=0;h=y[b+52|0];v[b+52|0]=0;m=a+16|0;Bd(m,b,c,d,e,f);k=y[b+53|0];g=g|k;l=y[b+52|0];h=h|l;i=a+24|0;j=(j<<3)+m|0;a:{if(i>>>0>=j>>>0){break a}while(1){h=h&1;g=g&1;if(y[b+54|0]){break a}b:{if(l){if(x[b+24>>2]==1){break a}if(y[a+8|0]&2){break b}break a}if(!k){break b}if(!(v[a+8|0]&1)){break a}}w[b+52>>1]=0;Bd(i,b,c,d,e,f);k=y[b+53|0];g=k|g;l=y[b+52|0];h=l|h;i=i+8|0;if(j>>>0>i>>>0){continue}break}}v[b+53|0]=(g&255)!=0;v[b+52|0]=(h&255)!=0}function rl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=Wa-160|0;Wa=f;x[f+152>>2]=37;x[f+156>>2]=0;g=f+152|0;fc(g|1,1582,1,x[c+4>>2]);h=sb();x[f>>2]=e;a=f+139|0;e=Cb(a,13,h,g,f)+a|0;h=Ib(a,e,c);i=f+16|0;g=x[c+28>>2];x[i>>2]=g;x[g+4>>2]=x[g+4>>2]+1;x[5120]=0;$(187,a|0,h|0,e|0,f+32|0,f+28|0,f+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[f+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=xc(b,f+32|0,x[f+28>>2],x[f+24>>2],c,d);Wa=f+160|0;break a}c=P()|0;a=x[f+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function ol(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=Wa-160|0;Wa=f;x[f+152>>2]=37;x[f+156>>2]=0;g=f+152|0;fc(g|1,1582,0,x[c+4>>2]);h=sb();x[f>>2]=e;a=f+139|0;e=Cb(a,13,h,g,f)+a|0;h=Ib(a,e,c);i=f+16|0;g=x[c+28>>2];x[i>>2]=g;x[g+4>>2]=x[g+4>>2]+1;x[5120]=0;$(187,a|0,h|0,e|0,f+32|0,f+28|0,f+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[f+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=xc(b,f+32|0,x[f+28>>2],x[f+24>>2],c,d);Wa=f+160|0;break a}c=P()|0;a=x[f+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function fg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Wa-16|0;Wa=d;Wa=d+16|0;e=0;a:{if(!b){break a}b:{if(!c){break b}a=a?a:d+12|0;d=y[b|0];e=d<<24>>24;if((e|0)>=0){x[a>>2]=d;e=(e|0)!=0;break a}if(!x[x[5164]>>2]){x[a>>2]=e&57343;e=1;break a}d=d-194|0;if(d>>>0>50){break b}d=x[(d<<2)+5168>>2];if(d<<D(c,6)-6<0&c>>>0<=3){break b}c=y[b+1|0];e=c>>>3|0;if((e-16|e+(d>>26))>>>0>7){break b}c=c-128|d<<6;if((c|0)>=0){x[a>>2]=c;e=2;break a}d=y[b+2|0]-128|0;if(d>>>0>63){break b}c=d|c<<6;if((c|0)>=0){x[a>>2]=c;e=3;break a}b=y[b+3|0]-128|0;if(b>>>0>63){break b}x[a>>2]=b|c<<6;e=4;break a}x[4995]=25;e=-1}return e|0}function zl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=Wa-80|0;Wa=f;x[f+72>>2]=37;x[f+76>>2]=0;g=f+72|0;fc(g|1,1582,0,x[c+4>>2]);h=sb();x[f>>2]=e;a=f+59|0;e=Cb(a,13,h,g,f)+a|0;h=Ib(a,e,c);i=f+16|0;g=x[c+28>>2];x[i>>2]=g;x[g+4>>2]=x[g+4>>2]+1;x[5120]=0;$(175,a|0,h|0,e|0,f+32|0,f+28|0,f+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[f+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=yc(b,f+32|0,x[f+28>>2],x[f+24>>2],c,d);Wa=f+80|0;break a}c=P()|0;a=x[f+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function Dl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=Wa-80|0;Wa=f;x[f+72>>2]=37;x[f+76>>2]=0;g=f+72|0;fc(g|1,1582,1,x[c+4>>2]);h=sb();x[f>>2]=e;a=f+59|0;e=Cb(a,13,h,g,f)+a|0;h=Ib(a,e,c);i=f+16|0;g=x[c+28>>2];x[i>>2]=g;x[g+4>>2]=x[g+4>>2]+1;x[5120]=0;$(175,a|0,h|0,e|0,f+32|0,f+28|0,f+24|0,i|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){a=x[f+16>>2];e=x[a+4>>2]-1|0;x[a+4>>2]=e;if((e|0)==-1){Za[x[x[a>>2]+8>>2]](a)}a=yc(b,f+32|0,x[f+28>>2],x[f+24>>2],c,d);Wa=f+80|0;break a}c=P()|0;a=x[f+16>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return a|0}function Ee(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=Wa-16|0;Wa=i;if(y[b+11|0]>>>7|0){f=x[b+4>>2]}else{f=y[b+11|0]&127}h=_b(c);e=f+h|0;j=Wa-16|0;Wa=j;a:{if(e>>>0<=2147483631){b:{if(e>>>0<11){x[a>>2]=0;x[a+4>>2]=0;x[a+8>>2]=0;v[a+11|0]=y[a+11|0]&128|e;v[a+11|0]=y[a+11|0]&127;break b}if(e>>>0>=11){g=e+16&-16;d=g-1|0;d=(d|0)==11?g:d}else{d=10}d=d+1|0;g=Gg(d);x[a+8>>2]=x[a+8>>2]&-2147483648|d&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a>>2]=g;x[a+4>>2]=e}Wa=j+16|0;break a}yb();p()}if(y[a+11|0]>>>7|0){a=x[a>>2]}if(y[b+11|0]>>>7|0){b=x[b>>2]}Hb(a,b,f);a=a+f|0;Hb(a,c,h);Jd(a+h|0,1,0);Wa=i+16|0}function qc(a,b,c,d,e,f,g,h){var i=0,j=0,k=0,l=0;i=1;j=d&2147483647;l=j;k=(j|0)==2147418112;a:{if(k&!c?a|b:k&(c|0)!=0|j>>>0>2147418112){break a}j=h&2147483647;k=(j|0)==2147418112;if(k&!g?e|f:k&(g|0)!=0|j>>>0>2147418112){break a}if(!(a|e|(c|g)|(b|f|(j|l)))){return 0}i=d&h;if((i|0)>0|(i|0)>=0){i=-1;if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0<e>>>0|b>>>0<f>>>0:c>>>0<g>>>0&(d|0)<=(h|0)|(d|0)<(h|0)){break a}return(a^e|c^g|(b^f|d^h))!=0}i=-1;if((c|0)==(g|0)&(d|0)==(h|0)?(b|0)==(f|0)&a>>>0>e>>>0|b>>>0>f>>>0:c>>>0>g>>>0&(d|0)>=(h|0)|(d|0)>(h|0)){break a}i=(a^e|c^g|(b^f|d^h))!=0}return i}function jl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;a=Wa-208|0;Wa=a;h=sb();x[a>>2]=e;f=a+176|0;i=Cb(f,20,h,1437,a);e=i+f|0;h=Ib(f,e,c);g=a+8|0;f=x[c+28>>2];x[g>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;g=Q(159,g|0)|0;f=x[5120];x[5120]=0;if((f|0)!=1){f=x[a+8>>2];j=x[f+4>>2]-1|0;x[f+4>>2]=j;if((j|0)==-1){Za[x[x[f>>2]+8>>2]](f)}f=a+16|0;Za[x[x[g>>2]+48>>2]](g,a+176|0,e,f)|0;g=b;b=f+(i<<2)|0;b=xc(g,f,(e|0)==(h|0)?b:(a+(h-a<<2)|0)-688|0,b,c,d);Wa=a+208|0;return b|0}c=P()|0;a=x[a+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function wk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;d=Wa-16|0;Wa=d;a:{if(!(y[f+11|0]>>>7|0)){x[a+8>>2]=x[f+8>>2];b=x[f+4>>2];x[a>>2]=x[f>>2];x[a+4>>2]=b;break a}c=x[f>>2];e=Wa-16|0;Wa=e;b:{c:{f=x[f+4>>2];d:{if(f>>>0<2){b=a;v[a+11|0]=f|y[a+11|0]&128;v[a+11|0]=y[a+11|0]&127;break d}if(f>>>0>1073741807){break c}h=e+8|0;if(f>>>0>=2){g=f+4&-4;b=g-1|0;b=(b|0)==2?g:b}else{b=1}vc(h,b+1|0);b=x[e+8>>2];x[a>>2]=b;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=f}jc(b,c,f+1|0);Wa=e+16|0;break b}yb();p()}}Wa=d+16|0}function Vf(a,b,c){var d=0,e=0,f=0,g=0,h=0;g=Wa-16|0;Wa=g;e=Wa-16|0;Wa=e;a:{if(b>>>0<=1073741807){b:{if(b>>>0<2){v[a+11|0]=y[a+11|0]&128|b;v[a+11|0]=y[a+11|0]&127;d=a;break b}h=e+8|0;if(b>>>0>=2){f=b+4&-4;d=f-1|0;d=(d|0)==2?f:d}else{d=1}vc(h,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=b}f=Wa-16|0;Wa=f;x[5120]=0;x[f+12>>2]=c;Fe(d,b,f+12|0);c=x[5120];x[5120]=0;c:{if((c|0)!=1){Wa=f+16|0;break c}V(0)|0;lb();p()}x[e+4>>2]=0;x[(b<<2)+d>>2]=x[e+4>>2];Wa=e+16|0;break a}yb();p()}Wa=g+16|0;return a}function tl(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;a=Wa-96|0;Wa=a;h=sb();x[a>>2]=e;f=a- -64|0;i=Cb(f,20,h,1437,a);e=i+f|0;h=Ib(f,e,c);g=a+8|0;f=x[c+28>>2];x[g>>2]=f;x[f+4>>2]=x[f+4>>2]+1;x[5120]=0;g=Q(61,g|0)|0;f=x[5120];x[5120]=0;if((f|0)!=1){f=x[a+8>>2];j=x[f+4>>2]-1|0;x[f+4>>2]=j;if((j|0)==-1){Za[x[x[f>>2]+8>>2]](f)}f=a+16|0;Za[x[x[g>>2]+32>>2]](g,a- -64|0,e,f)|0;g=b;b=f+i|0;b=yc(g,f,(e|0)==(h|0)?b:(a+(h-a|0)|0)-48|0,b,c,d);Wa=a+96|0;return b|0}c=P()|0;a=x[a+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function xc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=Wa-16|0;Wa=i;a:{b:{if(!a){break b}g=x[e+12>>2];h=c-b|0;if((h|0)>0){h=h>>>2|0;if((Za[x[x[a>>2]+48>>2]](a,b,h)|0)!=(h|0)){break b}}b=d-b>>2;g=(b|0)<(g|0)?g-b|0:0;if((g|0)>0){b=Vf(i,g,f);c:{if(y[b+11|0]>>>7|0){f=x[b>>2];break c}f=b}x[5120]=0;f=Y(190,a|0,f|0,g|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}gb(b);if((f|0)!=(g|0)){break b}}b=d-c|0;if((b|0)>0){b=b>>>2|0;if((Za[x[x[a>>2]+48>>2]](a,c,b)|0)!=(b|0)){break b}}x[e+12>>2]=0;j=a}Wa=i+16|0;return j|0}a=P()|0;gb(b);R(a|0);p()}function pn(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=Wa-32|0;Wa=c;d=x[b>>2];if(d>>>0<2147483632){a:{b:{if(d>>>0>=11){e=(d|15)+1|0;f=rb(e);x[c+8>>2]=e|-2147483648;x[c>>2]=f;x[c+4>>2]=d;e=d+f|0;break b}v[c+11|0]=d;e=c+d|0;f=c;if(!d){break a}}ub(f,b+4|0,d)}v[e|0]=0;x[5120]=0;S(a|0,c+16|0,c|0);a=x[5120];x[5120]=0;if((a|0)!=1){a=y[c+27|0];b=a<<24>>24;d=(b|0)<0;e=d?x[c+20>>2]:a;f=ob(e+4|0);x[f>>2]=e;a=x[c+16>>2];ub(f+4|0,d?a:c+16|0,e);if((b|0)<0){db(a)}if(v[c+11|0]<0){db(x[c>>2])}Wa=c+32|0;return f|0}a=P()|0;if(v[c+11|0]<0){db(x[c>>2])}R(a|0);p()}yb();p()}function yh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(tb(a,x[b+8>>2],e)){if(!(x[b+28>>2]==1|x[b+4>>2]!=(c|0))){x[b+28>>2]=d}return}a:{if(tb(a,x[b>>2],e)){if(!(x[b+16>>2]!=(c|0)&x[b+20>>2]!=(c|0))){if((d|0)!=1){break a}x[b+32>>2]=1;return}x[b+32>>2]=d;b:{if(x[b+44>>2]==4){break b}w[b+52>>1]=0;a=x[a+8>>2];Za[x[x[a>>2]+20>>2]](a,b,c,c,1,e);if(y[b+53|0]){x[b+44>>2]=3;if(!y[b+52|0]){break b}break a}x[b+44>>2]=4}x[b+20>>2]=c;x[b+40>>2]=x[b+40>>2]+1;if(x[b+36>>2]!=1|x[b+24>>2]!=2){break a}v[b+54|0]=1;return}a=x[a+8>>2];Za[x[x[a>>2]+24>>2]](a,b,c,d,e)}}function Kd(a,b,c,d,e){var f=0,g=0,h=0;f=Wa-16|0;Wa=f;if(2147483631-b>>>0>=c>>>0){if(y[a+11|0]>>>7|0){g=x[a>>2]}else{g=a}if(b>>>0<1073741799){x[f+12>>2]=b<<1;x[f>>2]=b+c;c=Wa-16|0;Wa=c;Wa=c+16|0;c=f+12|0;c=x[(A[f>>2]<A[c>>2]?c:f)>>2];if(c>>>0>=11){h=c+16&-16;c=h-1|0;c=(c|0)==11?h:c}else{c=10}c=c+1|0}else{c=2147483631}Ec(f,c);c=x[f>>2];if(e){Hb(c,g,e)}if((d|0)!=(e|0)){Hb(c+e|0,e+g|0,d-e|0)}b=b+1|0;if((b|0)!=11){td(g,b)}x[a>>2]=c;x[a+8>>2]=x[a+8>>2]&-2147483648|x[f+4>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;Wa=f+16|0;return}yb();p()}function Ge(a,b,c,d,e){var f=0,g=0,h=0;f=Wa-16|0;Wa=f;if(1073741807-b>>>0>=c>>>0){if(y[a+11|0]>>>7|0){h=x[a>>2]}else{h=a}if(b>>>0<536870887){x[f+12>>2]=b<<1;x[f>>2]=b+c;c=Wa-16|0;Wa=c;Wa=c+16|0;c=f+12|0;c=x[(A[f>>2]<A[c>>2]?c:f)>>2];if(c>>>0>=2){g=c+4&-4;c=g-1|0;c=(c|0)==2?g:c}else{c=1}c=c+1|0}else{c=1073741807}vc(f,c);c=x[f>>2];if(e){jc(c,h,e)}if((d|0)!=(e|0)){g=e<<2;jc(g+c|0,h+g|0,d-e|0)}b=b+1|0;if((b|0)!=2){ed(h,b)}x[a>>2]=c;x[a+8>>2]=x[a+8>>2]&-2147483648|x[f+4>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;Wa=f+16|0;return}yb();p()}function yc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;i=Wa-16|0;Wa=i;a:{b:{if(!a){break b}g=x[e+12>>2];h=c-b|0;if((h|0)>0){if((Za[x[x[a>>2]+48>>2]](a,b,h)|0)!=(h|0)){break b}}b=d-b|0;g=(b|0)<(g|0)?g-b|0:0;if((g|0)>0){b=Wf(i,g,f);c:{if(y[b+11|0]>>>7|0){f=x[b>>2];break c}f=b}x[5120]=0;f=Y(178,a|0,f|0,g|0)|0;h=x[5120];x[5120]=0;if((h|0)==1){break a}cb(b);if((f|0)!=(g|0)){break b}}b=d-c|0;if((b|0)>0){if((Za[x[x[a>>2]+48>>2]](a,c,b)|0)!=(b|0)){break b}}x[e+12>>2]=0;j=a}Wa=i+16|0;return j|0}a=P()|0;cb(b);R(a|0);p()}function Xk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;c=Wa-128|0;Wa=c;x[c+12>>2]=c+116;d=c+16|0;Lf(a+8|0,d,c+12|0,e,f,g);g=Wa-16|0;Wa=g;a=Wa-32|0;Wa=a;le(a+24|0,d,x[c+12>>2]);h=x[a+28>>2];e=Wa-16|0;Wa=e;f=x[a+24>>2];x[e+4>>2]=f;x[e+8>>2]=b;while(1){if((f|0)!=(h|0)){Qg(e+8|0,v[f|0]);f=f+1|0;x[e+4>>2]=f;continue}break}x[a+16>>2]=x[e+4>>2];x[a+20>>2]=x[e+8>>2];Wa=e+16|0;x[a+12>>2]=(x[a+16>>2]-d|0)+d;x[a+8>>2]=x[a+20>>2];x[g+8>>2]=x[a+12>>2];x[g+12>>2]=x[a+8>>2];Wa=a+32|0;Wa=g+16|0;Wa=c+128|0;return x[g+12>>2]}function Zb(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;f=Wa-16|0;Wa=f;o(+b);g=j(1)|0;d=j(0)|0;c=g&2147483647;e=c+-1048576|0;a:{if((e|0)==2145386495|e>>>0<2145386495){h=d<<28;e=c>>>4|0;c=(c&15)<<28|d>>>4;d=e+1006632960|0;break a}if((c|0)==2146435072|c>>>0>2146435072){h=d<<28;c=(g&15)<<28|d>>>4;d=g>>>4|2147418112;break a}if(!(c|d)){c=0;d=0;break a}e=c;c=c?G(c):G(d)+32|0;Eb(f,d,e,0,0,c+49|0);i=x[f>>2];h=x[f+4>>2];e=15372-c<<16;c=x[f+8>>2];d=e|x[f+12>>2]^65536}x[a>>2]=i;x[a+4>>2]=h;x[a+8>>2]=c;x[a+12>>2]=g&-2147483648|d;Wa=f+16|0}function Xh(a){a=a|0;var b=0,c=0;b=Wa-16|0;Wa=b;c=_c(a,0,10);a=x[4987]+D((c|0)%x[4984]|0,40)|0;a:{if((c|0)!=x[a>>2]){v[b+11|0]=9;v[b+9|0]=0;a=y[1797]|y[1798]<<8|(y[1799]<<16|y[1800]<<24);c=y[1793]|y[1794]<<8|(y[1795]<<16|y[1796]<<24);v[b|0]=c;v[b+1|0]=c>>>8;v[b+2|0]=c>>>16;v[b+3|0]=c>>>24;v[b+4|0]=a;v[b+5|0]=a>>>8;v[b+6|0]=a>>>16;v[b+7|0]=a>>>24;v[b+8|0]=y[1801];break a}if(v[a+15|0]>=0){c=x[a+8>>2];x[b>>2]=x[a+4>>2];x[b+4>>2]=c;x[b+8>>2]=x[a+12>>2];break a}mc(b,x[a+4>>2],x[a+8>>2])}if(v[b+11|0]<0){db(x[b>>2])}Wa=b+16|0}function ce(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=Ce(a,61);if((b|0)==(a|0)){return 0}f=b-a|0;a:{if(y[f+a|0]){break a}e=x[5171];if(!e){break a}d=x[e>>2];if(!d){break a}while(1){b:{b=a;h=0;g=f;c=0;c:{if(!f){break c}c=y[b|0];d:{if(!c){break d}while(1){e:{i=y[d|0];if(!i){break e}g=g-1|0;if(!g|(c|0)!=(i|0)){break e}d=d+1|0;c=y[b+1|0];b=b+1|0;if(c){continue}break d}break}h=c}c=(h&255)-y[d|0]|0}if(!c){b=x[e>>2]+f|0;if(y[b|0]==61){break b}}d=x[e+4>>2];e=e+4|0;if(d){continue}break a}break}j=b+1|0}return j}function Zg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;while(1){a:{if((c|0)<=(g|0)){break a}d=x[a+12>>2];f=x[a+16>>2];b:{if(d>>>0<f>>>0){x[e+12>>2]=2147483647;x[e+8>>2]=f-d;x[e+4>>2]=c-g;d=Wa-16|0;Wa=d;Wa=d+16|0;d=Wa-16|0;Wa=d;Wa=d+16|0;d=e+4|0;f=e+8|0;d=x[d>>2]<x[f>>2]?d:f;f=e+12|0;d=x[(x[d>>2]<x[f>>2]?d:f)>>2];Hb(b,x[a+12>>2],d);x[a+12>>2]=x[a+12>>2]+d;break b}d=Za[x[x[a>>2]+40>>2]](a)|0;if((d|0)==-1){break a}v[b|0]=d<<24>>24;d=1}b=b+d|0;g=d+g|0;continue}break}Wa=e+16|0;return g|0}function zc(a,b,c){var d=0,e=0,f=0;e=Wa-16|0;Wa=e;d=e+8|0;b=x[b+28>>2];x[d>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=Q(160,d|0)|0;d=x[5120];x[5120]=0;a:{if((d|0)==1){break a}x[5120]=0;d=Q(169,b|0)|0;f=x[5120];x[5120]=0;if((f|0)==1){break a}x[c>>2]=d;x[5120]=0;S(170,a|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}a=x[e+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}Wa=e+16|0;return}c=P()|0;a=x[e+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function Bc(a,b,c){var d=0,e=0,f=0;e=Wa-16|0;Wa=e;d=e+8|0;b=x[b+28>>2];x[d>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;b=Q(128,d|0)|0;d=x[5120];x[5120]=0;a:{if((d|0)==1){break a}x[5120]=0;d=Q(143,b|0)|0;f=x[5120];x[5120]=0;if((f|0)==1){break a}v[c|0]=d;x[5120]=0;S(144,a|0,b|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}a=x[e+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}Wa=e+16|0;return}c=P()|0;a=x[e+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function rc(a,b,c,d,e,f){var g=0,h=0,i=0,j=0;a:{if(f&64){c=f+-64|0;b=c&31;if((c&63)>>>0>=32){c=0;b=e>>>b|0}else{c=e>>>b|0;b=((1<<b)-1&e)<<32-b|d>>>b}d=0;e=0;break a}if(!f){break a}i=d;h=64-f|0;g=h&31;if((h&63)>>>0>=32){h=i<<g;j=0}else{h=(1<<g)-1&i>>>32-g|e<<g;j=i<<g}i=b;b=f&31;if((f&63)>>>0>=32){g=0;b=c>>>b|0}else{g=c>>>b|0;b=((1<<b)-1&c)<<32-b|i>>>b}b=j|b;c=g|h;g=d;d=f&31;if((f&63)>>>0>=32){h=0;d=e>>>d|0}else{h=e>>>d|0;d=((1<<d)-1&e)<<32-d|g>>>d}e=h}x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=d;x[a+12>>2]=e}function Cm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;f=x[a+4>>2];h=(f>>1)+b|0;b=x[a>>2];b=f&1?x[x[h>>2]+b>>2]:b;f=x[d>>2];if(f>>>0<2147483632){a:{b:{if(f>>>0>=11){g=(f|15)+1|0;a=rb(g);x[e+8>>2]=g|-2147483648;x[e>>2]=a;x[e+4>>2]=f;g=a+f|0;break b}v[e+11|0]=f;g=e+f|0;a=e;if(!f){break a}}ub(a,d+4|0,f)}v[g|0]=0;x[5120]=0;U(b|0,h|0,c|0,e|0);a=x[5120];x[5120]=0;if((a|0)!=1){if(v[e+11|0]<0){db(x[e>>2])}Wa=e+16|0;return}a=P()|0;if(v[e+11|0]<0){db(x[e>>2])}R(a|0);p()}yb();p()}function Bi(a){a=a|0;if(y[21056]){return x[5263]}if(!y[22160]){v[22160]=1}ib(21872,15416);ib(21884,15448);ib(21896,15484);ib(21908,15508);ib(21920,15532);ib(21932,15548);ib(21944,15568);ib(21956,15588);ib(21968,15616);ib(21980,15656);ib(21992,15688);ib(22004,15724);ib(22016,15760);ib(22028,15776);ib(22040,15792);ib(22052,15808);ib(22064,15532);ib(22076,15824);ib(22088,15840);ib(22100,15856);ib(22112,15872);ib(22124,15888);ib(22136,15904);ib(22148,15920);v[21056]=1;x[5263]=21872;return 21872}function cg(a,b,c){var d=0,e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;f=c-b>>2;if(f>>>0<=1073741807){a:{if(f>>>0<2){v[a+11|0]=y[a+11|0]&128|f;v[a+11|0]=y[a+11|0]&127;d=a;break a}h=e+8|0;if(f>>>0>=2){g=f+4&-4;d=g-1|0;d=(d|0)==2?g:d}else{d=1}vc(h,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=f}while(1){if((b|0)!=(c|0)){x[d>>2]=x[b>>2];d=d+4|0;b=b+4|0;continue}break}x[e+4>>2]=0;x[d>>2]=x[e+4>>2];Wa=e+16|0;return}yb();p()}function Mg(a,b,c){var d=0,e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;f=c-b|0;if(f>>>0<=2147483631){a:{if(f>>>0<11){v[a+11|0]=y[a+11|0]&128|f;v[a+11|0]=y[a+11|0]&127;d=a;break a}h=e+8|0;if(f>>>0>=11){g=f+16&-16;d=g-1|0;d=(d|0)==11?g:d}else{d=10}Ec(h,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=f}while(1){if((b|0)!=(c|0)){v[d|0]=y[b|0];d=d+1|0;b=b+1|0;continue}break}v[e+7|0]=0;v[d|0]=y[e+7|0];Wa=e+16|0;return}yb();p()}function Hm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=Wa-16|0;Wa=d;e=x[a+4>>2];g=(e>>1)+b|0;b=x[a>>2];b=e&1?x[x[g>>2]+b>>2]:b;e=x[c>>2];if(e>>>0<2147483632){a:{b:{if(e>>>0>=11){f=(e|15)+1|0;a=rb(f);x[d+8>>2]=f|-2147483648;x[d>>2]=a;x[d+4>>2]=e;f=a+e|0;break b}v[d+11|0]=e;f=d+e|0;a=d;if(!e){break a}}ub(a,c+4|0,e)}v[f|0]=0;x[5120]=0;S(b|0,g|0,d|0);a=x[5120];x[5120]=0;if((a|0)!=1){if(v[d+11|0]<0){db(x[d>>2])}Wa=d+16|0;return}a=P()|0;if(v[d+11|0]<0){db(x[d>>2])}R(a|0);p()}yb();p()}function Hc(a){var b=0,c=0,d=0;if(!a){if(x[5138]){b=Hc(x[5138])}if(x[5138]){b=Hc(x[5138])|b}a=x[5137];if(a){while(1){if(x[a+20>>2]!=x[a+28>>2]){b=Hc(a)|b}a=x[a+56>>2];if(a){continue}break}}return b}d=x[a+76>>2]>=0;a:{b:{if(x[a+20>>2]==x[a+28>>2]){break b}Za[x[a+36>>2]](a,0,0)|0;if(x[a+20>>2]){break b}b=-1;break a}b=x[a+8>>2];c=x[a+4>>2];if((b|0)!=(c|0)){b=c-b|0;Za[x[a+40>>2]](a,b,b>>31,1)|0}b=0;x[a+28>>2]=0;x[a+16>>2]=0;x[a+20>>2]=0;x[a+4>>2]=0;x[a+8>>2]=0;if(!d){break a}}return b}function bm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;a:{b:{c:{if((a|0)!=(b|0)){d:{e:{f=y[a|0];if((f|0)!=45){break e}a=a+1|0;if((b|0)!=(a|0)){break e}break d}h=x[4995];x[4995]=0;a=Md(a,e+12|0,d,sb());d=Ya;g=x[4995];f:{if(g){if(x[e+12>>2]!=(b|0)){break f}if((g|0)==68){break c}break b}x[4995]=h;if(x[e+12>>2]==(b|0)){break b}}}}x[c>>2]=4;b=0;a=0;break a}x[c>>2]=4;b=-1;a=-1;break a}c=(f|0)==45;b=c?0-a|0:a;a=c?0-(d+((a|0)!=0)|0)|0:d}Wa=e+16|0;Ya=a;return b|0}function Tm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Wa-16|0;Wa=d;e=x[c+4>>2];c=x[c>>2];x[d>>2]=c;x[d+4>>2]=e;x[d+8>>2]=c;x[d+12>>2]=e;c=Wa-32|0;Wa=c;b=Tb(c,b);x[5120]=0;U(561,c+16|0,d|0,b|0);e=x[5120];x[5120]=0;a:{b:{c:{if((e|0)!=1){x[5120]=0;a=T(562,a|0,c+16|0)|0;e=x[5120];x[5120]=0;if((e|0)==1){break c}cb(c+16|0);cb(b);x[a>>2]=18480;b=x[d+4>>2];x[a+8>>2]=x[d>>2];x[a+12>>2]=b;Wa=c+32|0;break a}a=P()|0;break b}a=P()|0;cb(c+16|0)}cb(b);R(a|0);p()}x[a>>2]=4664;Wa=d+16|0;return a|0}function Sh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=Wa-16|0;Wa=e;x[e+12>>2]=0;if(y[b+11|0]>>>7|0){b=x[b>>2]}x[e+8>>2]=x[4995];x[4995]=0;d=_d(b,e+12|0,d,-2147483648,0);f=x[4995];x[4995]=x[e+8>>2];x[e+8>>2]=f;a:{if(x[e+8>>2]==68){b=Wa-16|0;Wa=b;Ee(b,a,1778);x[5120]=0;aa(555,b|0);break a}f=x[e+12>>2];if((f|0)==(b|0)){b=Wa-16|0;Wa=b;Ee(b,a,1513);x[5120]=0;aa(556,b|0);break a}if(c){x[c>>2]=f-b}Wa=e+16|0;return d|0}a=x[5120];x[5120]=0;if((a|0)!=1){p()}a=P()|0;cb(b);R(a|0);p()}
function Eb(a,b,c,d,e,f){var g=0,h=0,i=0;a:{if(f&64){d=b;e=f+-64|0;b=e&31;if((e&63)>>>0>=32){e=d<<b;d=0}else{e=(1<<b)-1&d>>>32-b|c<<b;d=d<<b}b=0;c=0;break a}if(!f){break a}g=d;d=f&31;if((f&63)>>>0>=32){h=g<<d;i=0}else{h=(1<<d)-1&g>>>32-d|e<<d;i=g<<d}g=b;e=64-f|0;d=e&31;if((e&63)>>>0>=32){e=0;b=c>>>d|0}else{e=c>>>d|0;b=((1<<d)-1&c)<<32-d|g>>>d}d=i|b;e=e|h;b=f&31;if((f&63)>>>0>=32){h=g<<b;b=0}else{h=(1<<b)-1&g>>>32-b|c<<b;b=g<<b}c=h}x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=d;x[a+12>>2]=e}function eh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=Wa-32|0;Wa=e;x[e+16>>2]=b;d=x[a+48>>2];x[e+20>>2]=c-((d|0)!=0);f=x[a+44>>2];x[e+28>>2]=d;x[e+24>>2]=f;a:{b:{d=Ka(x[a+60>>2],e+16|0,2,e+12|0)|0;if(d){x[4995]=d;d=-1}else{d=0}if(d){b=32}else{d=x[e+12>>2];if((d|0)>0){break b}b=d?32:16}x[a>>2]=b|x[a>>2];break a}g=d;f=x[e+20>>2];if(f>>>0>=d>>>0){break a}d=x[a+44>>2];x[a+4>>2]=d;x[a+8>>2]=d+(g-f|0);if(x[a+48>>2]){x[a+4>>2]=d+1;v[(b+c|0)-1|0]=y[d|0]}g=c}Wa=e+32|0;return g|0}function gm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;a:{b:{c:{d:{if((a|0)!=(b|0)){e:{f:{f=y[a|0];if((f|0)!=45){break f}a=a+1|0;if((b|0)!=(a|0)){break f}break e}h=x[4995];x[4995]=0;a=Md(a,e+12|0,d,sb());d=Ya;g=x[4995];g:{if(g){if(x[e+12>>2]!=(b|0)){break g}if((g|0)==68){break c}break d}x[4995]=h;if(x[e+12>>2]==(b|0)){break d}}}}x[c>>2]=4;a=0;break a}if(!d&a>>>0<=65535){break b}}x[c>>2]=4;a=65535;break a}a=(f|0)==45?0-a|0:a}Wa=e+16|0;return a&65535}function km(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=Wa-16|0;Wa=e;a:{b:{c:{if((a|0)!=(b|0)){g=x[4995];x[4995]=0;a=Me(a,e+12|0,d,sb());d=Ya;f=x[4995];d:{if(f){if(x[e+12>>2]!=(b|0)){break d}if((f|0)==68){break b}break c}x[4995]=g;if(x[e+12>>2]==(b|0)){break c}}}x[c>>2]=4;b=0;break a}if((d|0)<0&a>>>0<2147483648|(d|0)<-1|(a>>>0>2147483647&(d|0)>=0|(d|0)>0)){break b}b=a;break a}x[c>>2]=4;b=2147483647;if(!!a&(d|0)>=0|(d|0)>0){break a}b=-2147483648}Wa=e+16|0;return b|0}function bn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;d=Wa-16|0;Wa=d;a:{b:{if(x[b+64>>2]){if(!(Za[x[x[b>>2]+24>>2]](b)|0)){break b}}x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0;break a}if(Vc(x[b+64>>2],x[c+8>>2],x[c+12>>2],0)){x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0;break a}e=x[c+4>>2];x[d+8>>2]=x[c>>2];x[d+12>>2]=e;e=x[d+12>>2];x[b+72>>2]=x[d+8>>2];x[b+76>>2]=e;b=x[c+12>>2];x[a+8>>2]=x[c+8>>2];x[a+12>>2]=b;b=x[c+4>>2];x[a>>2]=x[c>>2];x[a+4>>2]=b}Wa=d+16|0}function Di(a){a=a|0;if(y[21048]){return x[5261]}if(!y[21856]){v[21856]=1}jb(21568,1042);jb(21580,1033);jb(21592,1624);jb(21604,1562);jb(21616,1112);jb(21628,1766);jb(21640,1050);jb(21652,1190);jb(21664,1371);jb(21676,1354);jb(21688,1362);jb(21700,1381);jb(21712,1537);jb(21724,1931);jb(21736,1420);jb(21748,1291);jb(21760,1112);jb(21772,1444);jb(21784,1550);jb(21796,1630);jb(21808,1424);jb(21820,1247);jb(21832,1182);jb(21844,1921);v[21048]=1;x[5261]=21568;return 21568}function de(a,b,c){var d=0,e=0;d=(c|0)!=0;a:{b:{c:{if(!(a&3)|!c){break c}e=b&255;while(1){if((e|0)==y[a|0]){break b}c=c-1|0;d=(c|0)!=0;a=a+1|0;if(!(a&3)){break c}if(c){continue}break}}if(!d){break a}if(!(y[a|0]==(b&255)|c>>>0<4)){d=D(b&255,16843009);while(1){e=d^x[a>>2];if((e^-1)&e-16843009&-2139062144){break b}a=a+4|0;c=c-4|0;if(c>>>0>3){continue}break}}if(!c){break a}}b=b&255;while(1){if((b|0)==y[a|0]){return a}a=a+1|0;c=c-1|0;if(c){continue}break}}return 0}function wc(a,b){var c=0,d=0,e=0,f=0,g=0,h=0;f=Wa-16|0;Wa=f;d=hg(b);e=Wa-16|0;Wa=e;a:{if(d>>>0<=1073741807){b:{if(d>>>0<2){v[a+11|0]=y[a+11|0]&128|d;v[a+11|0]=y[a+11|0]&127;c=a;break b}h=e+8|0;if(d>>>0>=2){g=d+4&-4;c=g-1|0;c=(c|0)==2?g:c}else{c=1}vc(h,c+1|0);c=x[e+8>>2];x[a>>2]=c;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=d}jc(c,b,d);x[e+4>>2]=0;x[(d<<2)+c>>2]=x[e+4>>2];Wa=e+16|0;break a}yb();p()}Wa=f+16|0}function qd(a,b,c){a=a|0;b=b|0;c=c|0;a:{if(a){if(b>>>0<=127){break a}b:{if(!x[x[5164]>>2]){if((b&-128)==57216){break a}break b}if(b>>>0<=2047){v[a+1|0]=b&63|128;v[a|0]=b>>>6|192;return 2}if(!((b&-8192)!=57344&b>>>0>=55296)){v[a+2|0]=b&63|128;v[a|0]=b>>>12|224;v[a+1|0]=b>>>6&63|128;return 3}if(b-65536>>>0<=1048575){v[a+3|0]=b&63|128;v[a|0]=b>>>18|240;v[a+2|0]=b>>>6&63|128;v[a+1|0]=b>>>12&63|128;return 4}}x[4995]=25;a=-1}else{a=1}return a|0}v[a|0]=b;return 1}function Wf(a,b,c){var d=0,e=0,f=0,g=0,h=0;f=Wa-16|0;Wa=f;e=Wa-16|0;Wa=e;a:{if(b>>>0<=2147483631){b:{if(b>>>0<11){v[a+11|0]=y[a+11|0]&128|b;v[a+11|0]=y[a+11|0]&127;d=a;break b}h=e+8|0;if(b>>>0>=11){g=b+16&-16;d=g-1|0;d=(d|0)==11?g:d}else{d=10}Ec(h,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=b}Jd(d,b,c);v[e+7|0]=0;v[b+d|0]=y[e+7|0];Wa=e+16|0;break a}yb();p()}Wa=f+16|0;return a}function wb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;a:{if(y[a+11|0]>>>7|0){e=x[a+4>>2]}else{e=y[a+11|0]&127}if(!e|(c-b|0)<5){break a}Lc(b,c);f=c-4|0;if(y[a+11|0]>>>7|0){e=x[a+4>>2]}else{e=y[a+11|0]&127}if(y[a+11|0]>>>7|0){a=x[a>>2]}c=a;a=e+a|0;b:{while(1){c:{e=v[c|0];if(b>>>0>=f>>>0){break c}if(!((e|0)<=0|(e|0)>=127)&x[b>>2]!=v[c|0]){break b}b=b+4|0;c=((a-c|0)>1)+c|0;continue}break}if((e|0)<=0|(e|0)>=127|v[c|0]>>>0>x[f>>2]-1>>>0){break a}}x[d>>2]=4}}function pb(a,b,c){var d=0,e=0,f=0;e=Wa-16|0;Wa=e;x[b+4>>2]=x[b+4>>2]+1;d=Wa-16|0;Wa=d;x[d+12>>2]=b;b=e+8|0;x[b>>2]=x[d+12>>2];Wa=d+16|0;a:{a=a+8|0;if(x[a+4>>2]-x[a>>2]>>2>>>0<=c>>>0){x[5120]=0;S(269,a|0,c+1|0);d=x[5120];x[5120]=0;if((d|0)==1){break a}}if(x[x[a>>2]+(c<<2)>>2]){d=x[x[a>>2]+(c<<2)>>2];f=x[d+4>>2]-1|0;x[d+4>>2]=f;if((f|0)==-1){Za[x[x[d>>2]+8>>2]](d)}}d=x[b>>2];x[b>>2]=0;x[x[a>>2]+(c<<2)>>2]=d;qf(b);Wa=e+16|0;return}a=P()|0;qf(b);R(a|0);p()}function Sl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;f=x[d>>2];if(f>>>0<2147483632){h=x[a>>2];a:{b:{if(f>>>0>=11){g=(f|15)+1|0;a=rb(g);x[e+8>>2]=g|-2147483648;x[e>>2]=a;x[e+4>>2]=f;g=a+f|0;break b}v[e+11|0]=f;g=e+f|0;a=e;if(!f){break a}}ub(a,d+4|0,f)}v[g|0]=0;x[5120]=0;a=Y(h|0,b|0,c|0,e|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){if(v[e+11|0]<0){db(x[e>>2])}Wa=e+16|0;return a|0}a=P()|0;if(v[e+11|0]<0){db(x[e>>2])}R(a|0);p()}yb();p()}function $f(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;a:{b:{c:{d:{if((a|0)!=(b|0)){e:{f:{f=y[a|0];if((f|0)!=45){break f}a=a+1|0;if((b|0)!=(a|0)){break f}break e}h=x[4995];x[4995]=0;a=Md(a,e+12|0,d,sb());d=Ya;g=x[4995];g:{if(g){if(x[e+12>>2]!=(b|0)){break g}if((g|0)==68){break c}break d}x[4995]=h;if(x[e+12>>2]==(b|0)){break d}}}}x[c>>2]=4;a=0;break a}if(!d){break b}}x[c>>2]=4;a=-1;break a}a=(f|0)==45?0-a|0:a}Wa=e+16|0;return a|0}function Th(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=Wa-16|0;Wa=c;x[c+12>>2]=b;a:{b:{e=y[a+11|0]>>>7|0;c:{if(!e){d=y[a+11|0]&127;b=1;break c}d=x[a+4>>2];b=(x[a+8>>2]&2147483647)-1|0}if((b|0)==(d|0)){Ge(a,b,1,b,b);d:{if(y[a+11|0]>>>7|0){break d}}break b}e:{if(y[a+11|0]>>>7|0){break e}}if(e){break b}b=a;v[a+11|0]=d+1|y[a+11|0]&128;v[a+11|0]=y[a+11|0]&127;break a}b=x[a>>2];x[a+4>>2]=d+1}a=(d<<2)+b|0;x[a>>2]=x[c+12>>2];x[c+8>>2]=0;x[a+4>>2]=x[c+8>>2];Wa=c+16|0}function on(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;a:{if(y[a+11|0]>>>7|0){c=x[a+4>>2]}else{c=y[a+11|0]&127}if(c>>>0<b>>>0){d=Wa-16|0;Wa=d;e=b-c|0;if(e){c=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;if(y[a+11|0]>>>7|0){b=x[a+4>>2]}else{b=y[a+11|0]&127}f=b+e|0;if(e>>>0>c-b>>>0){Kd(a,c,f-c|0,b,b)}c=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}Jd(c+b|0,e,0);nc(a,f);v[d+15|0]=0;v[b+f|0]=y[d+15|0]}Wa=d+16|0;break a}c=a;if(y[a+11|0]>>>7|0){a=x[a>>2]}We(c,a,b)}}function Vh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=Wa-16|0;Wa=c;v[c+15|0]=b;a:{b:{e=y[a+11|0]>>>7|0;c:{if(!e){d=y[a+11|0]&127;b=10;break c}d=x[a+4>>2];b=(x[a+8>>2]&2147483647)-1|0}if((b|0)==(d|0)){Kd(a,b,1,b,b);d:{if(y[a+11|0]>>>7|0){break d}}break b}e:{if(y[a+11|0]>>>7|0){break e}}if(e){break b}b=a;v[a+11|0]=d+1|y[a+11|0]&128;v[a+11|0]=y[a+11|0]&127;break a}b=x[a>>2];x[a+4>>2]=d+1}a=b+d|0;v[a|0]=y[c+15|0];v[c+14|0]=0;v[a+1|0]=y[c+14|0];Wa=c+16|0}function Ac(a,b){var c=0,d=0;d=Wa-16|0;Wa=d;c=d+8|0;a=x[a+28>>2];x[c>>2]=a;x[a+4>>2]=x[a+4>>2]+1;x[5120]=0;a=Q(159,c|0)|0;c=x[5120];x[5120]=0;a:{b:{if((c|0)==1){break b}x[5120]=0;W(172,a|0,9152,9178,b|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break b}a=x[d+8>>2];c=x[a+4>>2]-1|0;x[a+4>>2]=c;if((c|0)==-1){Za[x[x[a>>2]+8>>2]](a)}Wa=d+16|0;break a}c=P()|0;a=x[d+8>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}return b}function Ce(a,b){var c=0,d=0;a:{d=b&255;if(d){if(a&3){while(1){c=y[a|0];if(!c|(c|0)==(b&255)){break a}a=a+1|0;if(a&3){continue}break}}c=x[a>>2];b:{if((c^-1)&c-16843009&-2139062144){break b}d=D(d,16843009);while(1){c=c^d;if((c^-1)&c-16843009&-2139062144){break b}c=x[a+4>>2];a=a+4|0;if(!(c-16843009&(c^-1)&-2139062144)){continue}break}}while(1){c=a;d=y[c|0];if(d){a=c+1|0;if((d|0)!=(b&255)){continue}}break}return c}return _b(a)+a|0}return a}function Ag(a,b,c,d,e){var f=0,g=0,h=0;h=-1;g=d&2147483647;f=(g|0)==2147418112;a:{if(f&!c?a|b:f&(c|0)!=0|g>>>0>2147418112){break a}f=e&2147483647;if(((f|0)==2147418112&0|f>>>0>2147418112)&(f|0)!=2147418112){break a}if(!(a|c|(f|g|b))){return 0}f=d&e;if((f|0)>0|(f|0)>=0){if(((c|0)!=0|(d|0)!=(e|0))&(d|0)<(e|0)){break a}return(a|c|(d^e|b))!=0}if(!c&(d|0)==(e|0)?a|b:(c|0)!=0&(d|0)>=(e|0)|(d|0)>(e|0)){break a}h=(a|c|(d^e|b))!=0}return h}function Ti(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0;while(1){a:{if((c|0)==(d|0)|e>>>0<=h>>>0){break a}g=1;f=Wa-16|0;Wa=f;x[f+12>>2]=x[a+8>>2];i=Rb(f+8|0,f+12|0);x[5120]=0;j=eg(c,d-c|0,b);l=x[5120];x[5120]=0;b:{if((l|0)!=1){xb(i);Wa=f+16|0;break b}a=P()|0;xb(i);R(a|0);p()}c:{switch(j+2|0){default:g=j;break;case 0:case 1:break a;case 2:break c}}h=h+1|0;k=g+k|0;c=c+g|0;continue}break}return k|0}function Ab(a,b,c,d,e,f,g,h,i){var j=0,k=0,l=0,m=0;i=Gn(b,c,h,i);h=Ya;e=Gn(d,e,f,g);i=e+i|0;d=Ya+h|0;h=e>>>0>i>>>0?d+1|0:d;j=g;e=0;k=c;d=0;c=Gn(g,e,c,d);g=c+i|0;i=Ya+h|0;l=g;c=c>>>0>g>>>0?i+1|0:i;g=Gn(f,0,b,0);h=Ya;i=0;d=Gn(f,i,k,d);h=h+d|0;f=Ya+i|0;f=d>>>0>h>>>0?f+1|0:f;i=f+l|0;d=c;f=f>>>0>i>>>0?d+1|0:d;c=Gn(b,m,j,e)+h|0;e=Ya;e=c>>>0<h>>>0?e+1|0:e;h=e+i|0;i=f;x[a+8>>2]=h;x[a+12>>2]=e>>>0>h>>>0?i+1|0:i;x[a>>2]=g;x[a+4>>2]=c}function _k(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-16|0;Wa=g;x[g+8>>2]=b;b=x[d+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;h=Q(159,g|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[g>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Of(a,f+16|0,g+8|0,c,e,h);Wa=g+16|0;return x[g+8>>2]}c=P()|0;a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function $k(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-16|0;Wa=g;x[g+8>>2]=b;b=x[d+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;h=Q(159,g|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[g>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Pf(a,f+24|0,g+8|0,c,e,h);Wa=g+16|0;return x[g+8>>2]}c=P()|0;a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function gl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-16|0;Wa=g;x[g+8>>2]=b;b=x[d+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;h=Q(61,g|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[g>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Sf(a,f+24|0,g+8|0,c,e,h);Wa=g+16|0;return x[g+8>>2]}c=P()|0;a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function fl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-16|0;Wa=g;x[g+8>>2]=b;b=x[d+28>>2];x[g>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;h=Q(61,g|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[g>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Rf(a,f+16|0,g+8|0,c,e,h);Wa=g+16|0;return x[g+8>>2]}c=P()|0;a=x[g>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function mc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;a:{b:{if(c>>>0<11){d=a;v[a+11|0]=y[a+11|0]&128|c;v[a+11|0]=y[a+11|0]&127;break b}if(c>>>0>2147483631){break a}g=e+8|0;if(c>>>0>=11){f=c+16&-16;d=f-1|0;d=(d|0)==11?f:d}else{d=10}Ec(g,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=c}Hb(d,b,c+1|0);Wa=e+16|0;return}yb();p()}function Wg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;while(1){a:{if((c|0)<=(f|0)){break a}d=x[a+24>>2];g=x[a+28>>2];if(d>>>0>=g>>>0){if((Za[x[x[a>>2]+52>>2]](a,y[b|0])|0)==-1){break a}f=f+1|0;b=b+1|0}else{x[e+12>>2]=g-d;x[e+8>>2]=c-f;d=Wa-16|0;Wa=d;Wa=d+16|0;d=e+8|0;g=e+12|0;d=x[(x[d>>2]<x[g>>2]?d:g)>>2];Hb(x[a+24>>2],b,d);x[a+24>>2]=d+x[a+24>>2];f=d+f|0;b=b+d|0}continue}break}Wa=e+16|0;return f|0}function Zk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;a=Wa-16|0;Wa=a;x[a+8>>2]=b;b=x[d+28>>2];x[a>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;g=Q(159,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[a>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Nf(f+20|0,a+8|0,c,e,g);Wa=a+16|0;return x[a+8>>2]}c=P()|0;a=x[a>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function Ie(a,b,c){var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;if(c>>>0<=2147483631){a:{if(c>>>0<11){v[a+11|0]=y[a+11|0]&128|c;v[a+11|0]=y[a+11|0]&127;d=a;break a}g=e+8|0;if(c>>>0>=11){f=c+16&-16;d=f-1|0;d=(d|0)==11?f:d}else{d=10}Ec(g,d+1|0);d=x[e+8>>2];x[a>>2]=d;x[a+8>>2]=x[a+8>>2]&-2147483648|x[e+12>>2]&2147483647;x[a+8>>2]=x[a+8>>2]|-2147483648;x[a+4>>2]=c}Hb(d,b,c);v[e+7|0]=0;v[c+d|0]=y[e+7|0];Wa=e+16|0;return}yb();p()}function el(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;a=Wa-16|0;Wa=a;x[a+8>>2]=b;b=x[d+28>>2];x[a>>2]=b;x[b+4>>2]=x[b+4>>2]+1;x[5120]=0;g=Q(61,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=x[a>>2];d=x[b+4>>2]-1|0;x[b+4>>2]=d;if((d|0)==-1){Za[x[x[b>>2]+8>>2]](b)}Qf(f+20|0,a+8|0,c,e,g);Wa=a+16|0;return x[a+8>>2]}c=P()|0;a=x[a>>2];b=x[a+4>>2]-1|0;x[a+4>>2]=b;if((b|0)==-1){Za[x[x[a>>2]+8>>2]](a)}R(c|0);p()}function $m(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=Wa-16|0;Wa=c;d=x[b>>2];if(d>>>0<2147483632){a:{b:{if(d>>>0>=11){e=(d|15)+1|0;f=rb(e);x[c+8>>2]=e|-2147483648;x[c>>2]=f;x[c+4>>2]=d;e=d+f|0;break b}v[c+11|0]=d;e=c+d|0;f=c;if(!d){break a}}ub(f,b+4|0,d)}v[e|0]=0;x[5120]=0;aa(a|0,c|0);a=x[5120];x[5120]=0;if((a|0)!=1){if(v[c+11|0]<0){db(x[c>>2])}Wa=c+16|0;return}a=P()|0;if(v[c+11|0]<0){db(x[c>>2])}R(a|0);p()}yb();p()}function Ih(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Wa-16|0;Wa=d;a:{if(x[b>>2]){if(y[c+11|0]>>>7|0){e=x[c+4>>2]}else{e=y[c+11|0]&127}if(e){Id(c,2751,_b(2751))}e=x[b+4>>2];Za[x[x[e>>2]+24>>2]](d,e,x[b>>2]);x[5120]=0;T(560,c|0,d|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}cb(d)}b=x[c+4>>2];x[a>>2]=x[c>>2];x[a+4>>2]=b;x[a+8>>2]=x[c+8>>2];x[c>>2]=0;x[c+4>>2]=0;x[c+8>>2]=0;Wa=d+16|0;return}a=P()|0;cb(d);R(a|0);p()}function Hg(){var a=0;Ea(2936,3044,3148,0,3164,14,3167,0,3167,0,2621,3169,15);Ca(2936,1,3172,3164,16,17);a=rb(8);x[a+4>>2]=0;x[a>>2]=18;ka(2936,1584,3,3176,3188,19,a|0,0);a=rb(8);x[a+4>>2]=0;x[a>>2]=20;ka(2936,1744,4,3200,3216,21,a|0,0);a=rb(8);x[a+4>>2]=0;x[a>>2]=22;ka(2936,1746,2,3224,2836,23,a|0,0);a=rb(4);x[a>>2]=24;ka(2936,1243,3,3232,3272,25,a|0,0);a=rb(4);x[a>>2]=26;ka(2936,1239,4,3280,3296,27,a|0,0)}function $l(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=E(0),g=0,h=E(0);e=Wa-16|0;Wa=e;a:{b:{c:{if((a|0)!=(b|0)){g=x[4995];x[4995]=0;sb();d=Wa-16|0;Wa=d;Zd(d,a,e+12|0,0);f=tg(x[d>>2],x[d+4>>2],x[d+8>>2],x[d+12>>2]);Wa=d+16|0;a=x[4995];if(!a){break c}if(x[e+12>>2]!=(b|0)){break b}h=f;if((a|0)!=68){break a}break b}x[c>>2]=4;break a}x[4995]=g;if(x[e+12>>2]==(b|0)){break a}}x[c>>2]=4;f=h}Wa=e+16|0;return E(f)}function ln(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;c=Wa-16|0;Wa=c;a:{b=x[a+64>>2];if(b){x[c+4>>2]=73;b=qb(c+8|0,b,c+4|0);e=x[x[a>>2]+24>>2];x[5120]=0;e=Q(e|0,a|0)|0;d=x[5120];x[5120]=0;if((d|0)==1){break a}d=x[b>>2];x[b>>2]=0;d=yd(d);x[a+64>>2]=0;f=x[x[a>>2]+12>>2];x[5120]=0;Y(f|0,a|0,0,0)|0;f=x[5120];x[5120]=0;if((f|0)==1){break a}Kg(b);a=d|e?0:a}else{a=0}Wa=c+16|0;return a|0}a=P()|0;Kg(b);R(a|0);p()}function im(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=Wa-16|0;Wa=e;a:{b:{if((a|0)!=(b|0)){g=x[4995];x[4995]=0;a=Me(a,e+12|0,d,sb());d=Ya;f=x[4995];c:{if(f){if(x[e+12>>2]!=(b|0)){break c}if((f|0)==68){break b}break a}x[4995]=g;if(x[e+12>>2]==(b|0)){break a}}}x[c>>2]=4;a=0;d=0;break a}x[c>>2]=4;if(!!a&(d|0)>=0|(d|0)>0){a=-1;d=2147483647;break a}a=0;d=-2147483648}Wa=e+16|0;Ya=d;return a|0}function Yl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;e=Wa-16|0;Wa=e;a:{b:{c:{if((a|0)!=(b|0)){g=x[4995];x[4995]=0;sb();d=Wa-16|0;Wa=d;Zd(d,a,e+12|0,1);f=ee(x[d>>2],x[d+4>>2],x[d+8>>2],x[d+12>>2]);Wa=d+16|0;a=x[4995];if(!a){break c}if(x[e+12>>2]!=(b|0)){break b}h=f;if((a|0)!=68){break a}break b}x[c>>2]=4;break a}x[4995]=g;if(x[e+12>>2]==(b|0)){break a}}x[c>>2]=4;f=h}Wa=e+16|0;return+f}function wd(a,b,c){var d=0,e=0,f=0;d=x[c+16>>2];a:{if(!d){if(ue(c)){break a}d=x[c+16>>2]}f=x[c+20>>2];if(d-f>>>0<b>>>0){return Za[x[c+36>>2]](c,a,b)|0}b:{if(x[c+80>>2]<0){d=0;break b}e=b;while(1){d=e;if(!d){d=0;break b}e=d-1|0;if(y[e+a|0]!=10){continue}break}e=Za[x[c+36>>2]](c,a,d)|0;if(e>>>0<d>>>0){break a}a=a+d|0;b=b-d|0;f=x[c+20>>2]}ub(f,a,b);x[c+20>>2]=x[c+20>>2]+b;e=b+d|0}return e}function zm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=Wa-16|0;Wa=g;e=x[b>>2];a:{if(!e|!c){break a}d=a?d:0;while(1){f=qd(d>>>0<4?g+12|0:a,x[e>>2],0);if((f|0)==-1){h=-1;break a}if(a){if(d>>>0<=3){if(d>>>0<f>>>0){break a}ub(a,g+12|0,f)}d=d-f|0;a=a+f|0}else{a=0}if(!x[e>>2]){e=0;break a}h=f+h|0;e=e+4|0;c=c-1|0;if(c){continue}break}}if(a){x[b>>2]=e}Wa=g+16|0;return h|0}function Uh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=Wa-16|0;Wa=f;d=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:1;if(y[a+11|0]>>>7|0){e=x[a+4>>2]}else{e=y[a+11|0]&127}a:{if(d-e>>>0>=c>>>0){if(!c){break a}if(y[a+11|0]>>>7|0){d=x[a>>2]}else{d=a}jc(d+(e<<2)|0,b,c);b=c+e|0;nc(a,b);x[f+12>>2]=0;x[d+(b<<2)>>2]=x[f+12>>2];break a}He(a,d,(c+e|0)-d|0,e,e,0,c,b)}Wa=f+16|0;return a|0}function we(a,b,c,d){var e=0,f=0;a:{if((d|0)!=1){break a}e=x[a+8>>2];if(!e){break a}f=b;e=e-x[a+4>>2]|0;b=b-e|0;c=c-((e>>31)+(e>>>0>f>>>0)|0)|0}b:{if(x[a+20>>2]!=x[a+28>>2]){Za[x[a+36>>2]](a,0,0)|0;if(!x[a+20>>2]){break b}}x[a+28>>2]=0;x[a+16>>2]=0;x[a+20>>2]=0;Za[x[a+40>>2]](a,b,c,d)|0;if((Ya|0)<0){break b}x[a+4>>2]=0;x[a+8>>2]=0;x[a>>2]=x[a>>2]&-17;return 0}return-1}function kd(a,b,c){var d=0,e=0;if(c&2048){v[a|0]=43;a=a+1|0}if(c&1024){v[a|0]=35;a=a+1|0}d=c&260;if((d|0)!=260){v[a|0]=46;v[a+1|0]=42;a=a+2|0}c=c&16384;while(1){e=y[b|0];if(e){v[a|0]=e;a=a+1|0;b=b+1|0;continue}break}a:{b:{if((d|0)!=256){if((d|0)!=4){break b}b=c?70:102;break a}b=c?69:101;break a}b=c?65:97;if((d|0)==260){break a}b=c?71:103}v[a|0]=b;return(d|0)!=260}function Id(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=Wa-16|0;Wa=f;d=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;if(y[a+11|0]>>>7|0){e=x[a+4>>2]}else{e=y[a+11|0]&127}a:{if(d-e>>>0>=c>>>0){if(!c){break a}if(y[a+11|0]>>>7|0){d=x[a>>2]}else{d=a}Hb(d+e|0,b,c);b=c+e|0;nc(a,b);v[f+15|0]=0;v[b+d|0]=y[f+15|0];break a}bd(a,d,(c+e|0)-d|0,e,e,0,c,b)}Wa=f+16|0;return a|0}function Gf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;e=Wa-16|0;Wa=e;f=x[a+4>>2];d=x[c>>2]-x[a>>2]|0;a:{if(d>>>0<2147483647){d=d<<1;break a}d=-1}d=d?d:4;h=x[b>>2];i=x[a>>2];g=dd((f|0)!=198?x[a>>2]:0,d);if(g){if((f|0)!=198){x[a>>2]=0}x[e+4>>2]=132;f=qb(e+8|0,g,e+4|0);Df(a,f);eb(f);x[b>>2]=x[a>>2]+(h-i|0);x[c>>2]=x[a>>2]+(d&-4);Wa=e+16|0;return}Ld();p()}function yf(a,b,c){var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;d=Wa-32|0;Wa=d;Ue(d+24|0,a,b);ke(d+16|0,x[d+24>>2],x[d+28>>2],c);g=x[d+16>>2];b=Wa-16|0;Wa=b;x[b+8>>2]=a;a=Wa-16|0;Wa=a;f=b+8|0;x[a+8>>2]=x[f>>2];Wa=a+16|0;a=Qd(f,g-x[a+8>>2]>>2);Wa=b+16|0;x[d+8>>2]=a;x[d+4>>2]=(x[d+20>>2]-c|0)+c;x[e+8>>2]=x[d+8>>2];x[e+12>>2]=x[d+4>>2];Wa=d+32|0;Wa=e+16|0;return x[e+12>>2]}function zf(a,b,c){var d=0,e=0,f=0,g=0;e=Wa-16|0;Wa=e;d=Wa-32|0;Wa=d;Ue(d+24|0,a,b);ke(d+16|0,x[d+24>>2],x[d+28>>2],c);g=x[d+16>>2];b=Wa-16|0;Wa=b;x[b+8>>2]=a;a=Wa-16|0;Wa=a;f=b+8|0;x[a+8>>2]=x[f>>2];Wa=a+16|0;a=Rd(f,g-x[a+8>>2]|0);Wa=b+16|0;x[d+8>>2]=a;x[d+4>>2]=(x[d+20>>2]-c|0)+c;x[e+8>>2]=x[d+8>>2];x[e+12>>2]=x[d+4>>2];Wa=d+32|0;Wa=e+16|0;return x[e+12>>2]}function xh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(tb(a,x[b+8>>2],e)){if(!(x[b+28>>2]==1|x[b+4>>2]!=(c|0))){x[b+28>>2]=d}return}a:{if(!tb(a,x[b>>2],e)){break a}if(!(x[b+16>>2]!=(c|0)&x[b+20>>2]!=(c|0))){if((d|0)!=1){break a}x[b+32>>2]=1;return}x[b+20>>2]=c;x[b+32>>2]=d;x[b+40>>2]=x[b+40>>2]+1;if(!(x[b+36>>2]!=1|x[b+24>>2]!=2)){v[b+54|0]=1}x[b+44>>2]=4}}function Qk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;e=Wa-16|0;Wa=e;f=x[a+4>>2];d=x[c>>2]-x[a>>2]|0;a:{if(d>>>0<2147483647){d=d<<1;break a}d=-1}d=d?d:1;h=x[b>>2];i=x[a>>2];g=dd((f|0)!=198?x[a>>2]:0,d);if(g){if((f|0)!=198){x[a>>2]=0}x[e+4>>2]=132;f=qb(e+8|0,g,e+4|0);Df(a,f);eb(f);x[b>>2]=x[a>>2]+(h-i|0);x[c>>2]=d+x[a>>2];Wa=e+16|0;return}Ld();p()}function di(a,b){a=a|0;b=b|0;var c=0,d=0;c=Wa-16|0;Wa=c;x[c>>2]=x[a+8>>2];d=x[a+8>>2];x[c+8>>2]=a+8;x[c+4>>2]=(b<<2)+d;b=x[c>>2];a:{while(1){if(x[c+4>>2]==(b|0)){break a}a=x[c>>2];x[5120]=0;x[a>>2]=0;a=x[5120];x[5120]=0;if((a|0)!=1){b=x[c>>2]+4|0;x[c>>2]=b;continue}break}a=P()|0;x[x[c+8>>2]>>2]=x[c>>2];R(a|0);p()}x[x[c+8>>2]>>2]=x[c>>2];Wa=c+16|0}function Fm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=x[a+84>>2];f=x[e+4>>2];g=x[a+28>>2];d=x[a+20>>2]-g|0;d=d>>>0>f>>>0?f:d;if(d){ub(x[e>>2],g,d);x[e>>2]=d+x[e>>2];f=x[e+4>>2]-d|0;x[e+4>>2]=f}d=x[e>>2];f=c>>>0>f>>>0?f:c;if(f){ub(d,b,f);d=f+x[e>>2]|0;x[e>>2]=d;x[e+4>>2]=x[e+4>>2]-f}v[d|0]=0;b=x[a+44>>2];x[a+28>>2]=b;x[a+20>>2]=b;return c|0}function Cd(a,b,c,d){v[a+53|0]=1;a:{if(x[a+4>>2]!=(c|0)){break a}v[a+52|0]=1;c=x[a+16>>2];b:{if(!c){x[a+36>>2]=1;x[a+24>>2]=d;x[a+16>>2]=b;if((d|0)!=1){break a}if(x[a+48>>2]==1){break b}break a}if((b|0)==(c|0)){c=x[a+24>>2];if((c|0)==2){x[a+24>>2]=d;c=d}if(x[a+48>>2]!=1){break a}if((c|0)==1){break b}break a}x[a+36>>2]=x[a+36>>2]+1}v[a+54|0]=1}}function ie(a,b){var c=0,d=0;b=!x[a+24>>2]|b;x[a+16>>2]=b;if(b&x[a+20>>2]){c=Wa-16|0;Wa=c;b=ba(16)|0;a=Wa-16|0;Wa=a;if(!y[20556]){v[20556]=1}x[a+12>>2]=19908;x[a+8>>2]=1;d=x[a+12>>2];c=c+8|0;x[c>>2]=x[a+8>>2];x[c+4>>2]=d;Wa=a+16|0;x[5120]=0;Y(111,b|0,1404,c|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){ca(b|0,4748,112);p()}a=P()|0;ja(b|0);R(a|0);p()}}function fm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Wa-16|0;Wa=d;Za[x[a>>2]](d+8|0,b,c);x[5120]=0;aa(28,x[d+8>>2]);a=x[5120];x[5120]=0;a:{if((a|0)!=1){x[5120]=0;a=x[d+8>>2];aa(29,a|0);b=x[5120];x[5120]=0;if((b|0)==1){break a}Wa=d+16|0;return a|0}a=P()|0;x[5120]=0;aa(29,x[d+8>>2]);b=x[5120];x[5120]=0;if((b|0)==1){break a}R(a|0);p()}V(0)|0;lb();p()}function Fi(a){a=a|0;if(y[21040]){return x[5259]}if(!y[21560]){v[21560]=1}ib(21392,15076);ib(21404,15104);ib(21416,15132);ib(21428,15164);ib(21440,15204);ib(21452,15240);ib(21464,15268);ib(21476,15304);ib(21488,15320);ib(21500,15336);ib(21512,15352);ib(21524,15368);ib(21536,15384);ib(21548,15400);v[21040]=1;x[5259]=21392;return 21392}function Eh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=Wa+-64|0;Wa=e;d=1;a:{if(tb(a,b,0)){break a}d=0;if(!b){break a}b=Lb(b,18684);d=0;if(!b){break a}d=e+8|0;Mb(d|4,0,52);x[e+56>>2]=1;x[e+20>>2]=-1;x[e+16>>2]=a;x[e+8>>2]=b;Za[x[x[b>>2]+28>>2]](b,d,x[c>>2],1);a=x[e+32>>2];if((a|0)==1){x[c>>2]=x[e+24>>2]}d=(a|0)==1}Wa=e- -64|0;return d|0}function tf(a,b){var c=0,d=0;c=Wa-16|0;Wa=c;x[c>>2]=a;a=x[a+4>>2];x[c+4>>2]=a;x[c+8>>2]=a+(b<<2);b=x[c+4>>2];a=x[c+8>>2];a:{while(1){if((a|0)==(b|0)){break a}x[5120]=0;x[b>>2]=0;d=x[5120];x[5120]=0;if((d|0)!=1){b=b+4|0;x[c+4>>2]=b;continue}break}a=P()|0;x[x[c>>2]+4>>2]=x[c+4>>2];R(a|0);p()}x[x[c>>2]+4>>2]=x[c+4>>2];Wa=c+16|0}function ib(a,b){var c=0,d=0,e=0,f=0;a:{e=hg(b);c=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:1;if(e>>>0<=c>>>0){if(y[a+11|0]>>>7|0){c=x[a>>2]}else{c=a}d=e<<2;sc(c,b,d);b=Wa-16|0;Wa=b;nc(a,e);x[b+12>>2]=0;x[c+d>>2]=x[b+12>>2];Wa=b+16|0;break a}f=e-c|0;if(y[a+11|0]>>>7|0){d=x[a+4>>2]}else{d=y[a+11|0]&127}He(a,c,f,d,0,d,e,b)}}function zn(a,b){a=a|0;b=b|0;var c=0,d=0;a:{c=x[a+4>>2];if((c|0)!=x[a+8>>2]){b:{if(v[b+11|0]>=0){d=x[b+4>>2];x[c>>2]=x[b>>2];x[c+4>>2]=d;x[c+8>>2]=x[b+8>>2];break b}d=x[b+4>>2];b=x[b>>2];x[5120]=0;U(4,c|0,b|0,d|0);b=x[5120];x[5120]=0;if((b|0)==1){break a}}x[a+4>>2]=c+12;return}se(a,b);return}b=P()|0;x[a+4>>2]=c;R(b|0);p()}function ve(a,b,c){var d=0,e=0,f=0;d=x[c+72>>2];x[c+72>>2]=d-1|d;d=x[c+4>>2];e=x[c+8>>2];if((d|0)==(e|0)){d=b}else{f=d;d=e-d|0;d=b>>>0>d>>>0?d:b;ub(a,f,d);x[c+4>>2]=d+x[c+4>>2];a=a+d|0;d=b-d|0}if(d){while(1){a:{if(!xd(c)){e=Za[x[c+32>>2]](c,a,d)|0;if(e){break a}}return b-d|0}a=a+e|0;d=d-e|0;if(d){continue}break}}return b}function Rc(a){a=a|0;var b=0;x[a>>2]=4160;x[5120]=0;Q(72,a|0)|0;b=x[5120];x[5120]=0;a:{if((b|0)==1){ha(V(0)|0)|0;x[5120]=0;X(47);b=x[5120];x[5120]=0;if((b|0)==1){break a}}b:{if(!y[a+96|0]){break b}b=x[a+32>>2];if(!b){break b}db(b)}c:{if(!y[a+97|0]){break c}b=x[a+56>>2];if(!b){break c}db(b)}return Tc(a)|0}V(0)|0;lb();p()}function Hi(a){a=a|0;if(y[21032]){return x[5257]}if(!y[21384]){v[21384]=1}jb(21216,1091);jb(21228,1098);jb(21240,1064);jb(21252,1072);jb(21264,1055);jb(21276,1105);jb(21288,1082);jb(21300,1440);jb(21312,1529);jb(21324,1756);jb(21336,1885);jb(21348,1186);jb(21360,1594);jb(21372,1257);v[21032]=1;x[5257]=21216;return 21216}function Xi(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0;f=Wa-16|0;Wa=f;x[e>>2]=c;a=Od(f+12|0,0,b,x[a+8>>2]);b=2;a:{if(a+1>>>0<2){break a}c=a-1|0;b=1;if(c>>>0>d-x[e>>2]>>>0){break a}d=f+12|0;while(1){if(c){a=y[d|0];b=x[e>>2];x[e>>2]=b+1;v[b|0]=a;c=c-1|0;d=d+1|0;continue}break}b=0}a=b;Wa=f+16|0;return a|0}function Hd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;e=Wa-16|0;Wa=e;x[e+12>>2]=d;if(y[b+11|0]>>>7|0){d=x[b+4>>2]}else{d=y[b+11|0]&127}if(d>>>0<c>>>0){Ne();p()}if(y[b+11|0]>>>7|0){b=x[b>>2]}x[e+4>>2]=d-c;d=Wa-16|0;Wa=d;Wa=d+16|0;d=b+c|0;b=e+4|0;c=e+12|0;Ie(a,d,x[(A[b>>2]<A[c>>2]?b:c)>>2]);Wa=e+16|0;return a|0}function ge(a){var b=0;b=1;a:{if((a|0)>=1024){b=898846567431158e293;if(a>>>0<2047){a=a-1023|0;break a}b=O;a=((a|0)>=3069?3069:a)-2046|0;break a}if((a|0)>-1023){break a}b=2004168360008973e-307;if(a>>>0>4294965304){a=a+969|0;break a}b=0;a=((a|0)<=-2960?-2960:a)+1938|0}l(0,0);l(1,a+1023<<20);return b*+n()}function fc(a,b,c,d){var e=0;a:{if(!(d&2048)){break a}e=d&74;if(!c|((e|0)==8|(e|0)==64)){break a}v[a|0]=43;a=a+1|0}if(d&512){v[a|0]=35;a=a+1|0}while(1){e=y[b|0];if(e){v[a|0]=e;a=a+1|0;b=b+1|0;continue}break}e=d&74;b=111;b:{if((e|0)==64){break b}b=d&16384?88:120;if((e|0)==8){break b}b=c?100:117}v[a|0]=b}function bl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-32|0;Wa=g;h=x[2347];x[g+24>>2]=x[2346];x[g+28>>2]=h;h=x[2345];x[g+16>>2]=x[2344];x[g+20>>2]=h;h=x[2343];x[g+8>>2]=x[2342];x[g+12>>2]=h;h=x[2341];x[g>>2]=x[2340];x[g+4>>2]=h;h=a;a=g+32|0;b=$b(h,b,c,d,e,f,g,a);Wa=a;return b|0}function al(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=a;h=b;a=Za[x[x[a+8>>2]+20>>2]](a+8|0)|0;a:{if(y[a+11|0]>>>7|0){b=x[a>>2];break a}b=a}i=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}return $b(g,h,c,d,e,f,i,b+(a<<2)|0)|0}function Zl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;a=x[a>>2]+D(b,12)|0;if((a|0)!=(c|0)){d=y[c+11|0];b=d<<24>>24;if(v[a+11|0]>=0){if((b|0)>=0){b=x[c+4>>2];x[a>>2]=x[c>>2];x[a+4>>2]=b;x[a+8>>2]=x[c+8>>2];return 1}$c(a,x[c>>2],x[c+4>>2]);return 1}e=a;a=(b|0)<0;ad(e,a?x[c>>2]:c,a?x[c+4>>2]:d)}return 1}function Kb(a,b){var c=0,d=0,e=0,f=0;d=Wa-16|0;Wa=d;a:{if(!b){b=0;break a}c=b>>31;e=(c^b)-c|0;c=G(e);Eb(d,e,0,0,0,c+81|0);e=0+x[d+8>>2]|0;c=(x[d+12>>2]^65536)+(16414-c<<16)|0;c=e>>>0<f>>>0?c+1|0:c;f=b&-2147483648|c;c=x[d+4>>2];b=x[d>>2]}x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=e;x[a+12>>2]=f;Wa=d+16|0}function hl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=a;h=b;a=Za[x[x[a+8>>2]+20>>2]](a+8|0)|0;a:{if(y[a+11|0]>>>7|0){b=x[a>>2];break a}b=a}i=b;if(y[a+11|0]>>>7|0){b=x[a>>2]}else{b=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}return ac(g,h,c,d,e,f,i,b+a|0)|0}function Zd(a,b,c,d){var e=0,f=0,g=0,h=0;e=Wa-160|0;Wa=e;x[e+60>>2]=b;x[e+20>>2]=b;x[e+24>>2]=-1;f=e+16|0;Sb(f,0,0);vg(e,f,d,1);d=x[e+8>>2];g=x[e+12>>2];f=x[e>>2];h=x[e+4>>2];if(c){x[c>>2]=((x[e+20>>2]+x[e+136>>2]|0)-x[e+60>>2]|0)+b}x[a+8>>2]=d;x[a+12>>2]=g;x[a>>2]=f;x[a+4>>2]=h;Wa=e+160|0}function uk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=Wa-16|0;Wa=d;x[a>>2]=0;x[a+4>>2]=0;x[d+12>>2]=0;x[a+8>>2]=0;v[a+136|0]=0;if(b){c=Wa-16|0;Wa=c;if(Se()>>>0<b>>>0){oc();p()}Re(c+8|0,a+16|0,b);e=x[c+8>>2];x[a+4>>2]=e;x[a>>2]=e;x[a+8>>2]=e+(x[c+12>>2]<<2);Wa=c+16|0;tf(a,b)}Wa=d+16|0;return a|0}function rd(a,b){var c=0,d=0,e=0;c=24;a:{b:{if((a|b)&3){break b}while(1){if(x[a>>2]!=x[b>>2]){break b}b=b+4|0;a=a+4|0;c=c-4|0;if(c>>>0>3){continue}break}if(!c){break a}}while(1){d=y[a|0];e=y[b|0];if((d|0)==(e|0)){b=b+1|0;a=a+1|0;c=c-1|0;if(c){continue}break a}break}return d-e|0}return 0}function mm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=Wa-16|0;Wa=e;d=x[b+4>>2];b=x[b>>2];a:{if((d-b|0)/12>>>0>c>>>0){b=b+D(c,12)|0;d=y[b+11|0];c=d<<24>>24<0;d=c?x[b+4>>2]:d;f=ob(d+4|0);x[f>>2]=d;ub(f+4|0,c?x[b>>2]:b,d);x[e+8>>2]=f;x[a>>2]=Va(2828,e+8|0);break a}x[a>>2]=1}Wa=e+16|0}function Lc(a,b){a=a|0;b=b|0;var c=0,d=0;c=Wa-16|0;Wa=c;x[c+12>>2]=a;a:{if((a|0)==(b|0)){break a}while(1){b=b-4|0;x[c+8>>2]=b;if(a>>>0>=b>>>0){break a}a=x[c+12>>2];b=x[a>>2];d=a;a=x[c+8>>2];x[d>>2]=x[a>>2];x[a>>2]=b;a=x[c+12>>2]+4|0;x[c+12>>2]=a;b=x[c+8>>2];continue}}Wa=c+16|0}function dc(a,b){a=a|0;b=b|0;var c=0,d=0;c=Wa-16|0;Wa=c;x[c+12>>2]=a;a:{if((a|0)==(b|0)){break a}while(1){b=b-1|0;x[c+8>>2]=b;if(a>>>0>=b>>>0){break a}a=x[c+12>>2];b=y[a|0];d=a;a=x[c+8>>2];v[d|0]=y[a|0];v[a|0]=b;a=x[c+12>>2]+1|0;x[c+12>>2]=a;b=x[c+8>>2];continue}}Wa=c+16|0}function vm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=(e-d|0)+b|0;a:{while(1){if((d|0)!=(e|0)){a=-1;if((b|0)==(c|0)){break a}f=v[b|0];g=v[d|0];if((f|0)<(g|0)){break a}if((f|0)>(g|0)){return 1}else{d=d+1|0;b=b+1|0;continue}}break}a=(c|0)!=(h|0)}return a|0}function pf(a){a=a|0;var b=0,c=0,d=0,e=0;x[a>>2]=9400;b=a+8|0;while(1){if(x[b+4>>2]-x[b>>2]>>2>>>0>c>>>0){if(x[x[b>>2]+(c<<2)>>2]){d=x[x[b>>2]+(c<<2)>>2];e=x[d+4>>2]-1|0;x[d+4>>2]=e;if((e|0)==-1){Za[x[x[d>>2]+8>>2]](d)}}c=c+1|0;continue}break}cb(a+152|0);uf(b);return a|0}function te(a){var b=0,c=0,d=0;b=x[a+40>>2];c=Za[b|0](a,0,0,y[a|0]&128?x[a+20>>2]==x[a+28>>2]?1:2:1)|0;b=Ya;a:{if((b|0)<0){break a}d=x[a+8>>2];if(d){a=a+4|0}else{d=x[a+28>>2];if(!d){break a}a=a+20|0}a=x[a>>2]-d|0;c=a+c|0;b=(a>>31)+b|0;b=a>>>0>c>>>0?b+1|0:b}Ya=b;return c}function Wi(a){a=a|0;var b=0,c=0;b=x[a+8>>2];x[5120]=0;b=W(281,0,0,4,b|0)|0;c=x[5120];x[5120]=0;a:{if((c|0)==1){break a}if(b){a=-1}else{a=x[a+8>>2];if(!a){return 1}x[5120]=0;a=Q(282,a|0)|0;b=x[5120];x[5120]=0;if((b|0)==1){break a}a=(a|0)==1}return a|0}V(0)|0;lb();p()}function he(a){a=a|0;var b=0,c=0;x[a>>2]=4684;x[5120]=0;S(110,a|0,0);b=x[5120];x[5120]=0;if((b|0)!=1){b=x[a+28>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}db(x[a+32>>2]);db(x[a+36>>2]);db(x[a+48>>2]);db(x[a+60>>2]);return a|0}V(0)|0;lb();p()}function jb(a,b){var c=0,d=0,e=0,f=0;a:{d=_b(b);c=y[a+11|0]>>>7|0?(x[a+8>>2]&2147483647)-1|0:10;if(d>>>0<=c>>>0){if(y[a+11|0]>>>7|0){c=x[a>>2]}else{c=a}sc(c,b,d);We(a,c,d);break a}e=a;f=d-c|0;if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}bd(e,c,f,a,0,a,d,b)}}function Bh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;if(tb(a,x[b+8>>2],0)){Dd(b,c,d);return}e=x[a+12>>2];f=a+16|0;Be(f,b,c,d);a=a+24|0;e=(e<<3)+f|0;a:{if(a>>>0>=e>>>0){break a}while(1){Be(a,b,c,d);if(y[b+54|0]){break a}a=a+8|0;if(e>>>0>a>>>0){continue}break}}}function fn(a,b){a=a|0;b=b|0;a:{if(!x[a+64>>2]|A[a+8>>2]>=A[a+12>>2]){break a}if((b|0)==-1){x[a+12>>2]=x[a+12>>2]-1;return((b|0)!=-1?b:0)|0}if(!(y[a+88|0]&16)&y[x[a+12>>2]-1|0]!=(b&255)){break a}x[a+12>>2]=x[a+12>>2]-1;v[x[a+12>>2]]=b<<24>>24;return b|0}return-1}function Dc(a,b){var c=0,d=0,e=0,f=0;c=Wa-16|0;Wa=c;a:{if(!b){b=0;break a}d=b;b=G(b);Eb(c,d,0,0,0,b+81|0);d=0+x[c+8>>2]|0;b=(x[c+12>>2]^65536)+(16414-b<<16)|0;f=e>>>0>d>>>0?b+1|0:b;e=x[c+4>>2];b=x[c>>2]}x[a>>2]=b;x[a+4>>2]=e;x[a+8>>2]=d;x[a+12>>2]=f;Wa=c+16|0}function Cf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Wa-32|0;Wa=d;x[d+16>>2]=b;x[d+24>>2]=a;x[d+8>>2]=c;while(1){a=x[d+24>>2]!=x[d+16>>2];if(!(!a|x[x[d+24>>2]>>2]!=x[x[d+8>>2]>>2])){x[d+24>>2]=x[d+24>>2]+4;x[d+8>>2]=x[d+8>>2]+4;continue}break}Wa=d+32|0;return!a|0}function sm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;a:{while(1){if((d|0)!=(e|0)){a=-1;if((b|0)==(c|0)){break a}f=x[b>>2];g=x[d>>2];if((f|0)<(g|0)){break a}if((f|0)>(g|0)){return 1}else{d=d+4|0;b=b+4|0;continue}}break}a=(b|0)!=(c|0)}return a|0}function xd(a){var b=0,c=0;b=x[a+72>>2];x[a+72>>2]=b-1|b;if(x[a+20>>2]!=x[a+28>>2]){Za[x[a+36>>2]](a,0,0)|0}x[a+28>>2]=0;x[a+16>>2]=0;x[a+20>>2]=0;b=x[a>>2];if(b&4){x[a>>2]=b|32;return-1}c=x[a+44>>2]+x[a+48>>2]|0;x[a+8>>2]=c;x[a+4>>2]=c;return b<<27>>31}function Hf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Wa-32|0;Wa=d;x[d+16>>2]=b;x[d+24>>2]=a;x[d+8>>2]=c;while(1){a=x[d+24>>2]!=x[d+16>>2];if(!(!a|y[x[d+24>>2]]!=y[x[d+8>>2]])){x[d+24>>2]=x[d+24>>2]+1;x[d+8>>2]=x[d+8>>2]+1;continue}break}Wa=d+32|0;return!a|0}function vf(a){var b=0,c=0,d=0;c=x[a>>2];if(c){d=c;b=x[a+4>>2];if((c|0)!=(b|0)){while(1){if(v[b-1|0]<0){db(x[b-12>>2])}if(v[b-13|0]<0){db(x[b-24>>2])}if(v[b-25|0]<0){db(x[b-36>>2])}b=b-40|0;if((c|0)!=(b|0)){continue}break}d=x[a>>2]}x[a+4>>2]=c;db(d)}}function _b(a){var b=0,c=0,d=0;b=a;a:{if(b&3){while(1){if(!y[b|0]){break a}b=b+1|0;if(b&3){continue}break}}while(1){c=b;b=b+4|0;d=x[c>>2];if(!((d^-1)&d-16843009&-2139062144)){continue}break}while(1){b=c;c=b+1|0;if(y[b|0]){continue}break}}return b-a|0}function bc(a,b,c){var d=0,e=0;if(y[a+11|0]>>>7|0){e=x[a>>2]}else{e=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}d=Wa-16|0;Wa=d;v[d+15|0]=b;b=-1;if(a>>>0>c>>>0){a=a-c|0;if(a){a=de(c+e|0,y[d+15|0],a)}else{a=0}b=a?a-e|0:-1}Wa=d+16|0;return b}function Sb(a,b,c){var d=0,e=0,f=0,g=0;x[a+112>>2]=b;x[a+116>>2]=c;e=x[a+4>>2];d=x[a+44>>2]-e|0;x[a+120>>2]=d;x[a+124>>2]=d>>31;d=x[a+8>>2];a:{if(!(b|c)){break a}f=d-e|0;g=f>>31;if((c|0)>=(g|0)&b>>>0>=f>>>0|(c|0)>(g|0)){break a}d=b+e|0}x[a+104>>2]=d}function Ig(a,b,c){var d=0,e=0;e=Wa-16|0;Wa=e;d=Wa-32|0;Wa=d;le(d+24|0,a,b);ke(d+16|0,x[d+24>>2],x[d+28>>2],c);x[d+12>>2]=(x[d+16>>2]-a|0)+a;x[d+8>>2]=(x[d+20>>2]-c|0)+c;x[e+8>>2]=x[d+12>>2];x[e+12>>2]=x[d+8>>2];Wa=d+32|0;Wa=e+16|0;return x[e+12>>2]}function Ml(a){a=a|0;var b=0,c=0;a=x[4987];if(a){c=a;b=x[4988];if((b|0)!=(a|0)){while(1){if(v[b-1|0]<0){db(x[b-12>>2])}if(v[b-13|0]<0){db(x[b-24>>2])}if(v[b-25|0]<0){db(x[b-36>>2])}b=b-40|0;if((b|0)!=(a|0)){continue}break}c=x[4987]}x[4988]=a;db(c)}}function og(a,b){var c=0,d=0,e=0;o(+a);d=j(1)|0;e=j(0)|0;c=d>>>20&2047;if((c|0)!=2047){if(!c){if(a==0){c=0}else{a=og(a*0x10000000000000000,b);c=x[b>>2]+-64|0}x[b>>2]=c;return a}x[b>>2]=c-1022;l(0,e|0);l(1,d&-2146435073|1071644672);a=+n()}return a}function Vb(a,b){var c=0,d=0;c=Wa-16|0;Wa=c;if(y[a+11|0]>>>7|0){ed(x[a>>2],x[a+8>>2]&2147483647)}x[a+8>>2]=x[b+8>>2];d=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=d;v[b+11|0]=y[b+11|0]&128;v[b+11|0]=y[b+11|0]&127;x[c+12>>2]=0;x[b>>2]=x[c+12>>2];Wa=c+16|0}function lb(){var a=0;a=x[4978];x[5120]=0;X(a|0);a=x[5120];x[5120]=0;a:{if((a|0)!=1){x[5120]=0;S(566,1845,0);a=x[5120];x[5120]=0;if((a|0)!=1){break a}}ha(V(0)|0)|0;x[5120]=0;S(566,1463,0);a=x[5120];x[5120]=0;if((a|0)!=1){break a}V(0)|0;lb()}p()}function Fb(a,b){var c=0,d=0;c=Wa-16|0;Wa=c;if(y[a+11|0]>>>7|0){td(x[a>>2],x[a+8>>2]&2147483647)}x[a+8>>2]=x[b+8>>2];d=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=d;v[b+11|0]=y[b+11|0]&128;v[b+11|0]=y[b+11|0]&127;v[c+15|0]=0;v[b|0]=y[c+15|0];Wa=c+16|0}function wf(a){a=a|0;var b=0,c=0,d=0;x[a>>2]=10504;b=x[a+8>>2];x[5120]=0;c=Z(156)|0;d=x[5120];x[5120]=0;a:{if((d|0)==1){break a}if((b|0)!=(c|0)){b=x[a+8>>2];x[5120]=0;ae(b);b=x[5120];x[5120]=0;if((b|0)==1){break a}}return a|0}V(0)|0;lb();p()}function Cc(a,b,c){var d=0,e=0;if(b){while(1){c=c-1|0;e=a;a=Hn(a,b,10);d=Ya;v[c|0]=e-Gn(a,d,10,0)|48;e=b>>>0>9;b=d;if(e){continue}break}}if(a){while(1){c=c-1|0;b=(a>>>0)/10|0;v[c|0]=a-D(b,10)|48;d=a>>>0>9;a=b;if(d){continue}break}}return c}function Nd(a){a=a|0;var b=0,c=0,d=0;b=x[a+8>>2];x[5120]=0;c=Z(156)|0;d=x[5120];x[5120]=0;a:{b:{if((d|0)==1){break b}if((b|0)!=(c|0)){b=x[a+8>>2];x[5120]=0;ae(b);b=x[5120];x[5120]=0;if((b|0)==1){break b}}break a}V(0)|0;lb();p()}return a|0}function Se(){var a=0,b=0,c=0;b=Wa-16|0;Wa=b;x[b+12>>2]=1073741823;x[5120]=0;x[b+8>>2]=2147483647;a=Wa-16|0;Wa=a;Wa=a+16|0;a=b+8|0;c=b+12|0;a=A[a>>2]<A[c>>2]?a:c;c=x[5120];x[5120]=0;if((c|0)!=1){Wa=b+16|0;return x[a>>2]}V(0)|0;lb();p()}function Ib(a,b,c){c=x[c+4>>2]&176;if((c|0)==32){return b}a:{if((c|0)!=16){break a}b:{c:{c=y[a|0];switch(c-43|0){case 0:case 2:break c;default:break b}}return a+1|0}if((c|0)!=48|(b-a|0)<2|(y[a+1|0]|32)!=120){break a}a=a+2|0}return a}function wl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=b;x[e+8>>2]=d;b=Rb(e,e+12|0);x[5120]=0;a=Y(183,a|0,c|0,x[e+8>>2])|0;c=x[5120];x[5120]=0;if((c|0)!=1){xb(b);Wa=e+16|0;return a|0}a=P()|0;xb(b);R(a|0);p()}function Pe(a){var b=0,c=0;b=x[a+4>>2];a:{while(1){if((b|0)==x[a+8>>2]){break a}x[a+8>>2]=x[a+8>>2]-4;x[5120]=0;c=x[5120];x[5120]=0;if((c|0)!=1){continue}break}V(0)|0;lb();p()}if(x[a>>2]){b=x[a>>2];rf(x[a+16>>2],b,x[a+12>>2]-b>>2)}}function mg(a){var b=0,c=0,d=0;if(v[x[a>>2]]-48>>>0>=10){return 0}while(1){d=x[a>>2];c=-1;if(b>>>0<=214748364){c=v[d|0]-48|0;b=D(b,10);c=(c|0)>(b^2147483647)?-1:c+b|0}x[a>>2]=d+1;b=c;if(v[d+1|0]-48>>>0<10){continue}break}return b}function mf(a){a=a|0;var b=0;b=x[x[a+8>>2]>>2];a=x[x[a+4>>2]>>2];if((b|0)!=(a|0)){while(1){if(v[b-1|0]<0){db(x[b-12>>2])}if(v[b-13|0]<0){db(x[b-24>>2])}if(v[b-25|0]<0){db(x[b-36>>2])}b=b-40|0;if((a|0)!=(b|0)){continue}break}}}function Qg(a,b){a=a|0;b=b|0;var c=0,d=0;c=x[a>>2];a:{if(!c){break a}d=x[c+24>>2];b:{if((d|0)==x[c+28>>2]){b=Za[x[x[c>>2]+52>>2]](c,b&255)|0;break b}x[c+24>>2]=d+1;v[d|0]=b;b=b&255}if((b|0)!=-1){break a}x[a>>2]=0}return a|0}function Dm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=Wa-16|0;Wa=d;x[d+12>>2]=c;x[d+8>>2]=c;e=-1;c=pd(0,0,b,c);a:{if((c|0)<0){break a}f=a;c=c+1|0;a=ob(c);x[f>>2]=a;if(!a){break a}e=pd(a,c,b,x[d+12>>2])}Wa=d+16|0;return e|0}function ad(a,b,c){var d=0,e=0,f=0;e=Wa-16|0;Wa=e;d=x[a+8>>2]&2147483647;a:{if(d>>>0>c>>>0){d=x[a>>2];x[a+4>>2]=c;Hb(d,b,c);v[e+15|0]=0;v[c+d|0]=y[e+15|0];break a}f=a;a=x[a+4>>2];bd(f,d-1|0,(c-d|0)+1|0,a,0,a,c,b)}Wa=e+16|0}function yd(a){a=a|0;var b=0,c=0,d=0,e=0;d=Hc(a);e=Za[x[a+12>>2]](a)|0;if(!(v[a|0]&1)){b=x[a+52>>2];if(b){x[b+56>>2]=x[a+56>>2]}c=x[a+56>>2];if(c){x[c+52>>2]=b}if(x[5137]==(a|0)){x[5137]=c}db(x[a+96>>2]);db(a)}return d|e}function $c(a,b,c){var d=0,e=0;d=Wa-16|0;Wa=d;a:{if(c>>>0<=10){v[a+11|0]=y[a+11|0]&128|c;v[a+11|0]=y[a+11|0]&127;Hb(a,b,c);v[d+15|0]=0;v[a+c|0]=y[d+15|0];break a}e=a;a=y[a+11|0]&127;bd(e,10,c-10|0,a,0,a,c,b)}Wa=d+16|0}function Gn(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0;e=c>>>16|0;f=a>>>16|0;j=D(e,f);g=c&65535;h=a&65535;i=D(g,h);f=(i>>>16|0)+D(f,g)|0;e=(f&65535)+D(e,h)|0;Ya=(D(b,c)+j|0)+D(a,d)+(f>>>16)+(e>>>16)|0;return i&65535|e<<16}function Ng(a,b){a=a|0;b=b|0;var c=0,d=0;c=x[a>>2];a:{if(!c){break a}d=x[c+24>>2];b:{if((d|0)==x[c+28>>2]){b=Za[x[x[c>>2]+52>>2]](c,b)|0;break b}x[c+24>>2]=d+4;x[d>>2]=b}if((b|0)!=-1){break a}x[a>>2]=0}return a|0}function Lf(a,b,c,d,e,f){var g=0;g=Wa-16|0;Wa=g;v[g+15|0]=0;v[g+14|0]=f;v[g+13|0]=e;v[g+12|0]=37;if(f){e=y[g+13|0];v[g+13|0]=y[g+14|0];v[g+14|0]=e}x[c>>2]=(Ha(b|0,x[c>>2]-b|0,g+12|0,d|0,x[a>>2])|0)+b;Wa=g+16|0}function Dd(a,b,c){var d=0;d=x[a+16>>2];if(!d){x[a+36>>2]=1;x[a+24>>2]=c;x[a+16>>2]=b;return}a:{if((b|0)==(d|0)){if(x[a+24>>2]!=2){break a}x[a+24>>2]=c;return}v[a+54|0]=1;x[a+24>>2]=2;x[a+36>>2]=x[a+36>>2]+1}}function Mm(a){a=a|0;var b=0,c=0,d=0;if(a){b=x[a>>2];if(b){c=b;d=x[a+4>>2];if((b|0)!=(d|0)){while(1){c=d-12|0;if(v[d-1|0]<0){db(x[c>>2])}d=c;if((d|0)!=(b|0)){continue}break}c=x[a>>2]}x[a+4>>2]=b;db(c)}db(a)}}function Vi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=d;d=Rb(e+8|0,e+12|0);x[5120]=0;a=fg(a,b,c);b=x[5120];x[5120]=0;if((b|0)!=1){xb(d);Wa=e+16|0;return a|0}a=P()|0;xb(d);R(a|0);p()}function Db(a,b,c,d,e){var f=0;f=Wa-256|0;Wa=f;if(!(e&73728|(c|0)<=(d|0))){d=c-d|0;c=d>>>0<256;Mb(f,b&255,c?d:256);if(!c){while(1){zb(a,f,256);d=d-256|0;if(d>>>0>255){continue}break}}zb(a,f,d)}Wa=f+256|0}function Tf(a){var b=0,c=0,d=0;b=x[a+8>>2];d=x[a+4>>2];if((b|0)!=(d|0)){while(1){c=b-12|0;x[a+8>>2]=c;if(v[b-1|0]<0){db(x[c>>2]);c=x[a+8>>2]}b=c;if((d|0)!=(b|0)){continue}break}}a=x[a>>2];if(a){db(a)}}function _c(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Wa-16|0;Wa=d;e=Tb(d,1598);x[5120]=0;a=W(554,e|0,a|0,b|0,c|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){cb(e);Wa=d+16|0;return a|0}a=P()|0;cb(e);R(a|0);p()}function Ui(a){a=a|0;var b=0,c=0,d=0;b=Wa-16|0;Wa=b;x[b+12>>2]=a;a=Rb(b+8|0,b+12|0);x[5120]=0;c=x[x[5164]>>2]?4:1;d=x[5120];x[5120]=0;if((d|0)!=1){xb(a);Wa=b+16|0;return c|0}b=P()|0;xb(a);R(b|0);p()}function qh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Wa-16|0;Wa=e;a=Fa(x[a+60>>2],b|0,c|0,d&255,e+8|0)|0;if(a){x[4995]=a;a=-1}else{a=0}Wa=e+16|0;Ya=a?-1:x[e+12>>2];return(a?-1:x[e+8>>2])|0}function pe(a){var b=0,c=0,d=0;b=x[a>>2];if(b){c=b;d=x[a+4>>2];if((b|0)!=(d|0)){while(1){c=d-12|0;if(v[d-1|0]<0){db(x[c>>2])}d=c;if((d|0)!=(b|0)){continue}break}c=x[a>>2]}x[a+4>>2]=b;db(c)}}function ue(a){var b=0;b=x[a+72>>2];x[a+72>>2]=b-1|b;b=x[a>>2];if(b&8){x[a>>2]=b|32;return-1}x[a+4>>2]=0;x[a+8>>2]=0;b=x[a+44>>2];x[a+28>>2]=b;x[a+20>>2]=b;x[a+16>>2]=b+x[a+48>>2];return 0}function sg(a,b,c,d){a:{if(!a){break a}b:{switch(b+2|0){case 0:v[a|0]=c;return;case 1:w[a>>1]=c;return;case 2:case 3:x[a>>2]=c;return;case 5:break b;default:break a}}x[a>>2]=c;x[a+4>>2]=d}}function fe(a,b,c,d,e,f,g,h,i){var j=0;j=Wa-16|0;Wa=j;Gb(j,b,c,d,e,f,g,h,i^-2147483648);d=x[j>>2];c=x[j+4>>2];b=x[j+12>>2];x[a+8>>2]=x[j+8>>2];x[a+12>>2]=b;x[a>>2]=d;x[a+4>>2]=c;Wa=j+16|0}function Nc(a,b){var c=0,d=0;c=y[a|0];d=y[b|0];a:{if(!c|(c|0)!=(d|0)){break a}while(1){d=y[b+1|0];c=y[a+1|0];if(!c){break a}b=b+1|0;a=a+1|0;if((c|0)==(d|0)){continue}break}}return c-d|0}function Im(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=x[a+84>>2];d=c+256|0;f=de(e,0,d);d=f?f-e|0:d;c=c>>>0>d>>>0?d:c;ub(b,e,c);b=e+d|0;x[a+84>>2]=b;x[a+8>>2]=b;x[a+4>>2]=c+e;return c|0}function il(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=Wa-16|0;Wa=g;x[g+8>>2]=624576549;x[g+12>>2]=1394948685;h=a;a=g+16|0;b=ac(h,b,c,d,e,f,g+8|0,a);Wa=a;return b|0}function ff(a,b,c,d,e){var f=0;f=Wa-16|0;Wa=f;x[f+12>>2]=e;e=Rb(f+8|0,f+12|0);x[5120]=0;a=Oc(a,b,c,d);b=x[5120];x[5120]=0;if((b|0)!=1){xb(e);Wa=f+16|0;return a}a=P()|0;xb(e);R(a|0);p()}function rb(a){a=a|0;var b=0;a=a?a:1;a:{while(1){b=ob(a);if(b){break a}b=x[5702];if(b){Za[b|0]();continue}break}a=ba(4)|0;x[a>>2]=19476;x[a>>2]=19436;ca(a|0,19552,32);p()}return b|0}function $i(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a=Wa-16|0;Wa=a;x[a+12>>2]=e;x[a+8>>2]=d-c;b=Wa-16|0;Wa=b;Wa=b+16|0;Wa=a+16|0;b=a+8|0;a=a+12|0;return x[(A[b>>2]<A[a>>2]?b:a)>>2]}function Od(a,b,c,d){var e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=d;d=Rb(e+8|0,e+12|0);x[5120]=0;a=qd(a,b,c);b=x[5120];x[5120]=0;if((b|0)!=1){xb(d);Wa=e+16|0;return a}a=P()|0;xb(d);R(a|0);p()}function ec(a){var b=0,c=0;b=Wa-16|0;Wa=b;if(y[a+11|0]>>>7|0){c=x[a>>2]}else{c=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[b+8>>2]=c+(a<<2);Wa=b+16|0;return x[b+8>>2]}function wn(a,b){a=a|0;b=b|0;x[a+4>>2]=b;v[a|0]=0;if(!x[(x[x[b>>2]-12>>2]+b|0)+16>>2]){if(x[(x[x[b>>2]-12>>2]+b|0)+72>>2]){Tg(x[(x[x[b>>2]-12>>2]+b|0)+72>>2])}v[a|0]=1}return a|0}function uj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;while(1){if((b|0)!=(c|0)){a=x[b>>2];if(a>>>0<=127){a=x[(a<<2)+9472>>2]}else{a=0}x[d>>2]=a;d=d+4|0;b=b+4|0;continue}break}return c|0}function Ae(a,b){var c=0;a:{if(!b){break a}b=Lb(b,18892);if(!b|x[b+8>>2]&(x[a+8>>2]^-1)){break a}if(!tb(x[a+12>>2],x[b+12>>2],0)){break a}c=tb(x[a+16>>2],x[b+16>>2],0)}return c}function gc(a){var b=0,c=0;b=Wa-16|0;Wa=b;if(y[a+11|0]>>>7|0){c=x[a>>2]}else{c=a}if(y[a+11|0]>>>7|0){a=x[a+4>>2]}else{a=y[a+11|0]&127}x[b+8>>2]=c+a;Wa=b+16|0;return x[b+8>>2]}function Cg(a){var b=0,c=0;b=x[a>>2];if(b){c=x[b+12>>2];a:{if((c|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break a}b=x[c>>2]}if((b|0)!=-1){return!x[a>>2]}x[a>>2]=0}return 1}function uc(a){var b=0,c=0;b=x[4976];c=a+7&-8;a=b+c|0;a:{if(a>>>0<=b>>>0?c:0){break a}if(a>>>0>_a()<<16>>>0){if(!(Oa(a|0)|0)){break a}}x[4976]=a;return b}x[4995]=48;return-1}function Eg(a){var b=0,c=0;b=x[a>>2];if(b){c=x[b+12>>2];a:{if((c|0)==x[b+16>>2]){b=Za[x[x[b>>2]+36>>2]](b)|0;break a}b=y[c|0]}if((b|0)!=-1){return!x[a>>2]}x[a>>2]=0}return 1}function Zh(a,b){a=a|0;b=b|0;x[a>>2]=19476;x[a>>2]=19604;if(y[b+11|0]>>>7|0){b=x[b>>2]}x[5120]=0;T(551,a+4|0,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a|0}R(P()|0);p()}function Sd(a,b){var c=0,d=0;c=Wa-16|0;Wa=c;a:{if(!(y[b+11|0]>>>7|0)){x[a+8>>2]=x[b+8>>2];d=x[b+4>>2];x[a>>2]=x[b>>2];x[a+4>>2]=d;break a}mc(a,x[b>>2],x[b+4>>2])}Wa=c+16|0}function Qe(a,b){var c=0,d=0;c=x[a+4>>2];a:{while(1){if((b|0)==(c|0)){break a}x[5120]=0;c=c-4|0;d=x[5120];x[5120]=0;if((d|0)!=1){continue}break}V(0)|0;lb();p()}x[a+4>>2]=b}function sj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a:{while(1){if((c|0)==(d|0)){break a}a=x[c>>2];if(!(a>>>0>127|!(x[(a<<2)+9472>>2]&b))){c=c+4|0;continue}break}d=c}return d|0}function qb(a,b,c){var d=0;d=Wa-16|0;Wa=d;x[5120]=0;x[d+12>>2]=b;x[a>>2]=x[d+12>>2];x[a+4>>2]=x[c>>2];b=x[5120];x[5120]=0;if((b|0)!=1){Wa=d+16|0;return a}V(0)|0;lb();p()}function tj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;while(1){a:{if((c|0)!=(d|0)){a=x[c>>2];if(a>>>0>127|!(x[(a<<2)+9472>>2]&b)){break a}}else{c=d}return c|0}c=c+4|0;continue}}function nk(){var a=0,b=0;a:{x[5573]=0;x[5572]=16040;x[5572]=10880;x[5572]=10504;x[5120]=0;a=Z(156)|0;b=x[5120];x[5120]=0;if((b|0)!=1){x[5574]=a;break a}R(P()|0);p()}}function th(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Wa-16|0;Wa=d;x[d+12>>2]=x[c>>2];a=Za[x[x[a>>2]+16>>2]](a,b,d+12|0)|0;if(a){x[c>>2]=x[d+12>>2]}Wa=d+16|0;return a|0}function ke(a,b,c,d){var e=0,f=0;e=Wa-16|0;Wa=e;f=c-b|0;if((b|0)!=(c|0)){sc(d,b,f)}x[e+12>>2]=b+f;x[e+8>>2]=d+f;x[a>>2]=x[e+12>>2];x[a+4>>2]=x[e+8>>2];Wa=e+16|0}function Be(a,b,c,d){var e=0,f=0;e=x[a+4>>2];f=x[a>>2];a=0;a:{if(!c){break a}a=e>>8;if(!(e&1)){break a}a=x[a+x[c>>2]>>2]}Za[x[x[f>>2]+28>>2]](f,b,a+c|0,e&2?d:2)}function Le(a,b){x[a>>2]=19476;x[a>>2]=19584;if(y[b+11|0]>>>7|0){b=x[b>>2]}x[5120]=0;T(551,a+4|0,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a}R(P()|0);p()}function qj(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if((b|0)!=(c|0)){a=x[b>>2];if(a>>>0<=127){a=x[hd()+(x[b>>2]<<2)>>2]}x[b>>2]=a;b=b+4|0;continue}break}return c|0}function pm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=0;while(1){if((b|0)!=(c|0)){a=x[b>>2]+(a<<4)|0;d=a&-268435456;a=(d|d>>>24)^a;b=b+4|0;continue}break}return a|0}function oj(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if((b|0)!=(c|0)){a=x[b>>2];if(a>>>0<=127){a=x[gd()+(x[b>>2]<<2)>>2]}x[b>>2]=a;b=b+4|0;continue}break}return c|0}function tm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=0;while(1){if((b|0)!=(c|0)){a=v[b|0]+(a<<4)|0;d=a&-268435456;a=(d|d>>>24)^a;b=b+1|0;continue}break}return a|0}function Kj(){var a=0;a:{x[5631]=0;x[5630]=16040;x[5630]=10880;x[5120]=0;Q(270,22528)|0;a=x[5120];x[5120]=0;if((a|0)!=1){x[5630]=13440;break a}R(P()|0);p()}}function Ij(){var a=0;a:{x[5635]=0;x[5634]=16040;x[5634]=10880;x[5120]=0;Q(270,22544)|0;a=x[5120];x[5120]=0;if((a|0)!=1){x[5634]=13596;break a}R(P()|0);p()}}function Tl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=b;x[e+8>>2]=d;b=Rb(e,e+12|0);a=rg(a,c,x[e+8>>2]);xb(b);Wa=e+16|0;return a|0}function Kh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Wa-16|0;Wa=d;e=d+8|0;Za[x[x[a>>2]+12>>2]](e,a,b);Wa=d+16|0;return x[e>>2]==x[c>>2]&x[e+4>>2]==x[c+4>>2]}function fb(a){var b=0,c=0;b=Wa-16|0;Wa=b;x[5120]=0;c=x[5120];x[5120]=0;if((c|0)!=1){x[a>>2]=0;x[a+4>>2]=0;x[a+8>>2]=0;Wa=b+16|0;return a}V(0)|0;lb();p()}function Kf(a){a=a|0;var b=0,c=0;b=ba(8)|0;x[5120]=0;a=T(195,b|0,a|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){ca(a|0,19824,196);p()}a=P()|0;ja(b|0);R(a|0);p()}function vb(a,b){var c=0;c=x[a>>2];x[a>>2]=b;a:{if(c){a=x[a+4>>2];x[5120]=0;aa(a|0,c|0);a=x[5120];x[5120]=0;if((a|0)==1){break a}}return}V(0)|0;lb();p()}function sd(a,b){if(b){sd(a,x[b>>2]);sd(a,x[b+4>>2]);if(v[b+59|0]<0){db(x[b+48>>2])}if(v[b+47|0]<0){db(x[b+36>>2])}if(v[b+35|0]<0){db(x[b+24>>2])}db(b)}}function hj(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if((b|0)!=(c|0)){a=v[b|0];if((a|0)>=0){a=x[hd()+(v[b|0]<<2)>>2]}v[b|0]=a;b=b+1|0;continue}break}return c|0}function dj(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if((b|0)!=(c|0)){a=v[b|0];if((a|0)>=0){a=x[gd()+(v[b|0]<<2)>>2]}v[b|0]=a;b=b+1|0;continue}break}return c|0}function Ph(a){a=a|0;var b=0,c=0;b=ba(8)|0;x[5120]=0;a=T(557,b|0,a|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){ca(a|0,19792,31);p()}a=P()|0;ja(b|0);R(a|0);p()}function Oh(a){a=a|0;var b=0,c=0;b=ba(8)|0;x[5120]=0;a=T(558,b|0,a|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){ca(a|0,19688,31);p()}a=P()|0;ja(b|0);R(a|0);p()}function kj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;while(1){if((b|0)!=(c|0)){a=x[b>>2];v[e|0]=a>>>0<128?a:d;e=e+1|0;b=b+4|0;continue}break}return c|0}function Kg(a){var b=0;b=x[a>>2];x[a>>2]=0;a:{if(b){a=x[a+4>>2];x[5120]=0;Q(a|0,b|0)|0;a=x[5120];x[5120]=0;if((a|0)==1){break a}}return}V(0)|0;lb();p()}function Hh(a,b){a=a|0;b=b|0;var c=0;c=a;if(y[b+11|0]>>>7|0){a=x[b>>2]}else{a=b}if(y[b+11|0]>>>7|0){b=x[b+4>>2]}else{b=y[b+11|0]&127}return Id(c,a,b)|0}function Ne(){var a=0,b=0,c=0;b=ba(8)|0;x[5120]=0;a=T(302,b|0,1661)|0;c=x[5120];x[5120]=0;if((c|0)!=1){ca(a|0,19792,31);p()}a=P()|0;ja(b|0);R(a|0);p()}function nf(a){var b=0,c=0;x[5120]=0;c=Z(273)|0;b=x[5120];x[5120]=0;if((b|0)!=1){b=a;a=x[c>>2];x[b>>2]=a;x[a+4>>2]=x[a+4>>2]+1;return}V(0)|0;lb();p()}function fh(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;k=b;b=0;return Za[a|0](k,c,d,e,f,b|g,h,b|i,j)|0}function aj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;while(1){if((b|0)!=(c|0)){a=v[b|0];v[e|0]=(a|0)<0?d:a;e=e+1|0;b=b+1|0;continue}break}return c|0}function vh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(tb(a,x[b+8>>2],f)){Cd(b,c,d,e);return}a=x[a+8>>2];Za[x[x[a>>2]+20>>2]](a,b,c,d,e,f)}function Rm(a,b){a=a|0;b=b|0;var c=0,d=0;c=x[a+40>>2];while(1){if(c){c=c-1|0;d=c<<2;Za[x[x[a+32>>2]+d>>2]](b,a,x[d+x[a+36>>2]>>2]);continue}break}}function _f(a){var b=0,c=0;b=ba(8)|0;x[5120]=0;a=T(30,b|0,a|0)|0;c=x[5120];x[5120]=0;if((c|0)!=1){ca(a|0,19740,31);p()}a=P()|0;ja(b|0);R(a|0);p()}function Jd(a,b,c){var d=0;d=Wa-16|0;Wa=d;x[5120]=0;v[d+15|0]=c;Je(a,b,d+15|0);a=x[5120];x[5120]=0;if((a|0)!=1){Wa=d+16|0;return}V(0)|0;lb();p()}function wi(a){a=a|0;if(y[21072]){return x[5267]}if(!y[22232]){v[22232]=1}ib(22208,15936);ib(22220,15948);v[21072]=1;x[5267]=22208;return 22208}function Yh(a,b){a=a|0;b=b|0;x[a>>2]=19476;x[a>>2]=19604;x[5120]=0;T(551,a+4|0,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a|0}R(P()|0);p()}function zi(a){a=a|0;if(y[21064]){return x[5265]}if(!y[22200]){v[22200]=1}jb(22176,2024);jb(22188,2021);v[21064]=1;x[5265]=22176;return 22176}function Si(a){a=a|0;var b=0;a=x[a+8>>2];if(!a){return 1}x[5120]=0;a=Q(282,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a|0}V(0)|0;lb();p()}function xb(a){a:{a=x[a>>2];if(a){x[5120]=0;if(a){x[5164]=(a|0)==-1?20520:a}a=x[5120];x[5120]=0;if((a|0)==1){break a}}return}V(0)|0;lb();p()}function gh(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0;j=b;b=0;return Za[a|0](j,c,d,e,b|f,g,b|h,i)|0}function An(a){a=a|0;var b=0;a=x[a>>2];b=x[a+12>>2];a:{if((b|0)==x[a+16>>2]){a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=y[b|0]}return a<<24>>24}function Om(a,b){a=a|0;b=b|0;x[a+20>>2]=0;x[a+24>>2]=b;x[a+12>>2]=0;x[a+4>>2]=4098;x[a+8>>2]=6;x[a+16>>2]=!b;Mb(a+32|0,0,40);nf(a+28|0)}function Bd(a,b,c,d,e,f){var g=0,h=0;g=x[a+4>>2];h=g>>8;a=x[a>>2];if(g&1){h=x[x[d>>2]+h>>2]}Za[x[x[a>>2]+20>>2]](a,b,c,d+h|0,g&2?e:2,f)}function tn(a){a=a|0;var b=0;a=x[a>>2];b=x[a+12>>2];a:{if((b|0)==x[a+16>>2]){a=Za[x[x[a>>2]+36>>2]](a)|0;break a}a=x[b>>2]}return a|0}function _h(a,b){a=a|0;b=b|0;var c=0,d=0;c=_b(b);d=rb(c+13|0);x[d+8>>2]=0;x[d+4>>2]=c;x[d>>2]=c;x[a>>2]=ub(d+12|0,b,c+1|0);return a|0}function Tc(a){a=a|0;var b=0,c=0;x[a>>2]=4048;b=x[a+4>>2];c=x[b+4>>2]-1|0;x[b+4>>2]=c;if((c|0)==-1){Za[x[x[b>>2]+8>>2]](b)}return a|0}function Re(a,b,c){var d=0;d=Wa-16|0;Wa=d;a:{if(!(y[b+120|0]|c>>>0>30)){v[b+120|0]=1;break a}b=Xe(c)}Wa=d+16|0;x[a+4>>2]=c;x[a>>2]=b}function Cb(a,b,c,d,e){var f=0;f=Wa-16|0;Wa=f;x[f+12>>2]=c;x[f+8>>2]=e;c=Rb(f,f+12|0);a=pd(a,b,d,x[f+8>>2]);xb(c);Wa=f+16|0;return a}function Zc(a,b,c,d,e){var f=0,g=0;f=x[a+4>>2];g=f>>8;a=x[a>>2];if(f&1){g=x[x[c>>2]+g>>2]}Za[x[x[a>>2]+24>>2]](a,b,c+g|0,f&2?d:2,e)}function wj(a){a=a|0;var b=0,c=0;b=x[x[a>>2]>>2];c=x[b+8>>2];a=x[b+4>>2];b=x[b>>2]+(c>>1)|0;if(c&1){a=x[a+x[b>>2]>>2]}Za[a|0](b)}function Ke(a,b){x[a>>2]=19476;x[a>>2]=19584;x[5120]=0;T(551,a+4|0,b|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a}R(P()|0);p()}function mj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;while(1){if((b|0)!=(c|0)){x[d>>2]=v[b|0];d=d+4|0;b=b+1|0;continue}break}return c|0}function Rf(a,b,c,d,e,f){a=Za[x[x[a+8>>2]+4>>2]](a+8|0)|0;a=od(c,d,a,a+288|0,f,e,0)-a|0;if((a|0)<=287){x[b>>2]=((a|0)/12|0)%12}}function Of(a,b,c,d,e,f){a=Za[x[x[a+8>>2]+4>>2]](a+8|0)|0;a=md(c,d,a,a+288|0,f,e,0)-a|0;if((a|0)<=287){x[b>>2]=((a|0)/12|0)%12}}function cj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;while(1){if((b|0)!=(c|0)){v[d|0]=y[b|0];d=d+1|0;b=b+1|0;continue}break}return c|0}function Xm(a,b,c){a=a|0;b=b|0;c=c|0;if(c>>>0>8){x[5120]=0;db(a);a=x[5120];x[5120]=0;if((a|0)==1){V(0)|0;lb();p()}return}db(a)}function Ch(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(tb(a,x[b+8>>2],0)){Dd(b,c,d);return}a=x[a+8>>2];Za[x[x[a>>2]+28>>2]](a,b,c,d)}function Sf(a,b,c,d,e,f){a=Za[x[x[a+8>>2]>>2]](a+8|0)|0;a=od(c,d,a,a+168|0,f,e,0)-a|0;if((a|0)<=167){x[b>>2]=((a|0)/12|0)%7}}function Pf(a,b,c,d,e,f){a=Za[x[x[a+8>>2]>>2]](a+8|0)|0;a=md(c,d,a,a+168|0,f,e,0)-a|0;if((a|0)<=167){x[b>>2]=((a|0)/12|0)%7}}function Ue(a,b,c){var d=0;d=Wa-16|0;Wa=d;x[d+12>>2]=Te(b);x[d+8>>2]=Te(c);x[a>>2]=x[d+12>>2];x[a+4>>2]=x[d+8>>2];Wa=d+16|0}function un(){fa(1270,2,2756,2836,6,7);fa(1716,2,2756,2836,6,8);fa(1284,2,2840,2836,9,10);fa(1829,2,2944,2952,11,12);Hg()}function Te(a){var b=0;b=Wa-16|0;Wa=b;x[b+8>>2]=a;a=Wa-16|0;Wa=a;x[a+8>>2]=x[b+8>>2];Wa=a+16|0;Wa=b+16|0;return x[a+8>>2]}function Td(a,b,c){c=x[c>>2];while(1){a:{if((a|0)!=(b|0)){if((c|0)!=x[a>>2]){break a}}else{a=b}return a}a=a+4|0;continue}}function Og(a){var b=0;b=x[a+12>>2];if((b|0)==x[a+16>>2]){return Za[x[x[a>>2]+40>>2]](a)|0}x[a+12>>2]=b+4;return x[b>>2]}function jg(a,b){a=a|0;b=b|0;var c=0;c=b;b=x[b>>2]+7&-8;x[c>>2]=b+16;C[a>>3]=ee(x[b>>2],x[b+4>>2],x[b+8>>2],x[b+12>>2])}function Xg(a){a=a|0;var b=0;if((Za[x[x[a>>2]+36>>2]](a)|0)==-1){return-1}b=a;a=x[a+12>>2];x[b+12>>2]=a+1;return y[a|0]}function Wd(a,b,c){c=y[c|0];while(1){a:{if((a|0)!=(b|0)){if((c|0)!=y[a|0]){break a}}else{a=b}return a}a=a+1|0;continue}}function Sg(a){var b=0;b=x[a+12>>2];if((b|0)==x[a+16>>2]){return Za[x[x[a>>2]+40>>2]](a)|0}x[a+12>>2]=b+1;return y[b|0]}function qm(a,b){a=a|0;b=b|0;var c=0;c=x[a>>2];a=x[a+4>>2];b=(a>>1)+b|0;if(a&1){c=x[c+x[b>>2]>>2]}return Za[c|0](b)|0}function lc(a,b){x[5120]=0;a=Y(559,(b<<1)+18272|0,2,a|0)|0;b=x[5120];x[5120]=0;if((b|0)!=1){return a}V(0)|0;lb();p()}function zg(a,b,c,d,e,f,g,h,i){x[a>>2]=b;x[a+4>>2]=c;x[a+8>>2]=d;x[a+12>>2]=e&65535|(i>>>16&32768|e>>>16&32767)<<16}function qf(a){var b=0;b=x[a>>2];x[a>>2]=0;if(b){a=x[b+4>>2]-1|0;x[b+4>>2]=a;if((a|0)==-1){Za[x[x[b>>2]+8>>2]](b)}}}function le(a,b,c){var d=0;d=Wa-16|0;Wa=d;x[d+12>>2]=b;x[d+8>>2]=c;x[a>>2]=x[d+12>>2];x[a+4>>2]=x[d+8>>2];Wa=d+16|0}function Rb(a,b){var c=0;c=x[5164];b=x[b>>2];if(b){x[5164]=(b|0)==-1?20520:b}x[a>>2]=(c|0)==20520?-1:c;return a}function Qd(a,b){var c=0;c=Wa-16|0;Wa=c;x[c+8>>2]=x[a>>2];x[c+8>>2]=x[c+8>>2]+(b<<2);Wa=c+16|0;return x[c+8>>2]}function Ob(a){a:{a=x[a+4>>2]&74;if(a){if((a|0)==64){return 8}if((a|0)!=8){break a}return 16}return 0}return 10}function tb(a,b,c){if(!c){return x[a+4>>2]==x[b+4>>2]}if((a|0)==(b|0)){return 1}return!Nc(x[a+4>>2],x[b+4>>2])}function Fe(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if(b){x[a>>2]=x[c>>2];b=b-1|0;a=a+4|0;continue}break}return a|0}function $g(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0}function Qf(a,b,c,d,e){b=Xb(b,c,d,e,4);if(!(y[d|0]&4)){x[a>>2]=((b|0)<69?b+2e3|0:(b|0)<100?b+1900|0:b)-1900}}function Nf(a,b,c,d,e){b=Wb(b,c,d,e,4);if(!(y[d|0]&4)){x[a>>2]=((b|0)<69?b+2e3|0:(b|0)<100?b+1900|0:b)-1900}}function Jc(a){a=a|0;var b=0;b=x[1111];x[a>>2]=b;x[x[b-12>>2]+a>>2]=x[1114];Rc(a+8|0);kc(a+108|0);return a|0}function Kc(a){if(v[a+39|0]<0){db(x[a+28>>2])}if(v[a+27|0]<0){db(x[a+16>>2])}if(v[a+15|0]<0){db(x[a+4>>2])}}function Je(a,b,c){a=a|0;b=b|0;c=c|0;while(1){if(b){v[a|0]=y[c|0];b=b-1|0;a=a+1|0;continue}break}return a|0}function Rd(a,b){var c=0;c=Wa-16|0;Wa=c;x[c+8>>2]=x[a>>2];x[c+8>>2]=x[c+8>>2]+b;Wa=c+16|0;return x[c+8>>2]}function Jb(a){var b=0;b=Wa-16|0;Wa=b;if(y[a+11|0]>>>7|0){a=x[a>>2]}x[b+8>>2]=a;Wa=b+16|0;return x[b+8>>2]}function nc(a,b){if(y[a+11|0]>>>7|0){x[a+4>>2]=b;return}v[a+11|0]=y[a+11|0]&128|b;v[a+11|0]=y[a+11|0]&127}function hf(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;x[e>>2]=c;x[h>>2]=f;return 3}function Uc(a,b,c){a:{if(x[c+76>>2]<0){a=wd(a,b,c);break a}a=wd(a,b,c)}if((a|0)==(b|0)){return b}return a}function jc(a,b,c){x[5120]=0;Y(68,b|0,c|0,a|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){return}V(0)|0;lb();p()}function Hb(a,b,c){x[5120]=0;Y(60,b|0,c|0,a|0)|0;a=x[5120];x[5120]=0;if((a|0)!=1){return}V(0)|0;lb();p()}function td(a,b){a:{x[5120]=0;U(76,a|0,b|0,1);a=x[5120];x[5120]=0;if((a|0)!=1){break a}V(0)|0;lb();p()}}function of(a,b){a=a+8|0;if(x[a+4>>2]-x[a>>2]>>2>>>0>b>>>0){a=x[x[a>>2]+(b<<2)>>2]!=0}else{a=0}return a}function nj(a){a=a|0;var b=0,c=0;a=x[a+4>>2];b=_b(a)+1|0;c=ob(b);if(c){a=ub(c,a,b)}else{a=0}return a|0}function rf(a,b,c){var d=0;d=Wa-16|0;Wa=d;a:{if((a|0)==(b|0)){v[b+120|0]=0;break a}Ve(b,c)}Wa=d+16|0}function Ve(a,b){x[5120]=0;U(76,a|0,b<<2,4);a=x[5120];x[5120]=0;if((a|0)!=1){return}V(0)|0;lb();p()}function wm(a){a=a|0;var b=0;b=x[5164];if(a){x[5164]=(a|0)==-1?20520:a}return((b|0)==20520?-1:b)|0}function kf(){x[5565]=0;x[5564]=16040;x[5564]=10880;v[22268]=0;x[5566]=0;x[5564]=9420;x[5566]=9472}function hh(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Za[a|0](b,c,d,e,f,g)|0}function Yb(a,b){a=a|0;b=b|0;a=x[a>>2];b=nb(b);if(!of(a,b)){Pc();p()}return x[x[a+8>>2]+(b<<2)>>2]}function ek(){x[5591]=0;x[5590]=16040;x[5590]=10880;x[5592]=46;x[5593]=44;x[5590]=10592;fb(22376)}function ye(a){var b=0;a:{a=x[a>>2]-12|0;b=x[a+8>>2]-1|0;x[a+8>>2]=b;if((b|0)>=0){break a}db(a)}}function uh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(tb(a,x[b+8>>2],f)){Cd(b,c,d,e)}}function hd(){var a=0;x[5120]=0;a=x[5120];x[5120]=0;if((a|0)!=1){return x[1512]}V(0)|0;lb();p()}function gd(){var a=0;x[5120]=0;a=x[5120];x[5120]=0;if((a|0)!=1){return x[1900]}V(0)|0;lb();p()}function ej(){var a=0;a=x[4992];if(a){while(1){Za[x[a>>2]]();a=x[a+4>>2];if(a){continue}break}}}function Mc(){var a=0;a=ba(4)|0;x[a>>2]=19476;x[a>>2]=19436;x[a>>2]=19456;ca(a|0,19564,32);p()}function _g(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;x[a+8>>2]=-1;x[a+12>>2]=-1;x[a>>2]=0;x[a+4>>2]=0}function hg(a){var b=0,c=0;c=a;while(1){b=c;c=b+4|0;if(x[b>>2]){continue}break}return b-a>>2}function jf(a){a=a|0;var b=0;x[a>>2]=9420;b=x[a+8>>2];if(!(!b|!y[a+12|0])){db(b)}return a|0}function gn(a,b){a=a|0;b=b|0;var c=0;c=Wa-16|0;Wa=c;Wa=c+16|0;return(A[b>>2]<A[a>>2]?b:a)|0}function ih(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a=Za[a|0](b,c,d,e)|0;Xa=Ya;return a|0}function gk(){x[5585]=0;x[5584]=16040;x[5584]=10880;w[11172]=11310;x[5584]=10552;fb(22348)}function ae(a){a=a|0;if((a|0)!=0&(a|0)!=5432&(a|0)!=5456&(a|0)!=20696&(a|0)!=20720){db(a)}}function We(a,b,c){var d=0;d=Wa-16|0;Wa=d;nc(a,c);v[d+15|0]=0;v[b+c|0]=y[d+15|0];Wa=d+16|0}function jh(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Za[a|0](b,c,d,e,f,g)}function be(a,b,c,d){var e=0;e=Wa-16|0;Wa=e;x[e+12>>2]=d;a=pd(a,b,c,d);Wa=e+16|0;return a}function ig(a,b){var c=0;c=Wa-16|0;Wa=c;x[c+12>>2]=b;a=rg(a,1740,b);Wa=c+16|0;return a}function Tb(a,b){a=a|0;b=b|0;var c=0;c=Wa-16|0;Wa=c;Ie(a,b,_b(b));Wa=c+16|0;return a|0}function Rk(a,b,c){a=a|0;b=b|0;c=c|0;c=Sg(x[b>>2]);x[a+4>>2]=x[b>>2];v[a|0]=c<<24>>24}function Qm(a,b){a=a|0;b=b|0;var c=0;c=a;a=x[b+28>>2];x[c>>2]=a;x[a+4>>2]=x[a+4>>2]+1}function ij(a,b){a=a|0;b=b|0;if((b|0)>=0){b=x[hd()+((b&255)<<2)>>2]}return b<<24>>24}function gj(a,b){a=a|0;b=b|0;if((b|0)>=0){b=x[gd()+((b&255)<<2)>>2]}return b<<24>>24}function yi(a){a=a|0;a=22200;while(1){a=cb(a-12|0);if((a|0)!=22176){continue}break}}function vi(a){a=a|0;a=22232;while(1){a=gb(a-12|0);if((a|0)!=22208){continue}break}}function Ul(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Za[x[x[a>>2]+32>>2]](a,b,c,d)|0}function Gi(a){a=a|0;a=21384;while(1){a=cb(a-12|0);if((a|0)!=21216){continue}break}}function Fl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Za[x[x[a>>2]+48>>2]](a,b,c,d)|0}function Ei(a){a=a|0;a=21560;while(1){a=gb(a-12|0);if((a|0)!=21392){continue}break}}function Ci(a){a=a|0;a=21856;while(1){a=cb(a-12|0);if((a|0)!=21568){continue}break}}function Ai(a){a=a|0;a=22160;while(1){a=gb(a-12|0);if((a|0)!=21872){continue}break}}function Qc(a,b,c){a=a|0;b=b|0;c=c|0;x[a>>2]=x[b>>2];x[a+4>>2]=x[c>>2];return a|0}function Pc(){var a=0;a=ba(4)|0;x[a>>2]=19476;x[a>>2]=19844;ca(a|0,19892,75);p()}function Ld(){var a=0;a=ba(4)|0;x[a>>2]=19476;x[a>>2]=19436;ca(a|0,19552,32);p()}function uf(a){var b=0;if(x[a>>2]){sf(a);b=x[a>>2];rf(a+16|0,b,x[a+8>>2]-b>>2)}}function rm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=Wa-16|0;Wa=b;cg(a,c,d);Wa=b+16|0}function vj(a,b,c){a=a|0;b=b|0;c=c|0;return(x[(c<<2)+9472>>2]&b)!=0&c>>>0<=127}function Kk(a,b,c){a=a|0;b=b|0;c=c|0;c=Og(x[b>>2]);x[a+4>>2]=x[b>>2];x[a>>2]=c}function Dh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(tb(a,x[b+8>>2],0)){Dd(b,c,d)}}function gb(a){if(y[a+11|0]>>>7|0){ed(x[a>>2],x[a+8>>2]&2147483647)}return a}function cb(a){if(y[a+11|0]>>>7|0){td(x[a>>2],x[a+8>>2]&2147483647)}return a}function Gd(a,b){var c=0;c=a;a=(b>>>0)/100|0;return lc(lc(c,a),b-D(a,100)|0)}function Fd(a,b){var c=0;c=a;a=(b>>>0)/1e4|0;return Gd(lc(c,a),b-D(a,1e4)|0)}function Ed(a,b){var c=0;c=a;a=(b>>>0)/1e6|0;return Fd(lc(c,a),b-D(a,1e6)|0)}function Vc(a,b,c,d){if(x[a+76>>2]<0){return we(a,b,c,d)}return we(a,b,c,d)}function Jm(){var a=0;a=rb(12);x[a+8>>2]=0;x[a>>2]=0;x[a+4>>2]=0;return a|0}function Jh(a,b,c){a=a|0;b=b|0;c=c|0;return x[b>>2]==(c|0)&x[b+4>>2]==(a|0)}function In(a){var b=0;b=a&31;a=0-a&31;return(-1>>>b&-2)<<b|(-1<<a&-2)>>>a}
function si(a){a=a|0;if(!y[21104]){wc(21092,10668);v[21104]=1}return 21092}function rj(a,b){a=a|0;b=b|0;if(b>>>0<=127){b=x[hd()+(b<<2)>>2]}return b|0}function pj(a,b){a=a|0;b=b|0;if(b>>>0<=127){b=x[gd()+(b<<2)>>2]}return b|0}function oi(a){a=a|0;if(!y[21136]){wc(21124,10704);v[21136]=1}return 21124}function ki(a){a=a|0;if(!y[21168]){wc(21156,10740);v[21168]=1}return 21156}function gi(a){a=a|0;if(!y[21200]){wc(21188,10824);v[21200]=1}return 21188}function ui(a){a=a|0;if(!y[21088]){Tb(21076,1116);v[21088]=1}return 21076}function sn(a,b,c){a=a|0;b=b|0;c=c|0;return Za[x[x[a>>2]+12>>2]](a,b,c)|0}function qi(a){a=a|0;if(!y[21120]){Tb(21108,2008);v[21120]=1}return 21108}function mi(a){a=a|0;if(!y[21152]){Tb(21140,1981);v[21152]=1}return 21140}function ii(a){a=a|0;if(!y[21184]){Tb(21172,1428);v[21184]=1}return 21172}function Pg(a,b,c){a=a|0;b=b|0;c=c|0;return Za[x[x[a>>2]+48>>2]](a,b,c)|0}function Df(a,b){var c=0;c=x[b>>2];x[b>>2]=0;vb(a,c);x[a+4>>2]=x[b+4>>2]}function Ic(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;x[e>>2]=c;return 3}function cc(a,b){a=a|0;b=b|0;v[a|0]=2;v[a+1|0]=3;v[a+2|0]=0;v[a+3|0]=4}function Nm(a){a=a|0;x[a+16>>2]=x[a+16>>2]|1;if(v[a+20|0]&1){Aa();p()}}function xk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Sd(a,f)}function pc(a,b){return b?a<<24|(a&65280)<<8|(a>>>8&65280|a>>>24):a}function lj(a,b,c){a=a|0;b=b|0;c=c|0;return(b>>>0<128?b:c)<<24>>24}function eg(a,b,c){a=a|0;b=b|0;c=c|0;return Oc(0,a,b,c?c:20748)|0}function _j(){x[5607]=0;x[5606]=16040;x[5606]=10880;x[5606]=13724}function Xc(a,b,c,d,e){b=Da(a|0,b|0,c|0,d|0,e|0)|0;Ya=Xa;return b}function Vj(){x[5615]=0;x[5614]=16040;x[5614]=10880;x[5614]=14220}function Tj(){x[5617]=0;x[5616]=16040;x[5616]=10880;x[5616]=14384}function Qj(){x[5619]=0;x[5618]=16040;x[5618]=10880;x[5618]=14548}function Oj(){x[5621]=0;x[5620]=16040;x[5620]=10880;x[5620]=14712}function Gj(){x[5639]=0;x[5638]=16040;x[5638]=10880;x[5638]=14876}function yj(a){a=a|0;var b=0;b=x[5236]+1|0;x[5236]=b;x[a+4>>2]=b}function vn(a,b,c){a=a|0;b=b|0;c=c|0;return Ig(a,(b<<2)+a|0,c)|0}function sh(a){a=a|0;if(!a){return 0}return(Lb(a,18780)|0)!=0|0}function nm(a,b){a=a|0;b=b|0;return Za[x[x[a>>2]+12>>2]](a,b)|0}function bi(a,b){a=a|0;b=b|0;a=Ke(a,b);x[a>>2]=19760;return a|0}function Wm(a,b){a=a|0;b=b|0;return Za[x[x[a>>2]+44>>2]](a,b)|0}function Nh(a,b){a=a|0;b=b|0;a=Le(a,b);x[a>>2]=19652;return a|0}function Mh(a,b){a=a|0;b=b|0;a=Le(a,b);x[a>>2]=19760;return a|0}function Em(a,b){a=a|0;b=b|0;return a-48>>>0<10|(a|32)-97>>>0<6}function Dg(a,b){a=a|0;b=b|0;return Za[x[x[a>>2]+28>>2]](a,b)|0}function Cl(a,b){a=a|0;b=b|0;a=Ke(a,b);x[a>>2]=19708;return a|0}function Xe(a){if(a>>>0>1073741823){Mc();p()}return Fg(a<<2,4)}function Wh(a,b){a=a|0;b=b|0;if(!x[5120]){x[5120]=a;x[5121]=b}}function dg(a,b,c){var d=0;d=Wa-16|0;Wa=d;Mg(a,b,c);Wa=d+16|0}function re(a,b,c){a=a|0;b=b|0;c=c|0;return Ig(a,a+b|0,c)|0}function bj(a,b,c){a=a|0;b=b|0;c=c|0;return((b|0)<0?c:b)|0}function Lh(a,b,c){a=a|0;b=b|0;c=c|0;x[a+4>>2]=b;x[a>>2]=c}function _e(a){a=a|0;x[a>>2]=10552;cb(a+12|0);return a|0}function Ze(a){a=a|0;x[a>>2]=10592;cb(a+16|0);return a|0}function zj(a,b){a=a|0;b=b|0;return of(x[a>>2],nb(b))|0}function ze(a){a=a|0;x[a>>2]=19584;ye(a+4|0);return a|0}function Me(a,b,c,d){a=_d(a,b,c,0,-2147483648);return a}function Fh(a,b,c){a=a|0;b=b|0;c=c|0;return tb(a,b,0)|0}function Ad(a){a=a|0;x[a>>2]=19604;ye(a+4|0);return a|0}function vc(a,b){var c=0;c=Xe(b);x[a+4>>2]=b;x[a>>2]=c}function um(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;dg(a,c,d)}function bg(a,b){a=a|0;b=b|0;Za[x[x[b>>2]+24>>2]](a,b)}function ag(a,b){a=a|0;b=b|0;Za[x[x[b>>2]+28>>2]](a,b)}function Zm(a){a=a|0;return Jc(x[x[a>>2]-12>>2]+a|0)|0}function Xf(a,b){a=a|0;b=b|0;Za[x[x[b>>2]+20>>2]](a,b)}function Ec(a,b){var c=0;c=Gg(b);x[a+4>>2]=b;x[a>>2]=c}function Dn(a){a=a|0;return ud(x[x[a>>2]-12>>2]+a|0)|0}function xn(a){a=a|0;return Za[x[x[a>>2]+24>>2]](a)|0}function xm(a){a=a|0;return(x[a+4>>2]-x[a>>2]|0)/12|0}function tc(a,b){a=Ce(a,b);return y[a|0]==(b&255)?a:0}function Zf(a){a=a|0;return Za[x[x[a>>2]+12>>2]](a)|0}function Yf(a){a=a|0;return Za[x[x[a>>2]+16>>2]](a)|0}function Fn(a){if(a){return 31-G(a-1^a)|0}return 32}function pg(a,b){if(!a){return 0}return qd(a,b,0)}function Qb(a,b){a=a|0;b=b|0;return Eg(a)^Eg(b)^1}function Pb(a,b){a=a|0;b=b|0;return Cg(a)^Cg(b)^1}function Lm(a,b){a=a|0;b=b|0;return a-48>>>0<10|0}function xe(a,b,c,d){Ga(a|0,b|0,8,0,c|0,-1,d|0)}function vd(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function ne(a,b){a=a|0;b=b|0;ie(a,x[a+16>>2]|b)}function Md(a,b,c,d){a=_d(a,b,c,-1,-1);return a}function zb(a,b,c){if(!(y[a|0]&32)){wd(b,c,a)}}function tk(a,b){a=a|0;b=b|0;pb(a,b,nb(20752))}function sk(a,b){a=a|0;b=b|0;pb(a,b,nb(20760))}function qk(a,b){a=a|0;b=b|0;pb(a,b,nb(20956))}function pk(a,b){a=a|0;b=b|0;pb(a,b,nb(20948))}function ok(a,b){a=a|0;b=b|0;pb(a,b,nb(20964))}function mk(a,b){a=a|0;b=b|0;pb(a,b,nb(20972))}function lk(a,b){a=a|0;b=b|0;pb(a,b,nb(20980))}function jk(a,b){a=a|0;b=b|0;pb(a,b,nb(20996))}function ik(a,b){a=a|0;b=b|0;pb(a,b,nb(20988))}function hk(a,b){a=a|0;b=b|0;pb(a,b,nb(21004))}function fk(a,b){a=a|0;b=b|0;pb(a,b,nb(21012))}function dk(a,b){a=a|0;b=b|0;pb(a,b,nb(21020))}function ck(a,b){a=a|0;b=b|0;pb(a,b,nb(20768))}function bk(a,b){a=a|0;b=b|0;pb(a,b,nb(20776))}function ak(a,b){a=a|0;b=b|0;pb(a,b,nb(20784))}function Zj(a,b){a=a|0;b=b|0;pb(a,b,nb(20832))}function Yj(a,b){a=a|0;b=b|0;pb(a,b,nb(20840))}function Xj(a,b){a=a|0;b=b|0;pb(a,b,nb(20848))}function Wj(a,b){a=a|0;b=b|0;pb(a,b,nb(20856))}function Uj(a,b){a=a|0;b=b|0;pb(a,b,nb(20864))}function Sj(a,b){a=a|0;b=b|0;pb(a,b,nb(20872))}function Pj(a,b){a=a|0;b=b|0;pb(a,b,nb(20880))}function Nj(a,b){a=a|0;b=b|0;pb(a,b,nb(20888))}function Mj(a,b){a=a|0;b=b|0;pb(a,b,nb(20800))}function Lj(a,b){a=a|0;b=b|0;pb(a,b,nb(20808))}function Jj(a,b){a=a|0;b=b|0;pb(a,b,nb(20816))}function Hj(a,b){a=a|0;b=b|0;pb(a,b,nb(20824))}function Fj(a,b){a=a|0;b=b|0;pb(a,b,nb(20896))}function Ej(a,b){a=a|0;b=b|0;pb(a,b,nb(20904))}function $j(a,b){a=a|0;b=b|0;pb(a,b,nb(20792))}function xf(a,b,c){a=a|0;b=b|0;c=c|0;return-1}function Ym(a){a=a|0;Jg(x[x[a>>2]-12>>2]+a|0)}function Cn(a){a=a|0;Ug(x[x[a>>2]-12>>2]+a|0)}function ch(a){a=a|0;return ua(x[a+60>>2])|0}function ai(a){a=a|0;x[a>>2]=sb();return a|0}function xj(a){a=a|0;Za[x[x[a>>2]+4>>2]](a)}function Gc(a){a=a|0;Sg(x[a>>2]);return a|0}function Fc(a){a=a|0;Og(x[a>>2]);return a|0}function ym(){return(x[x[5164]>>2]?4:1)|0}function ud(a){a=a|0;kc(a+8|0);return a|0}function oe(a){a=a|0;return Yb(a,20956)|0}function me(a){a=a|0;return Yb(a,20948)|0}function Yd(a){a=a|0;return Yb(a,21012)|0}function Vd(a){a=a|0;return Yb(a,21020)|0}function Ni(a,b){a=a|0;b=b|0;Sd(a,b+12|0)}function Mi(a,b){a=a|0;b=b|0;Sd(a,b+16|0)}function Lg(a){a=a|0;return Yb(a,20964)|0}function Ki(a,b){a=a|0;b=b|0;wc(a,10624)}function Ii(a,b){a=a|0;b=b|0;wc(a,10644)}function Bn(a){a=a|0;return!x[a+16>>2]|0}function lf(a,b){a=a|0;b=b|0;return b|0}function Li(a,b){a=a|0;b=b|0;Tb(a,1751)}function Km(a){a=a|0;return Za[a|0]()|0}function Ji(a,b){a=a|0;b=b|0;Tb(a,1760)}function Jf(a,b){a=a|0;b=b|0;Wf(a,1,45)}function If(a,b){a=a|0;b=b|0;Vf(a,1,45)}function yn(a){a=a|0;return x[a+24>>2]}function qn(a){a=a|0;return x[a+12>>2]}function id(a){a=a|0;return 2147483647}function ei(a,b){a=a|0;b=b|0;x[b>>2]=0}function En(a){a=a|0;sd(19920,x[4981])}function rn(a){a=a|0;return x[a+8>>2]}function qe(a,b){a=a|0;b=b|0;return-1}function Oe(a){a=a|0;return x[a+4>>2]}function De(a,b){a=a|0;b=b|0;oa();p()}function Pi(a){a=a|0;return v[a+8|0]}function Oi(a){a=a|0;return v[a+9|0]}function Bg(a){a=a|0;return Ad(a)|0}function Nb(a,b){a=a|0;b=b|0;fb(a)}function Ff(a){return Yb(a,20840)}function Ef(a){return Yb(a,20832)}function Bf(a){return Yb(a,20856)}function Af(a){return Yb(a,20848)}function rh(a){a=a|0;return 1448}function ph(a){a=a|0;return 1906}function oh(a){a=a|0;return 1603}function nh(a){a=a|0;return 1197}function kn(a){a=a|0;Rc(a);db(a)}function jj(a){a=a|0;jf(a);db(a)}function je(a){a=a|0;Ad(a);db(a)}function ah(a){a=a|0;Tc(a);db(a)}function _i(a){a=a|0;wf(a);db(a)}function Yc(a){a=a|0;ze(a);db(a)}function Vm(a){a=a|0;return 1541}function Sm(a){a=a|0;return 2936}function Ri(a){a=a|0;_e(a);db(a)}function Qi(a){a=a|0;Ze(a);db(a)}function Pm(a){a=a|0;he(a);db(a)}function Bj(a){a=a|0;pf(a);db(a)}function jd(a){a=a|0;return 127}function Ub(a){a=a|0;return a|0}function ti(a){a=a|0;cb(21076)}function ri(a){a=a|0;gb(21092)}function pi(a){a=a|0;cb(21108)}function ni(a){a=a|0;gb(21124)}function li(a){a=a|0;cb(21140)}function ji(a){a=a|0;gb(21156)}function hi(a){a=a|0;cb(21172)}function fi(a){a=a|0;gb(21188)}function Ye(a){a=a|0;db(Nd(a))}function Ug(a){a=a|0;db(ud(a))}function Jg(a){a=a|0;db(Jc(a))}function zd(a){a=a|0;return 1}function fd(a){a=a|0;return 4}function Yg(a){a=a|0;return-1}function Uf(a){a=a|0;return 2}function Gg(a){return Fg(a,1)}function Bb(a){a=a|0;return 0}function sf(a){Qe(a,x[a>>2])}function Sc(a,b){a=a|0;b=b|0}function Gh(){De(2721,0);p()}function yb(){_f(1661);p()}function xi(){return 19980}function oc(){_f(1295);p()}function kb(a){a=a|0;db(a)}function mh(){return Wa|0}function lh(a){a=a|0;Wa=a}function Qh(a){a=a|0;Xa=a}function Bm(){return 6048}function Am(){return 7600}function ed(a,b){Ve(a,b)}function $h(a){a=a|0;p()}function eb(a){vb(a,0)}function kc(a){he(a)}function Wc(a){a=a|0}function rk(){kf()}
// EMSCRIPTEN_END_FUNCS
e=y;var Za=c([null,_c,Rh,bh,mc,se,pn,Jk,fj,jn,dh,$m,Xh,rb,Sm,Mm,Km,Jm,zn,Hm,Gm,Cm,xm,qm,mm,fm,Zl,Sl,Ua,Ta,Cl,ze,Ub,En,Ml,un,Om,mn,nn,Qm,Yb,cl,Hd,Mf,Vk,Vh,Aa,qa,Dk,vk,kk,Mf,Rj,Cj,mf,gf,qh,kh,eh,ch,re,oe,yn,wn,xn,ne,Nm,Bn,vn,vd,Lg,zj,ln,yd,Qc,Ub,Xm,Tc,ah,Sc,vd,$g,_g,Bb,Bb,Zg,Yg,Xg,qe,Wg,qe,ud,Ug,Dn,Cn,Rc,kn,_m,dn,cn,bn,an,hn,fn,en,Jc,Jg,Zm,Ym,Wc,Rm,Tm,Bg,Ub,kb,Vm,Lh,Kh,Jh,Um,je,Oe,he,Pm,Im,kg,jg,Fm,Yd,bg,ag,od,db,Ld,Qb,An,nm,Gc,Qc,on,ic,km,wb,Yf,Xf,im,gm,$f,$f,bm,nd,$l,Ul,Zf,Yl,Wl,sb,Tl,wm,me,Vd,bg,ag,md,Pb,tn,Dg,Fc,hc,Yf,Xf,ld,Fl,Zf,Qg,Bl,Dg,dc,Pg,wl,vl,yc,Qc,Dm,Em,Lm,Ng,ql,Wm,Lc,Pg,ll,xc,Qc,$d,Yh,Ad,vd,Wc,Tk,Kf,Sk,Rk,Hf,Qk,Gf,Qc,Ok,Id,Mk,Lk,sn,Kk,Th,Cf,Gf,Hk,Uh,Fk,Ek,Ak,zk,ae,uk,Tb,tk,sk,rk,qk,pk,ok,nk,mk,lk,jk,ik,hk,gk,fk,ek,dk,ck,bk,ak,$j,_j,Zj,Yj,Xj,Wj,Vj,Uj,Tj,Sj,Qj,Pj,Oj,Nj,Mj,Lj,Kj,Jj,Ij,Hj,Gj,Fj,Ej,ei,yj,Dj,ai,di,ci,Aj,wj,Bm,Am,zm,qd,gg,Oc,Vi,Ui,fg,ym,eg,Gi,Ei,Ci,Ai,yi,vi,ti,ri,pi,ni,li,ji,hi,fi,gn,Sc,bi,pf,Bj,xj,jf,jj,ij,hj,gj,dj,lf,cj,bj,aj,wf,_i,Zi,Yi,Xi,Wi,Bb,Ti,Si,_e,Ri,Pi,Oi,Ni,Li,Ji,Ze,Qi,rn,qn,Mi,Ki,Ii,Ub,kb,kb,vj,uj,tj,sj,rj,qj,pj,oj,lf,mj,lj,kj,kb,hf,hf,Ic,zd,zd,$i,zd,kb,ef,df,Ic,Bb,Bb,cf,fd,kb,ef,df,Ic,Bb,Bb,cf,fd,kb,bf,af,Ic,Bb,Bb,$e,fd,kb,bf,af,Ic,Bb,Bb,$e,fd,Ub,kb,vm,um,tm,Ub,kb,sm,rm,pm,kb,om,lm,jm,hm,em,dm,cm,am,_l,Xl,Vl,kb,Rl,Ql,Pl,Ol,Nl,Ll,Kl,Jl,Il,Hl,Gl,kb,El,Dl,Al,zl,yl,xl,ul,tl,kb,sl,rl,pl,ol,nl,ml,kl,jl,Ub,kb,Uf,il,hl,gl,fl,el,dl,Hi,Di,zi,mi,ii,ui,qi,Ub,kb,Uf,bl,al,$k,_k,Zk,Yk,Fi,Bi,wi,ki,gi,si,oi,Nd,Ye,Xk,Nd,Ye,Wk,kb,jd,jd,Nb,Nb,Nb,Jf,Bb,cc,cc,kb,jd,jd,Nb,Nb,Nb,Jf,Bb,cc,cc,kb,id,id,Nb,Nb,Nb,If,Bb,cc,cc,kb,id,id,Nb,Nb,Nb,If,Bb,cc,cc,kb,Uk,Pk,kb,Nk,Ik,kb,Gk,Ck,kb,Bk,yk,kb,xf,xk,Sc,kb,xf,wk,Sc,Ub,$h,Gh,Bb,Bb,Bb,kb,_h,Je,Fe,Sh,Ph,Oh,Mh,Nh,re,Hh,Ih,Zh,Bg,je,oa,De,Ub,kb,Wc,Wc,Fh,kb,Eh,uh,xh,Dh,kb,vh,yh,Ch,kb,wh,zh,Bh,kb,Ah,kb,ph,kb,oh,kb,rh,Yc,Oe,je,Yc,Yc,Yc,kb,nh]);function _a(){return u.byteLength/65536|0}return{"ia":Vg,"ja":ob,"ka":Za,"la":nj,"ma":ej,"na":xi,"oa":db,"pa":Wh,"qa":Qh,"ra":mh,"sa":lh,"ta":th,"ua":sh,"va":ih,"wa":jh,"xa":ih,"ya":hh,"za":gh,"Aa":fh}}return $a(bb)}
// EMSCRIPTEN_END_ASM




)(info)},instantiate:function(binary,info){return{then:function(ok){var module=new WebAssembly.Module(binary);ok({"instance":new WebAssembly.Instance(module,info)})}}},RuntimeError:Error};wasmBinary=[];if(typeof WebAssembly!="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(text)}}var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heapOrArray,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||34930688;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_MEMORY/65536,"maximum":INITIAL_MEMORY/65536})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what="Aborted("+what+")";err(what);ABORT=true;EXITSTATUS=1;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var memoryInitializer="cplusplus_data.js.mem";var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}var wasmBinaryFile;wasmBinaryFile="cplusplus_data.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw"both async and sync fetching of the wasm failed"}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch=="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;runMemoryInitializer();wasmTable=Module["asm"]["ka"];addOnInit(Module["asm"]["ia"]);removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&!ENVIRONMENT_IS_NODE&&typeof fetch=="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);readyPromiseReject(e)}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){callbacks.shift()(Module)}}function ___cxa_allocate_exception(size){return _malloc(size+24)+24}var exceptionCaught=[];function exception_addRef(info){info.add_ref()}var uncaughtExceptionCount=0;function ___cxa_begin_catch(ptr){var info=new ExceptionInfo(ptr);if(!info.get_caught()){info.set_caught(true);uncaughtExceptionCount--}info.set_rethrown(false);exceptionCaught.push(info);exception_addRef(info);return info.get_exception_ptr()}var exceptionLast=0;function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24;this.set_type=function(type){HEAPU32[this.ptr+4>>2]=type};this.get_type=function(){return HEAPU32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAPU32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1};this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr};this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_type());if(isPointer){return HEAPU32[this.excPtr>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.excPtr}}function ___cxa_free_exception(ptr){try{return _free(new ExceptionInfo(ptr).ptr)}catch(e){}}var wasmTableMirror=[];function getWasmTableEntry(funcPtr){var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func}function exception_decRef(info){if(info.release_ref()&&!info.get_rethrown()){var destructor=info.get_destructor();if(destructor){getWasmTableEntry(destructor)(info.excPtr)}___cxa_free_exception(info.excPtr)}}function ___cxa_end_catch(){_setThrew(0);var info=exceptionCaught.pop();exception_decRef(info);exceptionLast=0}function ___resumeException(ptr){if(!exceptionLast){exceptionLast=ptr}throw ptr}function ___cxa_find_matching_catch_2(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0}var info=new ExceptionInfo(thrown);info.set_adjusted_ptr(thrown);var thrownType=info.get_type();if(!thrownType){setTempRet0(0);return thrown}for(var i=0;i<arguments.length;i++){var caughtType=arguments[i];if(caughtType===0||caughtType===thrownType){break}var adjusted_ptr_addr=info.ptr+16;if(___cxa_can_catch(caughtType,thrownType,adjusted_ptr_addr)){setTempRet0(caughtType);return thrown}}setTempRet0(thrownType);return thrown}function ___cxa_find_matching_catch_3(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0}var info=new ExceptionInfo(thrown);info.set_adjusted_ptr(thrown);var thrownType=info.get_type();if(!thrownType){setTempRet0(0);return thrown}for(var i=0;i<arguments.length;i++){var caughtType=arguments[i];if(caughtType===0||caughtType===thrownType){break}var adjusted_ptr_addr=info.ptr+16;if(___cxa_can_catch(caughtType,thrownType,adjusted_ptr_addr)){setTempRet0(caughtType);return thrown}}setTempRet0(thrownType);return thrown}function ___cxa_rethrow(){var info=exceptionCaught.pop();if(!info){abort("no exception to throw")}var ptr=info.excPtr;if(!info.get_rethrown()){exceptionCaught.push(info);info.set_rethrown(true);info.set_caught(false);uncaughtExceptionCount++}exceptionLast=ptr;throw ptr}function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function ___cxa_uncaught_exceptions(){return uncaughtExceptionCount}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH={isAbs:path=>path.charAt(0)==="/",splitPath:filename=>{var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join("/"))},join2:(l,r)=>{return PATH.normalize(l+"/"+r)}};function getRandomDevice(){if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){var randomBuffer=new Uint8Array(1);return()=>{crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require("crypto");return()=>crypto_module["randomBytes"](1)[0]}catch(e){}}return()=>abort("randomDevice")}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.fsync(stream.tty)},fsync:function(stream){stream.tty.ops.fsync(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc(BUFSIZE);var bytesRead=0;try{bytesRead=fs.readSync(process.stdin.fd,buf,0,BUFSIZE,-1)}catch(e){if(e.toString().includes("EOF"))bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){abort()}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};function asyncLoad(url,onload,onerror,noRunDep){var dep=!noRunDep?getUniqueRunDependency("al "+url):"";readAsync(url,arrayBuffer=>{assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},event=>{if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}});if(dep)addRunDependency(dep)}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{path=PATH_FS.resolve(path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split("/").filter(p=>!!p);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:node=>{var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:(parentid,name)=>{var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>{return node===node.parent},isMountpoint:node=>{return!!node.mounted},isFile:mode=>{return(mode&61440)===32768},isDir:mode=>{return(mode&61440)===16384},isLink:mode=>{return(mode&61440)===40960},isChrdev:mode=>{return(mode&61440)===8192},isBlkdev:mode=>{return(mode&61440)===24576},isFIFO:mode=>{return(mode&61440)===4096},isSocket:mode=>{return(mode&49152)===49152},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:str=>{var flags=FS.flagModes[str];if(typeof flags=="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:flag=>{var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:(node,perms)=>{if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:(dir,name)=>{try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:(node,flags)=>{if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:(fd_start=0,fd_end=FS.MAX_OPEN_FDS)=>{for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:fd=>FS.streams[fd],createStream:(stream,fd_start,fd_end)=>{if(!FS.FSStream){FS.FSStream=function(){this.shared={}};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}},flags:{get:function(){return this.shared.flags},set:function(val){this.shared.flags=val}},position:{get:function(){return this.shared.position},set:function(val){this.shared.position=val}}})}stream=Object.assign(new FS.FSStream,stream);var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:mountpoint=>{var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:(parent,name)=>{return parent.node_ops.lookup(parent,name)},mknod:(path,mode,dev)=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:(path,mode)=>{mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:(path,mode)=>{mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:(path,mode)=>{var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:(path,mode,dev)=>{if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir:path=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink:path=>{var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:(path,dontFollow)=>{var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:path=>{return FS.stat(path,true)},chmod:(path,mode,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,true)},fchmod:(fd,mode)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:(path,uid,gid,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,true)},fchown:(fd,uid,gid)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:(path,len)=>{if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:(path,atime,mtime)=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode)=>{if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode=="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close:stream=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>{return stream.fd===null},llseek:(stream,offset,whence)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate:(stream,offset,length)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,length,position,prot,flags)=>{if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync:(stream,buffer,offset,length,mmapFlags)=>{if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:(path,opts={})=>{opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir:path=>{var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:()=>{FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup:(parent,name)=>{var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:()=>{if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},ensureErrnoError:()=>{if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:()=>{FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:(input,output,error)=>{FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:()=>{FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:(path,dontResolveLastLink)=>{var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath:(path,dontResolveLastLink)=>{try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:(parent,name,properties,canRead,canWrite)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:(parent,name,input,output)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:stream=>{stream.seekable=false},close:stream=>{if(output&&output.buffer&&output.buffer.length){output(10)}},read:(stream,buffer,offset,length,pos)=>{var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||"",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,HEAP8,ptr,length,position);return{ptr:ptr,allocated:true}};node.stream_ops=stream_ops;return node},createPreloadedFile:(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}if(Browser.handledByPreloadPlugin(byteArray,fullname,finish,()=>{if(onerror)onerror();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,byteArray=>processData(byteArray),onerror)}else{processData(url)}},indexedDB:()=>{return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:()=>{return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=()=>{out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=()=>{var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=()=>{ok++;if(ok+fail==total)finish()};putRequest.onerror=()=>{fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=()=>{var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var getRequest=files.get(path);getRequest.onsuccess=()=>{if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=()=>{fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAPU32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;tempI64=[Math.floor(stat.atime.getTime()/1e3)>>>0,(tempDouble=Math.floor(stat.atime.getTime()/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>2]=tempI64[0],HEAP32[buf+60>>2]=tempI64[1];HEAPU32[buf+64>>2]=0;tempI64=[Math.floor(stat.mtime.getTime()/1e3)>>>0,(tempDouble=Math.floor(stat.mtime.getTime()/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>2]=tempI64[0],HEAP32[buf+76>>2]=tempI64[1];HEAPU32[buf+80>>2]=0;tempI64=[Math.floor(stat.ctime.getTime()/1e3)>>>0,(tempDouble=Math.floor(stat.ctime.getTime()/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>2]=tempI64[0],HEAP32[buf+92>>2]=tempI64[1];HEAPU32[buf+96>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+104>>2]=tempI64[0],HEAP32[buf+108>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream}};function ___syscall_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.createStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 5:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 6:case 7:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:return-28}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?SYSCALLS.get():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}return name}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}var finalizationRegistry=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}var delayFunction=undefined;function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function attachFinalizer(handle){if("undefined"===typeof FinalizationRegistry){attachFinalizer=handle=>handle;return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$:$$};finalizationRegistry.register(handle,info,handle)}return handle};detachFinalizer=handle=>finalizationRegistry.unregister(handle);return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+embindRepr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+embindRepr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+embindRepr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAP32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes("j")){return dynCallLegacy(sig,ptr,args)}var rtn=getWasmTableEntry(ptr).apply(null,args);return rtn}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=0;Object.assign(argCache,arguments);return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes("j")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAPU32[firstElement+i*4>>2])}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(methodName.startsWith("@@")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}var Emval={toValue:handle=>{if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle)}return emval_handle_array[handle].value},toHandle:value=>{switch(value){case undefined:return 1;case null:return 2;case true:return 3;case false:return 4;default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},"toWireType":function(destructors,value){return Emval.toHandle(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function embindRepr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes("unsigned");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":toWireType,"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value=="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=()=>HEAPU16;shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=()=>HEAPU32;shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value=="string")){throwBindingError("Cannot pass non-string to C++ string type "+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType))}return impl}function __emval_take_value(type,arg){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](arg);return Emval.toHandle(v)}function _abort(){abort("")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function abortOnCannotGrowMemory(requestedSize){abort("OOM")}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;abortOnCannotGrowMemory(requestedSize)}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAPU32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAPU32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAPU32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function doReadv(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function convertI32PairToI53Checked(lo,hi){return hi+2097152>>>0<4194305-!!lo?(lo>>>0)+hi*4294967296:NaN}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var offset=convertI32PairToI53Checked(offset_low,offset_high);if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function doWritev(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value=="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}return thisDate.getFullYear()}return thisDate.getFullYear()-1}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}return"PM"},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var days=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(days/7),2)},"%V":function(date){var val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);if((date.tm_wday+371-date.tm_yday-2)%7<=2){val++}if(!val){val=52;var dec31=(date.tm_wday+7-date.tm_yday-1)%7;if(dec31==4||dec31==5&&__isLeapYear(date.tm_year%400-1)){val++}}else if(val==53){var jan1=(date.tm_wday+371-date.tm_yday)%7;if(jan1!=4&&(jan1!=3||!__isLeapYear(date.tm_year)))val=1}return leadingNulls(val,2)},"%w":function(date){return date.tm_wday},"%W":function(date){var days=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(days/7),2)},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};pattern=pattern.replace(/%%/g,"\0\0");for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}pattern=pattern.replace(/\0\0/g,"%");var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm,loc){return _strftime(s,maxsize,format,tm)}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_unlink"]=FS.unlink;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createDevice"]=FS.createDevice;embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_embind();init_RegisteredPointer();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var asmLibraryArg={"p":___cxa_allocate_exception,"v":___cxa_begin_catch,"E":___cxa_end_catch,"b":___cxa_find_matching_catch_2,"h":___cxa_find_matching_catch_3,"x":___cxa_free_exception,"O":___cxa_rethrow,"q":___cxa_throw,"$":___cxa_uncaught_exceptions,"d":___resumeException,"K":___syscall_fcntl64,"Z":___syscall_ioctl,"_":___syscall_openat,"U":__embind_register_bigint,"da":__embind_register_bool,"S":__embind_register_class,"Q":__embind_register_class_constructor,"y":__embind_register_class_function,"ca":__embind_register_emval,"N":__embind_register_float,"t":__embind_register_function,"s":__embind_register_integer,"m":__embind_register_memory_view,"M":__embind_register_std_string,"D":__embind_register_std_wstring,"ea":__embind_register_void,"fa":__emval_decref,"ga":__emval_incref,"ha":__emval_take_value,"C":_abort,"ba":_emscripten_memcpy_big,"aa":_emscripten_resize_heap,"W":_environ_get,"X":_environ_sizes_get,"I":_fd_close,"Y":_fd_read,"T":_fd_seek,"J":_fd_write,"F":invoke_diii,"G":invoke_fiii,"l":invoke_i,"c":invoke_ii,"f":invoke_iii,"k":invoke_iiii,"i":invoke_iiiii,"z":invoke_iiiiii,"u":invoke_iiiiiii,"H":invoke_iiiiiiii,"B":invoke_iiiiiiiiiiii,"R":invoke_jiiii,"j":invoke_v,"o":invoke_vi,"e":invoke_vii,"g":invoke_viii,"L":invoke_viiii,"P":invoke_viiiii,"r":invoke_viiiiii,"n":invoke_viiiiiii,"w":invoke_viiiiiiiiii,"A":invoke_viiiiiiiiiiiiiii,"a":wasmMemory,"V":_strftime_l};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["ia"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["ja"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["la"]).apply(null,arguments)};var __embind_initialize_bindings=Module["__embind_initialize_bindings"]=function(){return(__embind_initialize_bindings=Module["__embind_initialize_bindings"]=Module["asm"]["ma"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["na"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["oa"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["pa"]).apply(null,arguments)};var setTempRet0=Module["setTempRet0"]=function(){return(setTempRet0=Module["setTempRet0"]=Module["asm"]["qa"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["ra"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["sa"]).apply(null,arguments)};var ___cxa_can_catch=Module["___cxa_can_catch"]=function(){return(___cxa_can_catch=Module["___cxa_can_catch"]=Module["asm"]["ta"]).apply(null,arguments)};var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=function(){return(___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=Module["asm"]["ua"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["va"]).apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["wa"]).apply(null,arguments)};var dynCall_jiiii=Module["dynCall_jiiii"]=function(){return(dynCall_jiiii=Module["dynCall_jiiii"]=Module["asm"]["xa"]).apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ya"]).apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["za"]).apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["Aa"]).apply(null,arguments)};function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_ii(index,a1){var sp=stackSave();try{return getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_v(index){var sp=stackSave();try{getWasmTableEntry(index)()}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_fiii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_diii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_i(index){var sp=stackSave();try{return getWasmTableEntry(index)()}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_jiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiiii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}Module["addRunDependency"]=addRunDependency;Module["removeRunDependency"]=removeRunDependency;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;function runMemoryInitializer(){if(!memoryInitializer)return;if(!isDataURI(memoryInitializer)){memoryInitializer=locateFile(memoryInitializer)}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=readBinary(memoryInitializer);HEAPU8.set(data,1024)}else{addRunDependency("memory initializer");var applyMemoryInitializer=data=>{if(data.byteLength)data=new Uint8Array(data);HEAPU8.set(data,1024);if(Module["memoryInitializerRequest"])delete Module["memoryInitializerRequest"].response;removeRunDependency("memory initializer")};var doBrowserLoad=()=>{readAsync(memoryInitializer,applyMemoryInitializer,function(){var e=new Error("could not load memory initializer "+memoryInitializer);readyPromiseReject(e)})};if(Module["memoryInitializerRequest"]){var useRequest=()=>{var request=Module["memoryInitializerRequest"];var response=request.response;if(request.status!==200&&request.status!==0){console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: "+request.status+", retrying "+memoryInitializer);doBrowserLoad();return}applyMemoryInitializer(response)};if(Module["memoryInitializerRequest"].response){setTimeout(useRequest,0)}else{Module["memoryInitializerRequest"].addEventListener("load",useRequest)}}else{doBrowserLoad()}}}var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();


  return Module.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;

}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/cplusplus_data.js",arguments[3],arguments[4],arguments[5],arguments[6],"/")
},{"_process":151,"buffer":64,"crypto":72,"fs":1,"path":144}],190:[function(require,module,exports){
// Load the c++ files
const {performance} = require("perf_hooks"); // used to time the functions

let factory = require("./cplusplus_data.js"); // the c++ code
let searchFunction; // this is the varible that will store all the c++ code

// get the elements from the html doc that we will use
const posReview_text = document.getElementById("Posreview");
const negReview_text = document.getElementById("Negreview");
const SearchBar_text = document.getElementById("SearchBar");

const gameImage = document.getElementById("gameImage");
const orderedTime = document.getElementById("orderedMapSearchTime");
const unorderedTime = document.getElementById("unorderedMapSearchTime");

// declare variables
let ids = []; // List of ids, used to draw the names on the visualization
let movements = []; // used to determine which dirention on the tree to move next (left or right)
let iterations = 1; // how many times we had to redraw the tree
let levels = 5; // how many levels to draw
let levelsTraversed = 0;


let timer = null; // this is used for the animations

// get the code from the c++ file and save it in search function
factory().then((instance) => {
    searchFunction = instance;
});

// Search and visualize the tree
 function searchTree(){
    // clear the animations
    clearTimeout(timer);

    // get the id from the search input
    let text = SearchBar_text.value;
    let startOfID = text.lastIndexOf("(");
    if(startOfID != -1){
        text = text.substr(startOfID + 1, text.length - startOfID - 2);
    }

    // get the postive review
    posReview_text.value = searchFunction.searchTreePos(text);

    // get the negative reivew and time how long that takes
    var startTime = window.performance.now();
    negReview_text.value = searchFunction.searchTreeNeg(text);
    var endTime = window.performance.now();

    // get the game image
    gameImage.src = "https://steamcdn-a.akamaihd.net/steam/apps/" + text + "/header.jpg";

    // displays the time it took for the ordered map
    orderedTime.innerHTML = (endTime - startTime).toFixed(4) + " milliseconds";
    
    // time the unordered map
    startTime = window.performance.now();
    searchFunction.callToUnordered(text);
    endTime = window.performance.now();

    // display that time
    unorderedTime.innerHTML = (endTime - startTime).toFixed(4) + " milliseconds";

    // clear the visualization screen
    context.clearRect(0,0,screenWidth,screenHeight);

    // initalize all the varibles
    ids = [];
    titles = [];
    movements = [];
    iterations = 1;
    levels = 5;
    timer = null;
    levelsTraversed = 0;

    // draw the tree
    drawTree();

    // from the c++ code get all the ids and which directions to move through the tree
    idsVector = searchFunction.getIDs(text);
    for (var i = 0; i < idsVector.size(); i++) {
        if(i < idsVector.size()/2){
            ids.push(idsVector.get(i));
            if(i > 0){
                if(parseInt(ids.at(i-1)) < parseInt(ids.at(i))){
                    movements.push(1);
                }
                else{
                    movements.push(0);
                }
            }
        }
        else{
            titles.push(idsVector.get(i));
        }
        
    }
    // animate the tree (visualize going through the tree)
    animateTree();
}


// get the elements from the html doc for the animation
const myCanvas = document.getElementById("treeCanvas");
const context = myCanvas.getContext("2d");

const screenWidth = myCanvas.width;
const screenHeight = myCanvas.height;

const maxlevels = 15;

// draw the tree on startup
drawTree();

function drawTree(){
    let depth = levels;
    // if we are nearing the end of the tree we do not need to diplay so many levels
    if(levelsTraversed + levels + 1 > maxlevels){
        depth = maxlevels - levelsTraversed - 3;
    }

    // go through each level in the tree
    for(let i = 0; i <= depth; i++){
        let amountOfNodes = 2 ** i;

        let offest = screenWidth / (amountOfNodes * 2);
        let pos = 0;

        // draw each node in that level
        for(let j = 0; j < amountOfNodes; j++){
            pos += offest;

            if(i != 0){
                // draws the lines connecting the nodes
                context.globalCompositeOperation = "destination-over";
                let parentPos = ((Math.floor((pos / offest) / 4) * 2) + 1) * (offest * 2);
                context.moveTo(parentPos, 15 + (60 * (i - 1)));
                context.lineTo(pos, 15 + (60 * i))
                context.strokeStyle = "white";
                context.stroke();
            }
            // draw the node
            drawNode(pos, i, "blue");

            pos += offest;
        }
    }
}

function animateTree(){
    let pos = screenWidth / 2;

    // make the root node red and display its name
    drawNode(pos, 0, "red");
    drawID(pos, 0, 0);

    // if we need to move through the tree more times than the levels we can display, truncate how many levels we will move through
    // then redraw the tree and repeate this process

    let depth = movements.length;
    if(depth > levels){
        depth = levels;
    }

    // move through the levels
    for(let i = 1; i <= depth; i++){
        let amountOfNodes = 2 ** i;
        let offest = screenWidth / (amountOfNodes * 2);

        // go left
        if(movements[i - 1] == 0){
            pos = pos - offest;
        }
        // go right
        else{
            pos = pos + offest;
        }
        // make this node red
        timer = setTimeout(animateFrame, 250 * i, pos, i); // set timeout is used to give a delay between
        // making each node red so that its not all done instantly but instead is animated
        levelsTraversed++;
    }
    // if we still need move recenter the tree and animate it again
    if(depth < movements.length){
        timer = setTimeout(recenter, 250 * depth + 250, pos,15 + (depth * 60));
        for(let i = 0; i < depth; i++){
            movements.shift();
        }
    }
}

function animateFrame(pos, i){
    drawNode(pos, i, "red");
    drawID(pos, i, i);
    
}

function recenter(pos, height){

    clearInterval(timer);
    timer = setInterval(frame, 10);

    function frame(){
        // clear the screen
        context.clearRect(0,0,screenWidth,screenHeight);

        // while the node we are moving to be the new root is not at the top of the screen
        // continue to move it towards the top middle
        // if it is at the top stop this animation and continue animating the tree
        if(height < 15){
            clearInterval(timer);

            // delete the ids and titles we already went through
            for(let i = 0; i < levels; i++){
                ids.shift();
                titles.shift();
            }

            // redraw the tree and continue the animation
            drawTree();
            animateTree();
        }
        else{
            // move the node towards the middle left
            drawNode(pos,height/60,"red");
            drawID(pos, levels, height/60);

            if(pos < screenWidth / 2){
                pos += 2;
            }
            else{
                pos -= 2;
            }
            height -= 4;
        }
    }
}

function drawNode(pos, i, color){
    context.beginPath();
    context.arc(pos, 15 + (60 * i), 12.5, 0, 2 * Math.PI);
    context.fillStyle = color;
    context.globalCompositeOperation = "source-over";
    context.fill();
    context.stroke();
}

function drawID(pos, i, height){
    context.font = "bold 16px Arial";
    context.fillStyle = "white";

    // if the id is on the left draw it more to the right so it does not clip out of the screen
    // same for on the right side
    // if its in the middle just draw it in the middle

    if(pos < screenWidth/2 + 40 && pos > screenWidth/2 - 40){
        context.fillText(titles[i],pos - (4 * titles[i].length),15 + (60 * height)+ 30);
    }
    else if(pos > screenWidth/2){
        context.fillText(titles[i],pos - (8 * titles[i].length),15 + (60 * height)+ 30);
    }
    else{
        context.fillText(titles[i],pos + (2 * titles[i].length),15 + (60 * height)+ 30);
    }
}

module.exports = {'searchTree': searchTree};

},{"./cplusplus_data.js":189,"perf_hooks":1}]},{},[190])(190)
});
